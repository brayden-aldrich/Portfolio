{
  "version": 3,
  "sources": ["../../node_modules/animejs/lib/anime.esm.js", "../static/js/main.js"],
  "sourcesContent": ["/**\n * anime.js - ESM\n * @version v4.0.0\n * @author Julian Garnier\n * @license MIT\n * @copyright (c) 2025 Julian Garnier\n * @see https://animejs.com\n */\n\n/**\n * @typedef {Object} DefaultsParams\n * @property {number|string} [id]\n * @property {PercentageKeyframes|DurationKeyframes} [keyframes]\n * @property {EasingParam} [playbackEase]\n * @property {number} [playbackRate]\n * @property {number} [frameRate]\n * @property {number|boolean} [loop]\n * @property {boolean} [reversed]\n * @property {boolean} [alternate]\n * @property {boolean|ScrollObserver} [autoplay]\n * @property {number|FunctionValue} [duration]\n * @property {number|FunctionValue} [delay]\n * @property {number} [loopDelay]\n * @property {EasingParam} [ease]\n * @property {'none'|'replace'|'blend'|compositionTypes} [composition]\n * @property {(v: any) => any} [modifier]\n * @property {(tickable: Tickable) => void} [onBegin]\n * @property {(tickable: Tickable) => void} [onBeforeUpdate]\n * @property {(tickable: Tickable) => void} [onUpdate]\n * @property {(tickable: Tickable) => void} [onLoop]\n * @property {(tickable: Tickable) => void} [onPause]\n * @property {(tickable: Tickable) => void} [onComplete]\n * @property {(renderable: Renderable) => void} [onRender]\n */\n\n/** @typedef {JSAnimation|Timeline} Renderable */\n/** @typedef {Timer|Renderable} Tickable */\n/** @typedef {Timer&JSAnimation&Timeline} CallbackArgument */\n/** @typedef {Animatable|Tickable|Draggable|ScrollObserver|Scope} Revertible */\n\n/**\n * @callback EasingFunction\n * @param {Number} time\n * @return {Number}\n */\n\n/**\n * @typedef {('linear'|'linear(x1, x2 25%, x3)'|'in'|'out'|'inOut'|'inQuad'|'outQuad'|'inOutQuad'|'inCubic'|'outCubic'|'inOutCubic'|'inQuart'|'outQuart'|'inOutQuart'|'inQuint'|'outQuint'|'inOutQuint'|'inSine'|'outSine'|'inOutSine'|'inCirc'|'outCirc'|'inOutCirc'|'inExpo'|'outExpo'|'inOutExpo'|'inBounce'|'outBounce'|'inOutBounce'|'inBack'|'outBack'|'inOutBack'|'inElastic'|'outElastic'|'inOutElastic'|'irregular'|'cubicBezier'|'steps'|'in(p = 1.675)'|'out(p = 1.675)'|'inOut(p = 1.675)'|'inBack(overshoot = 1.70158)'|'outBack(overshoot = 1.70158)'|'inOutBack(overshoot = 1.70158)'|'inElastic(amplitude = 1, period = .3)'|'outElastic(amplitude = 1, period = .3)'|'inOutElastic(amplitude = 1, period = .3)'|'irregular(length = 10, randomness = 1)'|'cubicBezier(x1, y1, x2, y2)'|'steps(steps = 10)')} EaseStringParamNames\n */\n\n// A hack to get both ease names suggestions AND allow any strings\n// https://github.com/microsoft/TypeScript/issues/29729#issuecomment-460346421\n/** @typedef {(String & {})|EaseStringParamNames|EasingFunction|Spring} EasingParam */\n\n/** @typedef {HTMLElement|SVGElement} DOMTarget */\n/** @typedef {Record<String, any>} JSTarget */\n/** @typedef {DOMTarget|JSTarget} Target */\n/** @typedef {Target|NodeList|String} TargetSelector */\n/** @typedef {DOMTarget|NodeList|String} DOMTargetSelector */\n/** @typedef {Array.<DOMTargetSelector>|DOMTargetSelector} DOMTargetsParam */\n/** @typedef {Array.<DOMTarget>} DOMTargetsArray */\n/** @typedef {Array.<JSTarget>|JSTarget} JSTargetsParam */\n/** @typedef {Array.<JSTarget>} JSTargetsArray */\n/** @typedef {Array.<TargetSelector>|TargetSelector} TargetsParam */\n/** @typedef {Array.<Target>} TargetsArray */\n\n/**\n * @callback FunctionValue\n * @param {Target} target - The animated target\n * @param {Number} index - The target index\n * @param {Number} length - The total number of animated targets\n * @return {Number|String|TweenObjectValue|Array.<Number|String|TweenObjectValue>}\n */\n\n/**\n * @callback TweenModifier\n * @param {Number} value - The animated value\n * @return {Number|String}\n */\n\n/** @typedef {[Number, Number, Number, Number]} ColorArray */\n\n/**\n * @template T\n * @callback Callback\n * @param {T} self - Returns itself\n * @param {PointerEvent} [e]\n * @return {*}\n */\n\n/**\n * @template {object} T\n * @typedef {Object} TickableCallbacks\n * @property {Callback<T>} [onBegin]\n * @property {Callback<T>} [onBeforeUpdate]\n * @property {Callback<T>} [onUpdate]\n * @property {Callback<T>} [onLoop]\n * @property {Callback<T>} [onPause]\n * @property {Callback<T>} [onComplete]\n */\n\n/**\n * @template {object} T\n * @typedef {Object} RenderableCallbacks\n * @property {Callback<T>} [onRender]\n */\n\n/**\n * @typedef {Object} Tween\n * @property {Number} id\n * @property {JSAnimation} parent\n * @property {String} property\n * @property {Target} target\n * @property {String|Number} _value\n * @property {Function|null} _func\n * @property {EasingFunction} _ease\n * @property {Array.<Number>} _fromNumbers\n * @property {Array.<Number>} _toNumbers\n * @property {Array.<String>} _strings\n * @property {Number} _fromNumber\n * @property {Number} _toNumber\n * @property {Array.<Number>} _numbers\n * @property {Number} _number\n * @property {String} _unit\n * @property {TweenModifier} _modifier\n * @property {Number} _currentTime\n * @property {Number} _delay\n * @property {Number} _updateDuration\n * @property {Number} _startTime\n * @property {Number} _changeDuration\n * @property {Number} _absoluteStartTime\n * @property {tweenTypes} _tweenType\n * @property {valueTypes} _valueType\n * @property {Number} _composition\n * @property {Number} _isOverlapped\n * @property {Number} _isOverridden\n * @property {Number} _renderTransforms\n * @property {Tween} _prevRep\n * @property {Tween} _nextRep\n * @property {Tween} _prevAdd\n * @property {Tween} _nextAdd\n * @property {Tween} _prev\n * @property {Tween} _next\n */\n\n/**\n * @typedef TweenDecomposedValue\n * @property {Number} t - Type\n * @property {Number} n - Single number value\n * @property {String} u - Value unit\n * @property {String} o - Value operator\n * @property {Array.<Number>} d - Array of Numbers (in case of complex value type)\n * @property {Array.<String>} s - Strings (in case of complex value type)\n */\n\n/** @typedef {{_head: null|Tween, _tail: null|Tween}} TweenPropertySiblings */\n/** @typedef {Record<String, TweenPropertySiblings>} TweenLookups */\n/** @typedef {WeakMap.<Target, TweenLookups>} TweenReplaceLookups */\n/** @typedef {Map.<Target, TweenLookups>} TweenAdditiveLookups */\n\n/**\n * @typedef {Object} TimerOptions\n * @property {Number|String} [id]\n * @property {TweenParamValue} [duration]\n * @property {TweenParamValue} [delay]\n * @property {Number} [loopDelay]\n * @property {Boolean} [reversed]\n * @property {Boolean} [alternate]\n * @property {Boolean|Number} [loop]\n * @property {Boolean|ScrollObserver} [autoplay]\n * @property {Number} [frameRate]\n * @property {Number} [playbackRate]\n */\n\n/**\n\n/**\n * @typedef {TimerOptions & TickableCallbacks<Timer>} TimerParams\n */\n\n/**\n * @typedef {Number|String|FunctionValue} TweenParamValue\n */\n\n/**\n * @typedef {TweenParamValue|[TweenParamValue, TweenParamValue]} TweenPropValue\n */\n\n/**\n * @typedef {(String & {})|'none'|'replace'|'blend'|compositionTypes} TweenComposition\n */\n\n/**\n * @typedef {Object} TweenParamsOptions\n * @property {TweenParamValue} [duration]\n * @property {TweenParamValue} [delay]\n * @property {EasingParam} [ease]\n * @property {TweenModifier} [modifier]\n * @property {TweenComposition} [composition]\n */\n\n/**\n * @typedef {Object} TweenValues\n * @property {TweenParamValue} [from]\n * @property {TweenPropValue} [to]\n * @property {TweenPropValue} [fromTo]\n */\n\n/**\n * @typedef {TweenParamsOptions & TweenValues} TweenKeyValue\n */\n\n/**\n * @typedef {Array.<TweenKeyValue|TweenPropValue>} ArraySyntaxValue\n */\n\n/**\n * @typedef {TweenParamValue|ArraySyntaxValue|TweenKeyValue} TweenOptions\n */\n\n/**\n * @typedef {Partial<{to: TweenParamValue|Array.<TweenParamValue>; from: TweenParamValue|Array.<TweenParamValue>; fromTo: TweenParamValue|Array.<TweenParamValue>;}>} TweenObjectValue\n */\n\n/**\n * @typedef {Object} PercentageKeyframeOptions\n * @property {EasingParam} [ease]\n */\n\n/**\n * @typedef {Record<String, TweenParamValue>} PercentageKeyframeParams\n */\n\n/**\n * @typedef {Record<String, PercentageKeyframeParams & PercentageKeyframeOptions>} PercentageKeyframes\n */\n\n/**\n * @typedef {Array<Record<String, TweenOptions | TweenModifier | boolean> & TweenParamsOptions>} DurationKeyframes\n */\n\n/**\n * @typedef {Object} AnimationOptions\n * @property {PercentageKeyframes|DurationKeyframes} [keyframes]\n * @property {EasingParam} [playbackEase]\n */\n\n// TODO: Currently setting TweenModifier to the intersected Record<> makes the FunctionValue type target param any if only one parameter is set\n/**\n * @typedef {Record<String, TweenOptions | Callback<JSAnimation> | TweenModifier | boolean | PercentageKeyframes | DurationKeyframes | ScrollObserver> & TimerOptions & AnimationOptions & TweenParamsOptions & TickableCallbacks<JSAnimation> & RenderableCallbacks<JSAnimation>} AnimationParams\n */\n\n/**\n * @typedef {Object} TimelineOptions\n * @property {DefaultsParams} [defaults]\n * @property {EasingParam} [playbackEase]\n */\n\n/**\n * @typedef {TimerOptions & TimelineOptions & TickableCallbacks<Timeline> & RenderableCallbacks<Timeline>} TimelineParams\n */\n\n/**\n * @callback AnimatablePropertySetter\n * @param  {Number|Array.<Number>} to\n * @param  {Number} [duration]\n * @param  {EasingParam} [ease]\n * @return {AnimatableObject}\n */\n\n/**\n * @callback AnimatablePropertyGetter\n * @return {Number|Array.<Number>}\n */\n\n/**\n * @typedef {AnimatablePropertySetter & AnimatablePropertyGetter} AnimatableProperty\n */\n\n/**\n * @typedef {Animatable & Record<String, AnimatableProperty>} AnimatableObject\n */\n\n/**\n * @typedef {Object} AnimatablePropertyParamsOptions\n * @property {String} [unit]\n * @property {TweenParamValue} [duration]\n * @property {EasingParam} [ease]\n * @property {TweenModifier} [modifier]\n * @property {TweenComposition} [composition]\n */\n\n/**\n * @typedef {Record<String, TweenParamValue | EasingParam | TweenModifier | TweenComposition | AnimatablePropertyParamsOptions> & AnimatablePropertyParamsOptions} AnimatableParams\n */\n\n\n// Environments\n\n// TODO: Do we need to check if we're running inside a worker ?\nconst isBrowser = typeof window !== 'undefined';\n\n/** @type {Object|Null} */\nconst win = isBrowser ? window : null;\n\n/** @type {Document} */\nconst doc = isBrowser ? document : null;\n\n// Enums\n\n/** @enum {Number} */\nconst tweenTypes = {\n  OBJECT: 0,\n  ATTRIBUTE: 1,\n  CSS: 2,\n  TRANSFORM: 3,\n  CSS_VAR: 4,\n};\n\n/** @enum {Number} */\nconst valueTypes = {\n  NUMBER: 0,\n  UNIT: 1,\n  COLOR: 2,\n  COMPLEX: 3,\n};\n\n/** @enum {Number} */\nconst tickModes = {\n  NONE: 0,\n  AUTO: 1,\n  FORCE: 2,\n};\n\n/** @enum {Number} */\nconst compositionTypes = {\n  replace: 0,\n  none: 1,\n  blend: 2,\n};\n\n// Cache symbols\n\nconst isRegisteredTargetSymbol = Symbol();\nconst isDomSymbol = Symbol();\nconst isSvgSymbol = Symbol();\nconst transformsSymbol = Symbol();\nconst morphPointsSymbol = Symbol();\nconst proxyTargetSymbol = Symbol();\n\n// Numbers\n\nconst minValue = 1e-11;\nconst maxValue = 1e12;\nconst K = 1e3;\nconst maxFps = 120;\n\n// Strings\n\nconst emptyString = '';\nconst shortTransforms = new Map();\n\nshortTransforms.set('x', 'translateX');\nshortTransforms.set('y', 'translateY');\nshortTransforms.set('z', 'translateZ');\n\nconst validTransforms = [\n  'translateX',\n  'translateY',\n  'translateZ',\n  'rotate',\n  'rotateX',\n  'rotateY',\n  'rotateZ',\n  'scale',\n  'scaleX',\n  'scaleY',\n  'scaleZ',\n  'skew',\n  'skewX',\n  'skewY',\n  'perspective',\n  'matrix',\n  'matrix3d',\n];\n\nconst transformsFragmentStrings = validTransforms.reduce((a, v) => ({...a, [v]: v + '('}), {});\n\n// Functions\n\n/** @return {void} */\nconst noop = () => {};\n\n// Regex\n\nconst hexTestRgx = /(^#([\\da-f]{3}){1,2}$)|(^#([\\da-f]{4}){1,2}$)/i;\nconst rgbExecRgx = /rgb\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*\\)/i;\nconst rgbaExecRgx = /rgba\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(-?\\d+|-?\\d*.\\d+)\\s*\\)/i;\nconst hslExecRgx = /hsl\\(\\s*(-?\\d+|-?\\d*.\\d+)\\s*,\\s*(-?\\d+|-?\\d*.\\d+)%\\s*,\\s*(-?\\d+|-?\\d*.\\d+)%\\s*\\)/i;\nconst hslaExecRgx = /hsla\\(\\s*(-?\\d+|-?\\d*.\\d+)\\s*,\\s*(-?\\d+|-?\\d*.\\d+)%\\s*,\\s*(-?\\d+|-?\\d*.\\d+)%\\s*,\\s*(-?\\d+|-?\\d*.\\d+)\\s*\\)/i;\n// export const digitWithExponentRgx = /[-+]?\\d*\\.?\\d+(?:[eE][-+]?\\d+)?/g;\nconst digitWithExponentRgx = /[-+]?\\d*\\.?\\d+(?:e[-+]?\\d)?/gi;\n// export const unitsExecRgx = /^([-+]?\\d*\\.?\\d+(?:[eE][-+]?\\d+)?)+([a-z]+|%)$/i;\nconst unitsExecRgx = /^([-+]?\\d*\\.?\\d+(?:e[-+]?\\d+)?)([a-z]+|%)$/i;\nconst lowerCaseRgx = /([a-z])([A-Z])/g;\nconst transformsExecRgx = /(\\w+)(\\([^)]+\\)+)/g; // Match inline transforms with cacl() values, returns the value wrapped in ()\nconst relativeValuesExecRgx = /(\\*=|\\+=|-=)/;\n\n\n\n\n/** @type {DefaultsParams} */\nconst defaults = {\n  id: null,\n  keyframes: null,\n  playbackEase: null,\n  playbackRate: 1,\n  frameRate: maxFps,\n  loop: 0,\n  reversed: false,\n  alternate: false,\n  autoplay: true,\n  duration: K,\n  delay: 0,\n  loopDelay: 0,\n  ease: 'out(2)',\n  composition: compositionTypes.replace,\n  modifier: v => v,\n  onBegin: noop,\n  onBeforeUpdate: noop,\n  onUpdate: noop,\n  onLoop: noop,\n  onPause: noop,\n  onComplete: noop,\n  onRender: noop,\n};\n\nconst globals = {\n  /** @type {DefaultsParams} */\n  defaults,\n  /** @type {Document|DOMTarget} */\n  root: doc,\n  /** @type {Scope} */\n  scope: null,\n  /** @type {Number} */\n  precision: 4,\n  /** @type {Number} */\n  timeScale: 1,\n  /** @type {Number} */\n  tickThreshold: 200,\n};\n\nconst globalVersions = { version: '4.0.0', engine: null };\n\nif (isBrowser) {\n  if (!win.AnimeJS) win.AnimeJS = [];\n  win.AnimeJS.push(globalVersions);\n}\n\n// Strings\n\n/**\n * @param  {String} str\n * @return {String}\n */\nconst toLowerCase = str => str.replace(lowerCaseRgx, '$1-$2').toLowerCase();\n\n/**\n * Prioritize this method instead of regex when possible\n * @param  {String} str\n * @param  {String} sub\n * @return {Boolean}\n */\nconst stringStartsWith = (str, sub) => str.indexOf(sub) === 0;\n\n// Time\n// Note: Date.now is used instead of performance.now since it is precise enough for timings calculations, performs slightly faster and works in Node.js environement.\nconst now = Date.now;\n\n// Types checkers\n\nconst isArr = Array.isArray;\n/**@param {any} a @return {a is Record<String, any>} */\nconst isObj = a => a && a.constructor === Object;\n/**@param {any} a @return {a is Number} */\nconst isNum = a => typeof a === 'number' && !isNaN(a);\n/**@param {any} a @return {a is String} */\nconst isStr = a => typeof a === 'string';\n/**@param {any} a @return {a is Function} */\nconst isFnc = a => typeof a === 'function';\n/**@param {any} a @return {a is undefined} */\nconst isUnd = a => typeof a === 'undefined';\n/**@param {any} a @return {a is null | undefined} */\nconst isNil = a => isUnd(a) || a === null;\n/**@param {any} a @return {a is SVGElement} */\nconst isSvg = a => isBrowser && a instanceof SVGElement;\n/**@param {any} a @return {Boolean} */\nconst isHex = a => hexTestRgx.test(a);\n/**@param {any} a @return {Boolean} */\nconst isRgb = a => stringStartsWith(a, 'rgb');\n/**@param {any} a @return {Boolean} */\nconst isHsl = a => stringStartsWith(a, 'hsl');\n/**@param {any} a @return {Boolean} */\nconst isCol = a => isHex(a) || isRgb(a) || isHsl(a);\n/**@param {any} a @return {Boolean} */\nconst isKey = a => !globals.defaults.hasOwnProperty(a);\n\n// Number\n\n/**\n * @param  {Number|String} str\n * @return {Number}\n */\nconst parseNumber = str => isStr(str) ?\n  parseFloat(/** @type {String} */(str)) :\n  /** @type {Number} */(str);\n\n// Math\n\nconst pow = Math.pow;\nconst sqrt = Math.sqrt;\nconst sin = Math.sin;\nconst cos = Math.cos;\nconst abs = Math.abs;\nconst exp = Math.exp;\nconst ceil = Math.ceil;\nconst floor = Math.floor;\nconst asin = Math.asin;\nconst max = Math.max;\nconst atan2 = Math.atan2;\nconst PI = Math.PI;\nconst _round = Math.round;\n\n\n/**\n * @param  {Number} v\n * @param  {Number} min\n * @param  {Number} max\n * @return {Number}\n */\nconst clamp = (v, min, max) => v < min ? min : v > max ? max : v;\n\nconst powCache = {};\n\n/**\n * @param  {Number} v\n * @param  {Number} decimalLength\n * @return {Number}\n */\nconst round = (v, decimalLength) => {\n  if (decimalLength < 0) return v;\n  if (!decimalLength) return _round(v);\n  let p = powCache[decimalLength];\n  if (!p) p = powCache[decimalLength] = 10 ** decimalLength;\n  return _round(v * p) / p;\n};\n\n/**\n * @param  {Number} v\n * @param  {Number|Array<Number>} increment\n * @return {Number}\n */\nconst snap = (v, increment) => isArr(increment) ? increment.reduce((closest, cv) => (abs(cv - v) < abs(closest - v) ? cv : closest)) : increment ? _round(v / increment) * increment : v;\n\n/**\n * @param  {Number} start\n * @param  {Number} end\n * @param  {Number} progress\n * @return {Number}\n */\nconst interpolate = (start, end, progress) => start + (end - start) * progress;\n\n/**\n * @param  {Number} v\n * @return {Number}\n */\nconst clampInfinity = v => v === Infinity ? maxValue : v === -Infinity ? -1e12 : v;\n\n/**\n * @param  {Number} v\n * @return {Number}\n */\nconst clampZero = v => v < minValue ? minValue : v;\n\n// Arrays\n\n/**\n * @template T\n * @param {T[]} a\n * @return {T[]}\n */\nconst cloneArray = a => isArr(a) ? [ ...a ] : a;\n\n// Objects\n\n/**\n * @template T\n * @template U\n * @param {T} o1\n * @param {U} o2\n * @return {T & U}\n */\nconst mergeObjects = (o1, o2) => {\n  const merged = /** @type {T & U} */({ ...o1 });\n  for (let p in o2) {\n    const o1p = /** @type {T & U} */(o1)[p];\n    merged[p] = isUnd(o1p) ? /** @type {T & U} */(o2)[p] : o1p;\n  }  return merged;\n};\n\n// Linked lists\n\n/**\n * @param {Object} parent\n * @param {Function} callback\n * @param {Boolean} [reverse]\n * @param {String} [prevProp]\n * @param {String} [nextProp]\n * @return {void}\n */\nconst forEachChildren = (parent, callback, reverse, prevProp = '_prev', nextProp = '_next') => {\n  let next = parent._head;\n  let adjustedNextProp = nextProp;\n  if (reverse) {\n    next = parent._tail;\n    adjustedNextProp = prevProp;\n  }\n  while (next) {\n    const currentNext = next[adjustedNextProp];\n    callback(next);\n    next = currentNext;\n  }\n};\n\n/**\n * @param  {Object} parent\n * @param  {Object} child\n * @param  {String} [prevProp]\n * @param  {String} [nextProp]\n * @return {void}\n */\nconst removeChild = (parent, child, prevProp = '_prev', nextProp = '_next') => {\n  const prev = child[prevProp];\n  const next = child[nextProp];\n  prev ? prev[nextProp] = next : parent._head = next;\n  next ? next[prevProp] = prev : parent._tail = prev;\n  child[prevProp] = null;\n  child[nextProp] = null;\n};\n\n/**\n * @param  {Object} parent\n * @param  {Object} child\n * @param  {Function} [sortMethod]\n * @param  {String} prevProp\n * @param  {String} nextProp\n * @return {void}\n */\nconst addChild = (parent, child, sortMethod, prevProp = '_prev', nextProp = '_next') => {\n  let prev = parent._tail;\n  while (prev && sortMethod && sortMethod(prev, child)) prev = prev[prevProp];\n  const next = prev ? prev[nextProp] : parent._head;\n  prev ? prev[nextProp] = child : parent._head = child;\n  next ? next[prevProp] = child : parent._tail = child;\n  child[prevProp] = prev;\n  child[nextProp] = next;\n};\n\n/*\n * Base class to control framerate and playback rate.\n * Inherited by Engine, Timer, Animation and Timeline.\n */\nclass Clock {\n\n  /** @param {Number} [initTime] */\n  constructor(initTime = 0) {\n    /** @type {Number} */\n    this.deltaTime = 0;\n    /** @type {Number} */\n    this._currentTime = initTime;\n    /** @type {Number} */\n    this._elapsedTime = initTime;\n    /** @type {Number} */\n    this._startTime = initTime;\n    /** @type {Number} */\n    this._lastTime = initTime;\n    /** @type {Number} */\n    this._scheduledTime = 0;\n    /** @type {Number} */\n    this._frameDuration = round(K / maxFps, 0);\n    /** @type {Number} */\n    this._fps = maxFps;\n    /** @type {Number} */\n    this._speed = 1;\n    /** @type {Boolean} */\n    this._hasChildren = false;\n    /** @type {Tickable|Tween} */\n    this._head = null;\n    /** @type {Tickable|Tween} */\n    this._tail = null;\n  }\n\n  get fps() {\n    return this._fps;\n  }\n\n  set fps(frameRate) {\n    const previousFrameDuration = this._frameDuration;\n    const fr = +frameRate;\n    const fps = fr < minValue ? minValue : fr;\n    const frameDuration = round(K / fps, 0);\n    this._fps = fps;\n    this._frameDuration = frameDuration;\n    this._scheduledTime += frameDuration - previousFrameDuration;\n  }\n\n  get speed() {\n    return this._speed;\n  }\n\n  set speed(playbackRate) {\n    const pbr = +playbackRate;\n    this._speed = pbr < minValue ? minValue : pbr;\n  }\n\n  /**\n   * @param  {Number} time\n   * @return {tickModes}\n   */\n  requestTick(time) {\n    const scheduledTime = this._scheduledTime;\n    const elapsedTime = this._elapsedTime;\n    this._elapsedTime += (time - elapsedTime);\n    // If the elapsed time is lower than the scheduled time\n    // this means not enough time has passed to hit one frameDuration\n    // so skip that frame\n    if (elapsedTime < scheduledTime) return tickModes.NONE;\n    const frameDuration = this._frameDuration;\n    const frameDelta = elapsedTime - scheduledTime;\n    // Ensures that _scheduledTime progresses in steps of at least 1 frameDuration.\n    // Skips ahead if the actual elapsed time is higher.\n    this._scheduledTime += frameDelta < frameDuration ? frameDuration : frameDelta;\n    return tickModes.AUTO;\n  }\n\n  /**\n   * @param  {Number} time\n   * @return {Number}\n   */\n  computeDeltaTime(time) {\n    const delta = time - this._lastTime;\n    this.deltaTime = delta;\n    this._lastTime = time;\n    return delta;\n  }\n\n}\n\n\n\n\n/**\n * @param  {Tickable} tickable\n * @param  {Number} time\n * @param  {Number} muteCallbacks\n * @param  {Number} internalRender\n * @param  {tickModes} tickMode\n * @return {Number}\n */\nconst render = (tickable, time, muteCallbacks, internalRender, tickMode) => {\n\n  const parent = tickable.parent;\n  const duration = tickable.duration;\n  const completed = tickable.completed;\n  const iterationDuration = tickable.iterationDuration;\n  const iterationCount = tickable.iterationCount;\n  const _currentIteration = tickable._currentIteration;\n  const _loopDelay = tickable._loopDelay;\n  const _reversed = tickable._reversed;\n  const _alternate = tickable._alternate;\n  const _hasChildren = tickable._hasChildren;\n  const tickableDelay = tickable._delay;\n  const tickablePrevAbsoluteTime = tickable._currentTime; // TODO: rename ._currentTime to ._absoluteCurrentTime\n\n  const tickableEndTime = tickableDelay + iterationDuration;\n  const tickableAbsoluteTime = time - tickableDelay;\n  const tickablePrevTime = clamp(tickablePrevAbsoluteTime, -tickableDelay, duration);\n  const tickableCurrentTime = clamp(tickableAbsoluteTime, -tickableDelay, duration);\n  const deltaTime = tickableAbsoluteTime - tickablePrevAbsoluteTime;\n  const isCurrentTimeAboveZero = tickableCurrentTime > 0;\n  const isCurrentTimeEqualOrAboveDuration = tickableCurrentTime >= duration;\n  const isSetter = duration <= minValue;\n  const forcedTick = tickMode === tickModes.FORCE;\n\n  let isOdd = 0;\n  let iterationElapsedTime = tickableAbsoluteTime;\n  // Render checks\n  // Used to also check if the children have rendered in order to trigger the onRender callback on the parent timer\n  let hasRendered = 0;\n\n  // Execute the \"expensive\" iterations calculations only when necessary\n  if (iterationCount > 1) {\n    // bitwise NOT operator seems to be generally faster than Math.floor() across browsers\n    const currentIteration = ~~(tickableCurrentTime / (iterationDuration + (isCurrentTimeEqualOrAboveDuration ? 0 : _loopDelay)));\n    tickable._currentIteration = clamp(currentIteration, 0, iterationCount);\n    // Prevent the iteration count to go above the max iterations when reaching the end of the animation\n    if (isCurrentTimeEqualOrAboveDuration) tickable._currentIteration--;\n    isOdd = tickable._currentIteration % 2;\n    iterationElapsedTime = tickableCurrentTime % (iterationDuration + _loopDelay) || 0;\n  }\n\n  // Checks if exactly one of _reversed and (_alternate && isOdd) is true\n  const isReversed = _reversed ^ (_alternate && isOdd);\n  const _ease = /** @type {Renderable} */(tickable)._ease;\n  let iterationTime = isCurrentTimeEqualOrAboveDuration ? isReversed ? 0 : duration : isReversed ? iterationDuration - iterationElapsedTime : iterationElapsedTime;\n  if (_ease) iterationTime = iterationDuration * _ease(iterationTime / iterationDuration) || 0;\n  const isRunningBackwards = (parent ? parent.backwards : tickableAbsoluteTime < tickablePrevAbsoluteTime) ? !isReversed : !!isReversed;\n\n  tickable._currentTime = tickableAbsoluteTime;\n  tickable._iterationTime = iterationTime;\n  tickable.backwards = isRunningBackwards;\n\n  if (isCurrentTimeAboveZero && !tickable.began) {\n    tickable.began = true;\n    if (!muteCallbacks && !(parent && (isRunningBackwards || !parent.began))) {\n      tickable.onBegin(/** @type {CallbackArgument} */(tickable));\n    }\n  } else if (tickableAbsoluteTime <= 0) {\n    tickable.began = false;\n  }\n\n  // Only triggers onLoop for tickable without children, otherwise call the the onLoop callback in the tick function\n  // Make sure to trigger the onLoop before rendering to allow .refresh() to pickup the current values\n  if (!muteCallbacks && !_hasChildren && isCurrentTimeAboveZero && tickable._currentIteration !== _currentIteration) {\n    tickable.onLoop(/** @type {CallbackArgument} */(tickable));\n  }\n\n  if (\n    forcedTick ||\n    tickMode === tickModes.AUTO && (\n      time >= tickableDelay && time <= tickableEndTime || // Normal render\n      time <= tickableDelay && tickablePrevTime > tickableDelay || // Playhead is before the animation start time so make sure the animation is at its initial state\n      time >= tickableEndTime && tickablePrevTime !== duration // Playhead is after the animation end time so make sure the animation is at its end state\n    ) ||\n    iterationTime >= tickableEndTime && tickablePrevTime !== duration ||\n    iterationTime <= tickableDelay && tickablePrevTime > 0 ||\n    time <= tickablePrevTime && tickablePrevTime === duration && completed || // Force a render if a seek occurs on an completed animation\n    isCurrentTimeEqualOrAboveDuration && !completed && isSetter // This prevents 0 duration tickables to be skipped\n  ) {\n\n    if (isCurrentTimeAboveZero) {\n      // Trigger onUpdate callback before rendering\n      tickable.computeDeltaTime(tickablePrevTime);\n      if (!muteCallbacks) tickable.onBeforeUpdate(/** @type {CallbackArgument} */(tickable));\n    }\n\n    // Start tweens rendering\n    if (!_hasChildren) {\n\n      // Time has jumped more than globals.tickThreshold so consider this tick manual\n      const forcedRender = forcedTick || (isRunningBackwards ? deltaTime * -1 : deltaTime) >= globals.tickThreshold;\n      const absoluteTime = tickable._offset + (parent ? parent._offset : 0) + tickableDelay + iterationTime;\n\n      // Only Animation can have tweens, Timer returns undefined\n      let tween = /** @type {Tween} */(/** @type {JSAnimation} */(tickable)._head);\n      let tweenTarget;\n      let tweenStyle;\n      let tweenTargetTransforms;\n      let tweenTargetTransformsProperties;\n      let tweenTransformsNeedUpdate = 0;\n\n      while (tween) {\n\n        const tweenComposition = tween._composition;\n        const tweenCurrentTime = tween._currentTime;\n        const tweenChangeDuration = tween._changeDuration;\n        const tweenAbsEndTime = tween._absoluteStartTime + tween._changeDuration;\n        const tweenNextRep = tween._nextRep;\n        const tweenPrevRep = tween._prevRep;\n        const tweenHasComposition = tweenComposition !== compositionTypes.none;\n\n        if ((forcedRender || (\n            (tweenCurrentTime !== tweenChangeDuration || absoluteTime <= tweenAbsEndTime + (tweenNextRep ? tweenNextRep._delay : 0)) &&\n            (tweenCurrentTime !== 0 || absoluteTime >= tween._absoluteStartTime)\n          )) && (!tweenHasComposition || (\n            !tween._isOverridden &&\n            (!tween._isOverlapped || absoluteTime <= tweenAbsEndTime) &&\n            (!tweenNextRep || (tweenNextRep._isOverridden || absoluteTime <= tweenNextRep._absoluteStartTime)) &&\n            (!tweenPrevRep || (tweenPrevRep._isOverridden || (absoluteTime >= (tweenPrevRep._absoluteStartTime + tweenPrevRep._changeDuration) + tween._delay)))\n          ))\n        ) {\n\n          const tweenNewTime = tween._currentTime = clamp(iterationTime - tween._startTime, 0, tweenChangeDuration);\n          const tweenProgress = tween._ease(tweenNewTime / tween._updateDuration);\n          const tweenModifier = tween._modifier;\n          const tweenValueType = tween._valueType;\n          const tweenType = tween._tweenType;\n          const tweenIsObject = tweenType === tweenTypes.OBJECT;\n          const tweenIsNumber = tweenValueType === valueTypes.NUMBER;\n          // Only round the in-between frames values if the final value is a string\n          const tweenPrecision = (tweenIsNumber && tweenIsObject) || tweenProgress === 0 || tweenProgress === 1 ? -1 : globals.precision;\n\n          // Recompose tween value\n          /** @type {String|Number} */\n          let value;\n          /** @type {Number} */\n          let number;\n\n          if (tweenIsNumber) {\n            value = number = /** @type {Number} */(tweenModifier(round(interpolate(tween._fromNumber, tween._toNumber,  tweenProgress), tweenPrecision )));\n          } else if (tweenValueType === valueTypes.UNIT) {\n            // Rounding the values speed up string composition\n            number = /** @type {Number} */(tweenModifier(round(interpolate(tween._fromNumber, tween._toNumber,  tweenProgress), tweenPrecision)));\n            value = `${number}${tween._unit}`;\n          } else if (tweenValueType === valueTypes.COLOR) {\n            const fn = tween._fromNumbers;\n            const tn = tween._toNumbers;\n            const r = round(clamp(/** @type {Number} */(tweenModifier(interpolate(fn[0], tn[0], tweenProgress))), 0, 255), 0);\n            const g = round(clamp(/** @type {Number} */(tweenModifier(interpolate(fn[1], tn[1], tweenProgress))), 0, 255), 0);\n            const b = round(clamp(/** @type {Number} */(tweenModifier(interpolate(fn[2], tn[2], tweenProgress))), 0, 255), 0);\n            const a = clamp(/** @type {Number} */(tweenModifier(round(interpolate(fn[3], tn[3], tweenProgress), tweenPrecision))), 0, 1);\n            value = `rgba(${r},${g},${b},${a})`;\n            if (tweenHasComposition) {\n              const ns = tween._numbers;\n              ns[0] = r;\n              ns[1] = g;\n              ns[2] = b;\n              ns[3] = a;\n            }\n          } else if (tweenValueType === valueTypes.COMPLEX) {\n            value = tween._strings[0];\n            for (let j = 0, l = tween._toNumbers.length; j < l; j++) {\n              const n = /** @type {Number} */(tweenModifier(round(interpolate(tween._fromNumbers[j], tween._toNumbers[j], tweenProgress), tweenPrecision)));\n              const s = tween._strings[j + 1];\n              value += `${s ? n + s : n}`;\n              if (tweenHasComposition) {\n                tween._numbers[j] = n;\n              }\n            }\n          }\n\n          // For additive tweens and Animatables\n          if (tweenHasComposition) {\n            tween._number = number;\n          }\n\n          if (!internalRender && tweenComposition !== compositionTypes.blend) {\n\n            const tweenProperty = tween.property;\n            tweenTarget = tween.target;\n\n            if (tweenIsObject) {\n              tweenTarget[tweenProperty] = value;\n            } else if (tweenType === tweenTypes.ATTRIBUTE) {\n              /** @type {DOMTarget} */(tweenTarget).setAttribute(tweenProperty, /** @type {String} */(value));\n            } else {\n              tweenStyle = /** @type {DOMTarget} */(tweenTarget).style;\n              if (tweenType === tweenTypes.TRANSFORM) {\n                if (tweenTarget !== tweenTargetTransforms) {\n                  tweenTargetTransforms = tweenTarget;\n                  // NOTE: Referencing the cachedTransforms in the tween property directly can be a little bit faster but appears to increase memory usage.\n                  tweenTargetTransformsProperties = tweenTarget[transformsSymbol];\n                }\n                tweenTargetTransformsProperties[tweenProperty] = value;\n                tweenTransformsNeedUpdate = 1;\n              } else if (tweenType === tweenTypes.CSS) {\n                tweenStyle[tweenProperty] = value;\n              } else if (tweenType === tweenTypes.CSS_VAR) {\n                tweenStyle.setProperty(tweenProperty,/** @type {String} */(value));\n              }\n            }\n\n            if (isCurrentTimeAboveZero) hasRendered = 1;\n\n          } else {\n            // Used for composing timeline tweens without having to do a real render\n            tween._value = value;\n          }\n\n        }\n\n        // NOTE: Possible improvement: Use translate(x,y) / translate3d(x,y,z) syntax\n        // to reduce memory usage on string composition\n        if (tweenTransformsNeedUpdate && tween._renderTransforms) {\n          let str = emptyString;\n          for (let key in tweenTargetTransformsProperties) {\n            str += `${transformsFragmentStrings[key]}${tweenTargetTransformsProperties[key]}) `;\n          }\n          tweenStyle.transform = str;\n          tweenTransformsNeedUpdate = 0;\n        }\n\n        tween = tween._next;\n      }\n\n      if (!muteCallbacks && hasRendered) {\n        /** @type {JSAnimation} */(tickable).onRender(/** @type {JSAnimation} */(tickable));\n      }\n    }\n\n    if (!muteCallbacks && isCurrentTimeAboveZero) {\n      tickable.onUpdate(/** @type {CallbackArgument} */(tickable));\n    }\n\n  }\n\n  // End tweens rendering\n\n  // Handle setters on timeline differently and allow re-trigering the onComplete callback when seeking backwards\n  if (parent && isSetter) {\n    if (!muteCallbacks && (\n      (parent.began && !isRunningBackwards && tickableAbsoluteTime >= duration && !completed) ||\n      (isRunningBackwards && tickableAbsoluteTime <= minValue && completed)\n    )) {\n      tickable.onComplete(/** @type {CallbackArgument} */(tickable));\n      tickable.completed = !isRunningBackwards;\n    }\n  // If currentTime is both above 0 and at least equals to duration, handles normal onComplete or infinite loops\n  } else if (isCurrentTimeAboveZero && isCurrentTimeEqualOrAboveDuration) {\n    if (iterationCount === Infinity) {\n      // Offset the tickable _startTime with its duration to reset _currentTime to 0 and continue the infinite timer\n      tickable._startTime += tickable.duration;\n    } else if (tickable._currentIteration >= iterationCount - 1) {\n      // By setting paused to true, we tell the engine loop to not render this tickable and removes it from the list on the next tick\n      tickable.paused = true;\n      if (!completed && !_hasChildren) {\n        // If the tickable has children, triggers onComplete() only when all children have completed in the tick function\n        tickable.completed = true;\n        if (!muteCallbacks && !(parent && (isRunningBackwards || !parent.began))) {\n          tickable.onComplete(/** @type {CallbackArgument} */(tickable));\n          tickable._resolve(/** @type {CallbackArgument} */(tickable));\n        }\n      }\n    }\n  // Otherwise set the completed flag to false\n  } else {\n    tickable.completed = false;\n  }\n\n  // NOTE: hasRendered * direction (negative for backwards) this way we can remove the tickable.backwards property completly ?\n  return hasRendered;\n};\n\n/**\n * @param  {Tickable} tickable\n * @param  {Number} time\n * @param  {Number} muteCallbacks\n * @param  {Number} internalRender\n * @param  {Number} tickMode\n * @return {void}\n */\nconst tick = (tickable, time, muteCallbacks, internalRender, tickMode) => {\n  const _currentIteration = tickable._currentIteration;\n  render(tickable, time, muteCallbacks, internalRender, tickMode);\n  if (tickable._hasChildren) {\n    const tl = /** @type {Timeline} */(tickable);\n    const tlIsRunningBackwards = tl.backwards;\n    const tlChildrenTime = internalRender ? time : tl._iterationTime;\n    const tlCildrenTickTime = now();\n\n    let tlChildrenHasRendered = 0;\n    let tlChildrenHaveCompleted = true;\n\n    // If the timeline has looped forward, we need to manually triggers children skipped callbacks\n    if (!internalRender && tl._currentIteration !== _currentIteration) {\n      const tlIterationDuration = tl.iterationDuration;\n      forEachChildren(tl, (/** @type {JSAnimation} */child) => {\n        if (!tlIsRunningBackwards) {\n          // Force an internal render to trigger the callbacks if the child has not completed on loop\n          if (!child.completed && !child.backwards && child._currentTime < child.iterationDuration) {\n            render(child, tlIterationDuration, muteCallbacks, 1, tickModes.FORCE);\n          }\n          // Reset their began and completed flags to allow retrigering callbacks on the next iteration\n          child.began = false;\n          child.completed = false;\n        } else {\n          const childDuration = child.duration;\n          const childStartTime = child._offset + child._delay;\n          const childEndTime = childStartTime + childDuration;\n          // Triggers the onComplete callback on reverse for children on the edges of the timeline\n          if (!muteCallbacks && childDuration <= minValue && (!childStartTime || childEndTime === tlIterationDuration)) {\n            child.onComplete(child);\n          }\n        }\n      });\n      if (!muteCallbacks) tl.onLoop(/** @type {CallbackArgument} */(tl));\n    }\n\n    forEachChildren(tl, (/** @type {JSAnimation} */child) => {\n      const childTime = round((tlChildrenTime - child._offset) * child._speed, 12); // Rounding is needed when using seconds\n      const childTickMode = child._fps < tl._fps ? child.requestTick(tlCildrenTickTime) : tickMode;\n      tlChildrenHasRendered += render(child, childTime, muteCallbacks, internalRender, childTickMode);\n      if (!child.completed && tlChildrenHaveCompleted) tlChildrenHaveCompleted = false;\n    }, tlIsRunningBackwards);\n\n    // Renders on timeline are triggered by its children so it needs to be set after rendering the children\n    if (!muteCallbacks && tlChildrenHasRendered) tl.onRender(/** @type {CallbackArgument} */(tl));\n\n    // Triggers the timeline onComplete() once all chindren all completed and the current time has reached the end\n    if (tlChildrenHaveCompleted && tl._currentTime >= tl.duration) {\n      // Make sure the paused flag is false in case it has been skipped in the render function\n      tl.paused = true;\n      if (!tl.completed) {\n        tl.completed = true;\n        if (!muteCallbacks) {\n          tl.onComplete(/** @type {CallbackArgument} */(tl));\n          tl._resolve(/** @type {CallbackArgument} */(tl));\n        }\n      }\n    }\n  }\n};\n\n\n\n\nconst additive = {\n  animation: null,\n  update: noop,\n};\n\n/**\n * @typedef AdditiveAnimation\n * @property {Number} duration\n * @property {Number} _offset\n * @property {Number} _delay\n * @property {Tween} _head\n * @property {Tween} _tail\n */\n\n/**\n * @param  {TweenAdditiveLookups} lookups\n * @return {AdditiveAnimation}\n */\nconst addAdditiveAnimation = lookups => {\n  let animation = additive.animation;\n  if (!animation) {\n    animation = {\n      duration: minValue,\n      computeDeltaTime: noop,\n      _offset: 0,\n      _delay: 0,\n      _head: null,\n      _tail: null,\n    };\n    additive.animation = animation;\n    additive.update = () => {\n      lookups.forEach(propertyAnimation => {\n        for (let propertyName in propertyAnimation) {\n          const tweens = propertyAnimation[propertyName];\n          const lookupTween = tweens._head;\n          if (lookupTween) {\n            const valueType = lookupTween._valueType;\n            const additiveValues = valueType === valueTypes.COMPLEX || valueType === valueTypes.COLOR ? cloneArray(lookupTween._fromNumbers) : null;\n            let additiveValue = lookupTween._fromNumber;\n            let tween = tweens._tail;\n            while (tween && tween !== lookupTween) {\n              if (additiveValues) {\n                for (let i = 0, l = tween._numbers.length; i < l; i++) additiveValues[i] += tween._numbers[i];\n              } else {\n                additiveValue += tween._number;\n              }\n              tween = tween._prevAdd;\n            }\n            lookupTween._toNumber = additiveValue;\n            lookupTween._toNumbers = additiveValues;\n          }\n        }\n      });\n      // TODO: Avoid polymorphism here, idealy the additive animation should be a regular animation with a higher priority in the render loop\n      render(animation, 1, 1, 0, tickModes.FORCE);\n    };\n  }\n  return animation;\n};\n\nconst engineTickMethod = isBrowser ? requestAnimationFrame : setImmediate;\nconst engineCancelMethod = isBrowser ? cancelAnimationFrame : clearImmediate;\n\nclass Engine extends Clock {\n\n  /** @param {Number} [initTime] */\n  constructor(initTime) {\n    super(initTime);\n    this.useDefaultMainLoop = true;\n    this.pauseOnDocumentHidden = true;\n    /** @type {DefaultsParams} */\n    this.defaults = defaults;\n    this.paused = isBrowser && doc.hidden ? true  : false;\n    /** @type {Number|NodeJS.Immediate} */\n    this.reqId = null;\n  }\n\n  update() {\n    const time = this._currentTime = now();\n    if (this.requestTick(time)) {\n      this.computeDeltaTime(time);\n      const engineSpeed = this._speed;\n      const engineFps = this._fps;\n      let activeTickable = /** @type {Tickable} */(this._head);\n      while (activeTickable) {\n        const nextTickable = activeTickable._next;\n        if (!activeTickable.paused) {\n          tick(\n            activeTickable,\n            (time - activeTickable._startTime) * activeTickable._speed * engineSpeed,\n            0, // !muteCallbacks\n            0, // !internalRender\n            activeTickable._fps < engineFps ? activeTickable.requestTick(time) : tickModes.AUTO\n          );\n        } else {\n          removeChild(this, activeTickable);\n          this._hasChildren = !!this._tail;\n          activeTickable._running = false;\n          if (activeTickable.completed && !activeTickable._cancelled) {\n            activeTickable.cancel();\n          }\n        }\n        activeTickable = nextTickable;\n      }\n      additive.update();\n    }\n  }\n\n  wake() {\n    if (this.useDefaultMainLoop && !this.reqId && !this.paused) {\n      this.reqId = engineTickMethod(tickEngine);\n    }\n    return this;\n  }\n\n  pause() {\n    this.paused = true;\n    return killEngine();\n  }\n\n  resume() {\n    if (!this.paused) return;\n    this.paused = false;\n    forEachChildren(this, (/** @type {Tickable} */child) => child.resetTime());\n    return this.wake();\n  }\n\n  // Getter and setter for speed\n  get speed() {\n    return this._speed * (globals.timeScale === 1 ? 1 : K);\n  }\n\n  set speed(playbackRate) {\n    this._speed = playbackRate * globals.timeScale;\n    forEachChildren(this, (/** @type {Tickable} */child) => child.speed = child._speed);\n  }\n\n  // Getter and setter for timeUnit\n  get timeUnit() {\n    return globals.timeScale === 1 ? 'ms' : 's';\n  };\n\n  set timeUnit(unit) {\n    const secondsScale = 0.001;\n    const isSecond = unit === 's';\n    const newScale = isSecond ? secondsScale : 1;\n    if (globals.timeScale !== newScale) {\n      globals.timeScale = newScale;\n      globals.tickThreshold = 200 * newScale;\n      const scaleFactor = isSecond ? secondsScale : K;\n      /** @type {Number} */\n      (this.defaults.duration) *= scaleFactor;\n      this._speed *= scaleFactor;\n    }\n  }\n\n  // Getter and setter for precision\n  get precision() {\n    return globals.precision;\n  }\n\n  set precision(precision) {\n    globals.precision = precision;\n  }\n\n}\nconst engine = /*#__PURE__*/(() => {\n  const engine = new Engine(now());\n  if (isBrowser) {\n    globalVersions.engine = engine;\n    doc.addEventListener('visibilitychange', () => {\n      if (!engine.pauseOnDocumentHidden) return;\n      doc.hidden ? engine.pause() : engine.resume();\n    });\n  }\n  return engine;\n})();\n\n\nconst tickEngine = () => {\n  if (engine._head) {\n    engine.reqId = engineTickMethod(tickEngine);\n    engine.update();\n  } else {\n    engine.reqId = 0;\n  }\n};\n\nconst killEngine = () => {\n  engineCancelMethod(/** @type {NodeJS.Immediate & Number} */(engine.reqId));\n  engine.reqId = 0;\n  return engine;\n};\n\n\n\n\n/**\n * @param  {DOMTarget} target\n * @param  {String} propName\n * @param  {Object} animationInlineStyles\n * @return {String}\n */\nconst parseInlineTransforms = (target, propName, animationInlineStyles) => {\n  const inlineTransforms = target.style.transform;\n  let inlinedStylesPropertyValue;\n  if (inlineTransforms) {\n    const cachedTransforms = target[transformsSymbol];\n    let t; while (t = transformsExecRgx.exec(inlineTransforms)) {\n      const inlinePropertyName = t[1];\n      // const inlinePropertyValue = t[2];\n      const inlinePropertyValue = t[2].slice(1, -1);\n      cachedTransforms[inlinePropertyName] = inlinePropertyValue;\n      if (inlinePropertyName === propName) {\n        inlinedStylesPropertyValue = inlinePropertyValue;\n        // Store the new parsed inline styles if animationInlineStyles is provided\n        if (animationInlineStyles) {\n          animationInlineStyles[propName] = inlinePropertyValue;\n        }\n      }\n    }\n  }\n  return inlineTransforms && !isUnd(inlinedStylesPropertyValue) ? inlinedStylesPropertyValue :\n    stringStartsWith(propName, 'scale') ? '1' :\n    stringStartsWith(propName, 'rotate') || stringStartsWith(propName, 'skew') ? '0deg' : '0px';\n};\n\n\n\n\n/**\n * @param  {DOMTargetsParam|TargetsParam} v\n * @return {NodeList|HTMLCollection}\n */\nfunction getNodeList(v) {\n  const n = isStr(v) ? globals.root.querySelectorAll(v) : v;\n  if (n instanceof NodeList || n instanceof HTMLCollection) return n;\n}\n\n/**\n * @overload\n * @param  {DOMTargetsParam} targets\n * @return {DOMTargetsArray}\n *\n * @overload\n * @param  {JSTargetsParam} targets\n * @return {JSTargetsArray}\n *\n * @overload\n * @param  {TargetsParam} targets\n * @return {TargetsArray}\n *\n * @param  {DOMTargetsParam|JSTargetsParam|TargetsParam} targets\n */\nfunction parseTargets(targets) {\n  if (isNil(targets)) return /** @type {TargetsArray} */([]);\n  if (isArr(targets)) {\n    const flattened = targets.flat(Infinity);\n    /** @type {TargetsArray} */\n    const parsed = [];\n    for (let i = 0, l = flattened.length; i < l; i++) {\n      const item = flattened[i];\n      if (!isNil(item)) {\n        const nodeList = getNodeList(item);\n        if (nodeList) {\n          for (let j = 0, jl = nodeList.length; j < jl; j++) {\n            const subItem = nodeList[j];\n            if (!isNil(subItem)) {\n              let isDuplicate = false;\n              for (let k = 0, kl = parsed.length; k < kl; k++) {\n                if (parsed[k] === subItem) {\n                  isDuplicate = true;\n                  break;\n                }\n              }\n              if (!isDuplicate) {\n                parsed.push(subItem);\n              }\n            }\n          }\n        } else {\n          let isDuplicate = false;\n          for (let j = 0, jl = parsed.length; j < jl; j++) {\n            if (parsed[j] === item) {\n              isDuplicate = true;\n              break;\n            }\n          }\n          if (!isDuplicate) {\n            parsed.push(item);\n          }\n        }\n      }\n    }\n    return parsed;\n  }\n  if (!isBrowser) return /** @type {JSTargetsArray} */([targets]);\n  const nodeList = getNodeList(targets);\n  if (nodeList) return /** @type {DOMTargetsArray} */(Array.from(nodeList));\n  return /** @type {TargetsArray} */([targets]);\n}\n\n/**\n * @overload\n * @param  {DOMTargetsParam} targets\n * @return {DOMTargetsArray}\n *\n * @overload\n * @param  {JSTargetsParam} targets\n * @return {JSTargetsArray}\n *\n * @overload\n * @param  {TargetsParam} targets\n * @return {TargetsArray}\n *\n * @param  {DOMTargetsParam|JSTargetsParam|TargetsParam} targets\n */\nfunction registerTargets(targets) {\n  const parsedTargetsArray = parseTargets(targets);\n  const parsedTargetsLength = parsedTargetsArray.length;\n  if (parsedTargetsLength) {\n    for (let i = 0; i < parsedTargetsLength; i++) {\n      const target = parsedTargetsArray[i];\n      if (!target[isRegisteredTargetSymbol]) {\n        target[isRegisteredTargetSymbol] = true;\n        const isSvgType = isSvg(target);\n        const isDom = /** @type {DOMTarget} */(target).nodeType || isSvgType;\n        if (isDom) {\n          target[isDomSymbol] = true;\n          target[isSvgSymbol] = isSvgType;\n          target[transformsSymbol] = {};\n        }\n      }\n    }\n  }\n  return parsedTargetsArray;\n}\n\n\n\n\n/**\n * @param  {TargetsParam} path\n * @return {SVGGeometryElement|undefined}\n */\nconst getPath = path => {\n  const parsedTargets = parseTargets(path);\n  const $parsedSvg = /** @type {SVGGeometryElement} */(parsedTargets[0]);\n  if (!$parsedSvg || !isSvg($parsedSvg)) return;\n  return $parsedSvg;\n};\n\n/**\n * @param  {TargetsParam} path2\n * @param  {Number} [precision]\n * @return {FunctionValue}\n */\nconst morphTo = (path2, precision = .33) => ($path1) => {\n  const $path2 = /** @type {SVGGeometryElement} */(getPath(path2));\n  if (!$path2) return;\n  const isPath = $path1.tagName === 'path';\n  const separator = isPath ? ' ' : ',';\n  const previousPoints = $path1[morphPointsSymbol];\n  if (previousPoints) $path1.setAttribute(isPath ? 'd' : 'points', previousPoints);\n\n  let v1 = '', v2 = '';\n\n  if (!precision) {\n    v1 = $path1.getAttribute(isPath ? 'd' : 'points');\n    v2 = $path2.getAttribute(isPath ? 'd' : 'points');\n  } else {\n    const length1 = /** @type {SVGGeometryElement} */($path1).getTotalLength();\n    const length2 = $path2.getTotalLength();\n    const maxPoints = Math.max(Math.ceil(length1 * precision), Math.ceil(length2 * precision));\n    for (let i = 0; i < maxPoints; i++) {\n      const t = i / (maxPoints - 1);\n      const pointOnPath1 = /** @type {SVGGeometryElement} */($path1).getPointAtLength(length1 * t);\n      const pointOnPath2 = $path2.getPointAtLength(length2 * t);\n      const prefix = isPath ? (i === 0 ? 'M' : 'L') : '';\n      v1 += prefix + round(pointOnPath1.x, 3) + separator + pointOnPath1.y + ' ';\n      v2 += prefix + round(pointOnPath2.x, 3) + separator + pointOnPath2.y + ' ';\n    }\n  }\n\n  $path1[morphPointsSymbol] = v2;\n\n  return [v1, v2];\n};\n\n/**\n * @param {SVGGeometryElement} $el\n * @param {Number} start\n * @param {Number} end\n * @return {Proxy}\n */\nfunction createDrawableProxy($el, start, end) {\n  const strokeLineCap = getComputedStyle($el).strokeLinecap;\n  const pathLength = K;\n  let currentCap = strokeLineCap;\n  const proxy = new Proxy($el, {\n    get(target, property) {\n      const value = target[property];\n      if (property === proxyTargetSymbol) return target;\n      if (property === 'setAttribute') {\n        /** @param {any[]} args */\n        return (...args) => {\n          if (args[0] === 'draw') {\n            const value = args[1];\n            const values = value.split(' ');\n            const v1 = +values[0];\n            const v2 = +values[1];\n\n            // TOTO: Benchmark if performing two slices is more performant than one split\n\n            // const spaceIndex = value.indexOf(' ');\n            // const v1 = round(+value.slice(0, spaceIndex), precision);\n            // const v2 = round(+value.slice(spaceIndex + 1), precision);\n\n            const os = v1 * -1e3;\n            const d1 = (v2 * pathLength) + os;\n            // Prevents linecap to smear by offsetting the dasharray length by 0.01% when v2 is not at max\n            const d2 = (pathLength + ((v1 === 0 && v2 === 1) || (v1 === 1 && v2 === 0) ? 0 : 10) - d1);\n            // Handle cases where the cap is still visible when the line is completly hidden\n            if (strokeLineCap !== 'butt') {\n              const newCap = v1 === v2 ? 'butt' : strokeLineCap;\n              if (currentCap !== newCap) {\n                target.setAttribute('stroke-linecap', `${newCap}`);\n                currentCap = newCap;\n              }\n            }\n            target.setAttribute('stroke-dashoffset', `${os}`);\n            target.setAttribute('stroke-dasharray', `${d1} ${d2}`);\n          }\n          return Reflect.apply(value, target, args);\n        };\n      }\n      if (isFnc(value)) {\n        /** @param {any[]} args */\n        return (...args) => Reflect.apply(value, target, args);\n      } else {\n        return value;\n      }\n    }\n  });\n  if ($el.getAttribute('pathLength') !== `${pathLength}`) {\n    $el.setAttribute('pathLength', `${pathLength}`);\n    proxy.setAttribute('draw', `${start} ${end}`);\n  }\n  return /** @type {typeof Proxy} */(/** @type {unknown} */(proxy));\n}\n\n/**\n * @param {TargetsParam} selector\n * @param {Number} [start=0]\n * @param {Number} [end=0]\n * @return {Array.<Proxy>}\n */\nconst createDrawable = (selector, start = 0, end = 0) => {\n  const els = /** @type {Array.<Proxy>} */((/** @type {unknown} */(parseTargets(selector))));\n  els.forEach(($el, i) => els[i] = createDrawableProxy(/** @type {SVGGeometryElement} */(/** @type {unknown} */($el)), start, end));\n  return els;\n};\n\n// Motion path animation\n\n/**\n * @param {SVGGeometryElement} $path\n * @param {Number} progress\n * @param {Number}lookup\n * @return {DOMPoint}\n */\nconst getPathPoint = ($path, progress, lookup = 0) => {\n  return $path.getPointAtLength(progress + lookup >= 1 ? progress + lookup : 0);\n};\n\n/**\n * @param {SVGGeometryElement} $path\n * @param {String} pathProperty\n * @return {FunctionValue}\n */\nconst getPathProgess = ($path, pathProperty) => {\n  return $el => {\n    const totalLength = +($path.getTotalLength());\n    const inSvg = $el[isSvgSymbol];\n    const ctm = $path.getCTM();\n    /** @type {TweenObjectValue} */\n    return {\n      from: 0,\n      to: totalLength,\n      /** @type {TweenModifier} */\n      modifier: progress => {\n        if (pathProperty === 'a') {\n          const p0 = getPathPoint($path, progress, -1);\n          const p1 = getPathPoint($path, progress, 1);\n          return atan2(p1.y - p0.y, p1.x - p0.x) * 180 / PI;\n        } else {\n          const p = getPathPoint($path, progress, 0);\n          return pathProperty === 'x' ?\n            inSvg || !ctm ? p.x : p.x * ctm.a + p.y * ctm.c + ctm.e :\n            inSvg || !ctm ? p.y : p.x * ctm.b + p.y * ctm.d + ctm.f\n        }\n      }\n    }\n  }\n};\n\n/**\n * @param {TargetsParam} path\n */\nconst createMotionPath = path => {\n  const $path = getPath(path);\n  if (!$path) return;\n  return {\n    translateX: getPathProgess($path, 'x'),\n    translateY: getPathProgess($path, 'y'),\n    rotate: getPathProgess($path, 'a'),\n  }\n};\n\n// Check for valid SVG attribute\n\nconst cssReservedProperties = ['opacity', 'rotate', 'overflow', 'color'];\n\n/**\n * @param  {Target} el\n * @param  {String} propertyName\n * @return {Boolean}\n */\nconst isValidSVGAttribute = (el, propertyName) => {\n  // Return early and use CSS opacity animation instead (already better default values (opacity: 1 instead of 0)) and rotate should be considered a transform\n  if (cssReservedProperties.includes(propertyName)) return false;\n  if (el.getAttribute(propertyName) || propertyName in el) {\n    if (propertyName === 'scale') { // Scale\n      const elParentNode = /** @type {SVGGeometryElement} */(/** @type {DOMTarget} */(el).parentNode);\n      // Only consider scale as a valid SVG attribute on filter element\n      return elParentNode && elParentNode.tagName === 'filter';\n    }\n    return true;\n  }\n};\n\nconst svg = {\n  morphTo,\n  createMotionPath,\n  createDrawable,\n};\n\n\n\n\n/**\n * RGB / RGBA Color value string -> RGBA values array\n * @param  {String} rgbValue\n * @return {ColorArray}\n */\nconst rgbToRgba = rgbValue => {\n  const rgba = rgbExecRgx.exec(rgbValue) || rgbaExecRgx.exec(rgbValue);\n  const a = !isUnd(rgba[4]) ? +rgba[4] : 1;\n  return [\n    +rgba[1],\n    +rgba[2],\n    +rgba[3],\n    a\n  ]\n};\n\n/**\n * HEX3 / HEX3A / HEX6 / HEX6A Color value string -> RGBA values array\n * @param  {String} hexValue\n * @return {ColorArray}\n */\nconst hexToRgba = hexValue => {\n  const hexLength = hexValue.length;\n  const isShort = hexLength === 4 || hexLength === 5;\n  return [\n    +('0x' + hexValue[1] + hexValue[isShort ? 1 : 2]),\n    +('0x' + hexValue[isShort ? 2 : 3] + hexValue[isShort ? 2 : 4]),\n    +('0x' + hexValue[isShort ? 3 : 5] + hexValue[isShort ? 3 : 6]),\n    ((hexLength === 5 || hexLength === 9) ? +(+('0x' + hexValue[isShort ? 4 : 7] + hexValue[isShort ? 4 : 8]) / 255).toFixed(3) : 1)\n  ]\n};\n\n/**\n * @param  {Number} p\n * @param  {Number} q\n * @param  {Number} t\n * @return {Number}\n */\nconst hue2rgb = (p, q, t) => {\n  if (t < 0) t += 1;\n  if (t > 1) t -= 1;\n  return t < 1 / 6 ? p + (q - p) * 6 * t :\n         t < 1 / 2 ? q :\n         t < 2 / 3 ? p + (q - p) * (2 / 3 - t) * 6 :\n         p;\n};\n\n/**\n * HSL / HSLA Color value string -> RGBA values array\n * @param  {String} hslValue\n * @return {ColorArray}\n */\nconst hslToRgba = hslValue => {\n  const hsla = hslExecRgx.exec(hslValue) || hslaExecRgx.exec(hslValue);\n  const h = +hsla[1] / 360;\n  const s = +hsla[2] / 100;\n  const l = +hsla[3] / 100;\n  const a = !isUnd(hsla[4]) ? +hsla[4] : 1;\n  let r, g, b;\n  if (s === 0) {\n    r = g = b = l;\n  } else {\n    const q = l < .5 ? l * (1 + s) : l + s - l * s;\n    const p = 2 * l - q;\n    r = round(hue2rgb(p, q, h + 1 / 3) * 255, 0);\n    g = round(hue2rgb(p, q, h) * 255, 0);\n    b = round(hue2rgb(p, q, h - 1 / 3) * 255, 0);\n  }\n  return [r, g, b, a];\n};\n\n/**\n * All in one color converter that converts a color string value into an array of RGBA values\n * @param  {String} colorString\n * @return {ColorArray}\n */\nconst convertColorStringValuesToRgbaArray = colorString => {\n  return isRgb(colorString) ? rgbToRgba(colorString) :\n         isHex(colorString) ? hexToRgba(colorString) :\n         isHsl(colorString) ? hslToRgba(colorString) :\n         [0, 0, 0, 1];\n};\n\n\n\n\n/**\n * @template T, D\n * @param {T|undefined} targetValue\n * @param {D} defaultValue\n * @return {T|D}\n */\nconst setValue = (targetValue, defaultValue) => {\n  return isUnd(targetValue) ? defaultValue : targetValue;\n};\n\n/**\n * @param  {TweenPropValue} value\n * @param  {Target} target\n * @param  {Number} index\n * @param  {Number} total\n * @param  {Object} [store]\n * @return {any}\n */\nconst getFunctionValue = (value, target, index, total, store) => {\n  if (isFnc(value)) {\n    const func = () => {\n      const computed = /** @type {Function} */(value)(target, index, total);\n      // Fallback to 0 if the function returns undefined / NaN / null / false / 0\n      return !isNaN(+computed) ? +computed : computed || 0;\n    };\n    if (store) {\n      store.func = func;\n    }\n    return func();\n  } else {\n    return value;\n  }\n};\n\n/**\n * @param  {Target} target\n * @param  {String} prop\n * @return {tweenTypes}\n */\nconst getTweenType = (target, prop) => {\n  return !target[isDomSymbol] ? tweenTypes.OBJECT :\n    // Handle SVG attributes\n    target[isSvgSymbol] && isValidSVGAttribute(target, prop) ? tweenTypes.ATTRIBUTE :\n    // Handle CSS Transform properties differently than CSS to allow individual animations\n    validTransforms.includes(prop) || shortTransforms.get(prop) ? tweenTypes.TRANSFORM :\n    // CSS variables\n    stringStartsWith(prop, '--') ? tweenTypes.CSS_VAR :\n    // All other CSS properties\n    prop in /** @type {DOMTarget} */(target).style ? tweenTypes.CSS :\n    // Handle other DOM Attributes\n    prop in target ? tweenTypes.OBJECT :\n    tweenTypes.ATTRIBUTE;\n};\n\n/**\n * @param  {DOMTarget} target\n * @param  {String} propName\n * @param  {Object} animationInlineStyles\n * @return {String}\n */\nconst getCSSValue = (target, propName, animationInlineStyles) => {\n  const inlineStyles = target.style[propName];\n  if (inlineStyles && animationInlineStyles) {\n    animationInlineStyles[propName] = inlineStyles;\n  }\n  const value = inlineStyles || getComputedStyle(target[proxyTargetSymbol] || target).getPropertyValue(propName);\n  return value === 'auto' ? '0' : value;\n};\n\n/**\n * @param {Target} target\n * @param {String} propName\n * @param {tweenTypes} [tweenType]\n * @param {Object|void} [animationInlineStyles]\n * @return {String|Number}\n */\nconst getOriginalAnimatableValue = (target, propName, tweenType, animationInlineStyles) => {\n  const type = !isUnd(tweenType) ? tweenType : getTweenType(target, propName);\n  return type === tweenTypes.OBJECT ? target[propName] || 0 :\n         type === tweenTypes.ATTRIBUTE ? /** @type {DOMTarget} */(target).getAttribute(propName) :\n         type === tweenTypes.TRANSFORM ? parseInlineTransforms(/** @type {DOMTarget} */(target), propName, animationInlineStyles) :\n         type === tweenTypes.CSS_VAR ? getCSSValue(/** @type {DOMTarget} */(target), propName, animationInlineStyles).trimStart() :\n         getCSSValue(/** @type {DOMTarget} */(target), propName, animationInlineStyles);\n};\n\n/**\n * @param  {Number} x\n * @param  {Number} y\n * @param  {String} operator\n * @return {Number}\n */\nconst getRelativeValue = (x, y, operator) => {\n  return operator === '-' ? x - y :\n         operator === '+' ? x + y :\n         x * y;\n};\n\n/** @return {TweenDecomposedValue} */\nconst createDecomposedValueTargetObject = () => {\n  return {\n    /** @type {valueTypes} */\n    t: valueTypes.NUMBER,\n    n: 0,\n    u: null,\n    o: null,\n    d: null,\n    s: null,\n  }\n};\n\n/**\n * @param  {String|Number} rawValue\n * @param  {TweenDecomposedValue} targetObject\n * @return {TweenDecomposedValue}\n */\nconst decomposeRawValue = (rawValue, targetObject) => {\n  /** @type {valueTypes} */\n  targetObject.t = valueTypes.NUMBER;\n  targetObject.n = 0;\n  targetObject.u = null;\n  targetObject.o = null;\n  targetObject.d = null;\n  targetObject.s = null;\n  if (!rawValue) return targetObject;\n  const num = +rawValue;\n  if (!isNaN(num)) {\n    // It's a number\n    targetObject.n = num;\n    return targetObject;\n  } else {\n    // let str = /** @type {String} */(rawValue).trim();\n    let str = /** @type {String} */(rawValue);\n    // Parsing operators (+=, -=, *=) manually is much faster than using regex here\n    if (str[1] === '=') {\n      targetObject.o = str[0];\n      str = str.slice(2);\n    }\n    // Skip exec regex if the value type is complex or color to avoid long regex backtracking\n    const unitMatch = str.includes(' ') ? false : unitsExecRgx.exec(str);\n    if (unitMatch) {\n      // Has a number and a unit\n      targetObject.t = valueTypes.UNIT;\n      targetObject.n = +unitMatch[1];\n      targetObject.u = unitMatch[2];\n      return targetObject;\n    } else if (targetObject.o) {\n      // Has an operator (+=, -=, *=)\n      targetObject.n = +str;\n      return targetObject;\n    } else if (isCol(str)) {\n      // Is a color\n      targetObject.t = valueTypes.COLOR;\n      targetObject.d = convertColorStringValuesToRgbaArray(str);\n      return targetObject;\n    } else {\n      // Is a more complex string (generally svg coords, calc() or filters CSS values)\n      const matchedNumbers = str.match(digitWithExponentRgx);\n      targetObject.t = valueTypes.COMPLEX;\n      targetObject.d = matchedNumbers ? matchedNumbers.map(Number) : [];\n      targetObject.s = str.split(digitWithExponentRgx) || [];\n      return targetObject;\n    }\n  }\n};\n\n/**\n * @param  {Tween} tween\n * @param  {TweenDecomposedValue} targetObject\n * @return {TweenDecomposedValue}\n */\nconst decomposeTweenValue = (tween, targetObject) => {\n  targetObject.t = tween._valueType;\n  targetObject.n = tween._toNumber;\n  targetObject.u = tween._unit;\n  targetObject.o = null;\n  targetObject.d = cloneArray(tween._toNumbers);\n  targetObject.s = cloneArray(tween._strings);\n  return targetObject;\n};\n\nconst decomposedOriginalValue = createDecomposedValueTargetObject();\n\n\n\n\nconst lookups = {\n  /** @type {TweenReplaceLookups} */\n  _rep: new WeakMap(),\n  /** @type {TweenAdditiveLookups} */\n  _add: new Map(),\n};\n\n/**\n * @param  {Target} target\n * @param  {String} property\n * @param  {String} lookup\n * @return {TweenPropertySiblings}\n */\nconst getTweenSiblings = (target, property, lookup = '_rep') => {\n  const lookupMap = lookups[lookup];\n  let targetLookup = lookupMap.get(target);\n  if (!targetLookup) {\n    targetLookup = {};\n    lookupMap.set(target, targetLookup);\n  }\n  return targetLookup[property] ? targetLookup[property] : targetLookup[property] = {\n    _head: null,\n    _tail: null,\n  }\n};\n\n/**\n * @param  {Tween} p\n * @param  {Tween} c\n * @return {Number|Boolean}\n */\nconst addTweenSortMethod = (p, c) => {\n  return p._isOverridden || p._absoluteStartTime > c._absoluteStartTime;\n};\n\n/**\n * @param {Tween} tween\n */\nconst overrideTween = tween => {\n  tween._isOverlapped = 1;\n  tween._isOverridden = 1;\n  tween._changeDuration = minValue;\n  tween._currentTime = minValue;\n};\n\n/**\n * @param  {Tween} tween\n * @param  {TweenPropertySiblings} siblings\n * @return {Tween}\n */\nconst composeTween = (tween, siblings) => {\n\n  const tweenCompositionType = tween._composition;\n\n  // Handle replaced tweens\n\n  if (tweenCompositionType === compositionTypes.replace) {\n\n    const tweenAbsStartTime = tween._absoluteStartTime;\n\n    addChild(siblings, tween, addTweenSortMethod, '_prevRep', '_nextRep');\n\n    const prevSibling = tween._prevRep;\n\n    // Update the previous siblings for composition replace tweens\n\n    if (prevSibling) {\n\n      const prevParent = prevSibling.parent;\n      const prevAbsEndTime = prevSibling._absoluteStartTime + prevSibling._changeDuration;\n\n      // Handle looped animations tween\n\n      if (\n        // Check if the previous tween is from a different animation\n        tween.parent.id !== prevParent.id &&\n        // Check if the animation has loops\n        prevParent.iterationCount> 1 &&\n        // Check if _absoluteChangeEndTime of last loop overlaps the current tween\n        prevAbsEndTime + (prevParent.duration - prevParent.iterationDuration) > tweenAbsStartTime\n      ) {\n\n        // TODO: Find a way to only override the iterations overlapping with the tween\n        overrideTween(prevSibling);\n\n        let prevPrevSibling = prevSibling._prevRep;\n\n        // If the tween was part of a set of keyframes, override its siblings\n        while (prevPrevSibling && prevPrevSibling.parent.id === prevParent.id) {\n          overrideTween(prevPrevSibling);\n          prevPrevSibling = prevPrevSibling._prevRep;\n        }\n\n      }\n\n      const absoluteUpdateStartTime = tweenAbsStartTime - tween._delay;\n\n      if (prevAbsEndTime > absoluteUpdateStartTime) {\n\n        const prevChangeStartTime = prevSibling._startTime;\n        const prevTLOffset = prevAbsEndTime - (prevChangeStartTime + prevSibling._updateDuration);\n\n        prevSibling._changeDuration = absoluteUpdateStartTime - prevTLOffset - prevChangeStartTime;\n        prevSibling._currentTime = prevSibling._changeDuration;\n        prevSibling._isOverlapped = 1;\n\n        if (prevSibling._changeDuration < minValue) {\n          overrideTween(prevSibling);\n        }\n      }\n\n      // Pause (and cancel) the parent if it only contains overlapped tweens\n\n      let pausePrevParentAnimation = true;\n\n      forEachChildren(prevParent, (/** @type Tween */t) => {\n        if (!t._isOverlapped) pausePrevParentAnimation = false;\n      });\n\n      if (pausePrevParentAnimation) {\n        const prevParentTL = prevParent.parent;\n        if (prevParentTL) {\n          let pausePrevParentTL = true;\n          forEachChildren(prevParentTL, (/** @type JSAnimation */a) => {\n            if (a !== prevParent) {\n              forEachChildren(a, (/** @type Tween */t) => {\n                if (!t._isOverlapped) pausePrevParentTL = false;\n              });\n            }\n          });\n          if (pausePrevParentTL) {\n            prevParentTL.cancel();\n          }\n        } else {\n          prevParent.cancel();\n          // Previously, calling .cancel() on a timeline child would affect the render order of other children\n          // Worked around this by marking it as .completed and using .pause() for safe removal in the engine loop\n          // This is no longer needed since timeline tween composition is now handled separatly\n          // Keeping this here for reference\n          // prevParent.completed = true;\n          // prevParent.pause();\n        }\n      }\n\n    }\n\n    // let nextSibling = tween._nextRep;\n\n    // // All the next siblings are automatically overridden\n\n    // if (nextSibling && nextSibling._absoluteStartTime >= tweenAbsStartTime) {\n    //   while (nextSibling) {\n    //     overrideTween(nextSibling);\n    //     nextSibling = nextSibling._nextRep;\n    //   }\n    // }\n\n    // if (nextSibling && nextSibling._absoluteStartTime < tweenAbsStartTime) {\n    //   while (nextSibling) {\n    //     overrideTween(nextSibling);\n    //     console.log(tween.id, nextSibling.id);\n    //     nextSibling = nextSibling._nextRep;\n    //   }\n    // }\n\n  // Handle additive tweens composition\n\n  } else if (tweenCompositionType === compositionTypes.blend) {\n\n    const additiveTweenSiblings = getTweenSiblings(tween.target, tween.property, '_add');\n    const additiveAnimation = addAdditiveAnimation(lookups._add);\n\n    let lookupTween = additiveTweenSiblings._head;\n\n    if (!lookupTween) {\n      lookupTween = { ...tween };\n      lookupTween._composition = compositionTypes.replace;\n      lookupTween._updateDuration = minValue;\n      lookupTween._startTime = 0;\n      lookupTween._numbers = cloneArray(tween._fromNumbers);\n      lookupTween._number = 0;\n      lookupTween._next = null;\n      lookupTween._prev = null;\n      addChild(additiveTweenSiblings, lookupTween);\n      addChild(additiveAnimation, lookupTween);\n    }\n\n    // Convert the values of TO to FROM and set TO to 0\n\n    const toNumber = tween._toNumber;\n    tween._fromNumber = lookupTween._fromNumber - toNumber;\n    tween._toNumber = 0;\n    tween._numbers = cloneArray(tween._fromNumbers);\n    tween._number = 0;\n    lookupTween._fromNumber = toNumber;\n\n    if (tween._toNumbers) {\n      const toNumbers = cloneArray(tween._toNumbers);\n      if (toNumbers) {\n        toNumbers.forEach((value, i) => {\n          tween._fromNumbers[i] = lookupTween._fromNumbers[i] - value;\n          tween._toNumbers[i] = 0;\n        });\n      }\n      lookupTween._fromNumbers = toNumbers;\n    }\n\n    addChild(additiveTweenSiblings, tween, null, '_prevAdd', '_nextAdd');\n\n  }\n\n  return tween;\n\n};\n\n/**\n * @param  {Tween} tween\n * @return {Tween}\n */\nconst removeTweenSliblings = tween => {\n  const tweenComposition = tween._composition;\n  if (tweenComposition !== compositionTypes.none) {\n    const tweenTarget = tween.target;\n    const tweenProperty = tween.property;\n    const replaceTweensLookup = lookups._rep;\n    const replaceTargetProps = replaceTweensLookup.get(tweenTarget);\n    const tweenReplaceSiblings = replaceTargetProps[tweenProperty];\n    removeChild(tweenReplaceSiblings, tween, '_prevRep', '_nextRep');\n    if (tweenComposition === compositionTypes.blend) {\n      const addTweensLookup = lookups._add;\n      const addTargetProps = addTweensLookup.get(tweenTarget);\n      if (!addTargetProps) return;\n      const additiveTweenSiblings = addTargetProps[tweenProperty];\n      const additiveAnimation = additive.animation;\n      removeChild(additiveTweenSiblings, tween, '_prevAdd', '_nextAdd');\n      // If only one tween is left in the additive lookup, it's the tween lookup\n      const lookupTween = additiveTweenSiblings._head;\n      if (lookupTween && lookupTween === additiveTweenSiblings._tail) {\n        removeChild(additiveTweenSiblings, lookupTween, '_prevAdd', '_nextAdd');\n        removeChild(additiveAnimation, lookupTween);\n        let shouldClean = true;\n        for (let prop in addTargetProps) {\n          if (addTargetProps[prop]._head) {\n            shouldClean = false;\n            break;\n          }\n        }\n        if (shouldClean) {\n          addTweensLookup.delete(tweenTarget);\n        }\n      }\n    }\n  }\n  return tween;\n};\n\n\n\n\n/**\n * @param  {Timer} timer\n * @return {Timer}\n */\nconst resetTimerProperties = timer => {\n  timer.paused = true;\n  timer.began = false;\n  timer.completed = false;\n  return timer;\n};\n\n/**\n * @param  {Timer} timer\n * @return {Timer}\n */\nconst reviveTimer = timer => {\n  if (!timer._cancelled) return timer;\n  if (timer._hasChildren) {\n    forEachChildren(timer, reviveTimer);\n  } else {\n    forEachChildren(timer, (/** @type {Tween} tween*/tween) => {\n      if (tween._composition !== compositionTypes.none) {\n        composeTween(tween, getTweenSiblings(tween.target, tween.property));\n      }\n    });\n  }\n  timer._cancelled = 0;\n  return timer;\n};\n\nlet timerId = 0;\n\n/**\n * Base class used to create Timers, Animations and Timelines\n */\nclass Timer extends Clock {\n  /**\n   * @param {TimerParams} [parameters]\n   * @param {Timeline} [parent]\n   * @param {Number} [parentPosition]\n   */\n  constructor(parameters = {}, parent = null, parentPosition = 0) {\n\n    super(0);\n\n    const {\n      id,\n      delay,\n      duration,\n      reversed,\n      alternate,\n      loop,\n      loopDelay,\n      autoplay,\n      frameRate,\n      playbackRate,\n      onComplete,\n      onLoop,\n      onPause,\n      onBegin,\n      onBeforeUpdate,\n      onUpdate,\n    } = parameters;\n\n    if (globals.scope) globals.scope.revertibles.push(this);\n\n    const timerInitTime = parent ? 0 : engine._elapsedTime;\n    const timerDefaults = parent ? parent.defaults : globals.defaults;\n    const timerDelay = /** @type {Number} */(isFnc(delay) || isUnd(delay) ? timerDefaults.delay : +delay);\n    const timerDuration = isFnc(duration) || isUnd(duration) ? Infinity : +duration;\n    const timerLoop = setValue(loop, timerDefaults.loop);\n    const timerLoopDelay = setValue(loopDelay, timerDefaults.loopDelay);\n    const timerIterationCount = timerLoop === true ||\n                                timerLoop === Infinity ||\n                                /** @type {Number} */(timerLoop) < 0 ? Infinity :\n                                /** @type {Number} */(timerLoop) + 1;\n\n    let offsetPosition = 0;\n\n    if (parent) {\n      offsetPosition = parentPosition;\n    } else {\n      let startTime = now();\n      // Make sure to tick the engine once if suspended to avoid big gaps with the following offsetPosition calculation\n      if (engine.paused) {\n        engine.requestTick(startTime);\n        startTime = engine._elapsedTime;\n      }\n      offsetPosition = startTime - engine._startTime;\n    }\n\n    // Timer's parameters\n    this.id = !isUnd(id) ? id : ++timerId;\n    /** @type {Timeline} */\n    this.parent = parent;\n    // Total duration of the timer\n    this.duration = clampInfinity(((timerDuration + timerLoopDelay) * timerIterationCount) - timerLoopDelay) || minValue;\n    /** @type {Boolean} */\n    this.backwards = false;\n    /** @type {Boolean} */\n    this.paused = true;\n    /** @type {Boolean} */\n    this.began = false;\n    /** @type {Boolean} */\n    this.completed = false;\n    /** @type {Callback<this>} */\n    this.onBegin = onBegin || timerDefaults.onBegin;\n    /** @type {Callback<this>} */\n    this.onBeforeUpdate = onBeforeUpdate || timerDefaults.onBeforeUpdate;\n    /** @type {Callback<this>} */\n    this.onUpdate = onUpdate || timerDefaults.onUpdate;\n    /** @type {Callback<this>} */\n    this.onLoop = onLoop || timerDefaults.onLoop;\n    /** @type {Callback<this>} */\n    this.onPause = onPause || timerDefaults.onPause;\n    /** @type {Callback<this>} */\n    this.onComplete = onComplete || timerDefaults.onComplete;\n    /** @type {Number} */\n    this.iterationDuration = timerDuration; // Duration of one loop\n    /** @type {Number} */\n    this.iterationCount = timerIterationCount; // Number of loops\n    /** @type {Boolean|ScrollObserver} */\n    this._autoplay = parent ? false : setValue(autoplay, timerDefaults.autoplay);\n    /** @type {Number} */\n    this._offset = offsetPosition;\n    /** @type {Number} */\n    this._delay = timerDelay;\n    /** @type {Number} */\n    this._loopDelay = timerLoopDelay;\n    /** @type {Number} */\n    this._iterationTime = 0;\n    /** @type {Number} */\n    this._currentIteration = 0; // Current loop index\n    /** @type {Function} */\n    this._resolve = noop; // Used by .then()\n    /** @type {Boolean} */\n    this._running = false;\n    /** @type {Number} */\n    this._reversed = +setValue(reversed, timerDefaults.reversed);\n    /** @type {Number} */\n    this._reverse = this._reversed;\n    /** @type {Number} */\n    this._cancelled = 0;\n    /** @type {Boolean} */\n    this._alternate = setValue(alternate, timerDefaults.alternate);\n    /** @type {Renderable} */\n    this._prev = null;\n    /** @type {Renderable} */\n    this._next = null;\n\n    // Clock's parameters\n    /** @type {Number} */\n    this._elapsedTime = timerInitTime;\n    /** @type {Number} */\n    this._startTime = timerInitTime;\n    /** @type {Number} */\n    this._lastTime = timerInitTime;\n    /** @type {Number} */\n    this._fps = setValue(frameRate, timerDefaults.frameRate);\n    /** @type {Number} */\n    this._speed = setValue(playbackRate, timerDefaults.playbackRate);\n  }\n\n  get cancelled() {\n    return !!this._cancelled;\n  }\n\n  /** @param {Boolean} cancelled  */\n  set cancelled(cancelled) {\n    cancelled ? this.cancel() : this.reset(1).play();\n  }\n\n  get currentTime() {\n    return clamp(round(this._currentTime, globals.precision), -this._delay, this.duration);\n  }\n\n  /** @param {Number} time  */\n  set currentTime(time) {\n    const paused = this.paused;\n    // Pausing the timer is necessary to avoid time jumps on a running instance\n    this.pause().seek(+time);\n    if (!paused) this.resume();\n  }\n\n  get iterationCurrentTime() {\n    return round(this._iterationTime, globals.precision);\n  }\n\n  /** @param {Number} time  */\n  set iterationCurrentTime(time) {\n    this.currentTime = (this.iterationDuration * this._currentIteration) + time;\n  }\n\n  get progress() {\n    return clamp(round(this._currentTime / this.duration, 5), 0, 1);\n  }\n\n  /** @param {Number} progress  */\n  set progress(progress) {\n    this.currentTime = this.duration * progress;\n  }\n\n  get iterationProgress() {\n    return clamp(round(this._iterationTime / this.iterationDuration, 5), 0, 1);\n  }\n\n  /** @param {Number} progress  */\n  set iterationProgress(progress) {\n    const iterationDuration = this.iterationDuration;\n    this.currentTime = (iterationDuration * this._currentIteration) + (iterationDuration * progress);\n  }\n\n  get currentIteration() {\n    return this._currentIteration;\n  }\n\n  /** @param {Number} iterationCount  */\n  set currentIteration(iterationCount) {\n    this.currentTime = (this.iterationDuration * clamp(+iterationCount, 0, this.iterationCount - 1));\n  }\n\n  get reversed() {\n    return !!this._reversed;\n  }\n\n  /** @param {Boolean} reverse  */\n  set reversed(reverse) {\n    reverse ? this.reverse() : this.play();\n  }\n\n  get speed() {\n    return super.speed;\n  }\n\n  /** @param {Number} playbackRate  */\n  set speed(playbackRate) {\n    super.speed = playbackRate;\n    this.resetTime();\n  }\n\n  /**\n   * @param  {Number} internalRender\n   * @return {this}\n   */\n  reset(internalRender = 0) {\n    // If cancelled, revive the timer before rendering in order to have propertly composed tweens siblings\n    reviveTimer(this);\n    if (this._reversed && !this._reverse) this.reversed = false;\n    // Rendering before updating the completed flag to prevent skips and to make sure the properties are not overridden\n    // Setting the iterationTime at the end to force the rendering to happend backwards, otherwise calling .reset() on Timelines might not render children in the right order\n    // NOTE: This is only required for Timelines and might be better to move to the Timeline class?\n    this._iterationTime = this.iterationDuration;\n    // Set tickMode to tickModes.FORCE to force rendering\n    tick(this, 0, 1, internalRender, tickModes.FORCE);\n    // Reset timer properties after revive / render to make sure the props are not updated again\n    resetTimerProperties(this);\n    // Also reset children properties\n    if (this._hasChildren) {\n      forEachChildren(this, resetTimerProperties);\n    }\n    return this;\n  }\n\n  /**\n   * @param  {Number} internalRender\n   * @return {this}\n   */\n  init(internalRender = 0) {\n    this.fps = this._fps;\n    this.speed = this._speed;\n    // Manually calling .init() on timelines should render all children intial state\n    // Forces all children to render once then render to 0 when reseted\n    if (!internalRender && this._hasChildren) {\n      tick(this, this.duration, 1, internalRender, tickModes.FORCE);\n    }\n    this.reset(internalRender);\n    // Make sure to set autoplay to false to child timers so it doesn't attempt to autoplay / link\n    const autoplay = this._autoplay;\n    if (autoplay === true) {\n      this.resume();\n    } else if (autoplay && !isUnd(/** @type {ScrollObserver} */(autoplay).linked)) {\n      /** @type {ScrollObserver} */(autoplay).link(this);\n    }\n    return this;\n  }\n\n  /** @return {this} */\n  resetTime() {\n    const timeScale = 1 / (this._speed * engine._speed);\n    this._startTime = now() - (this._currentTime + this._delay) * timeScale;\n    return this;\n  }\n\n  /** @return {this} */\n  pause() {\n    if (this.paused) return this;\n    this.paused = true;\n    this.onPause(this);\n    return this;\n  }\n\n  /** @return {this} */\n  resume() {\n    if (!this.paused) return this;\n    this.paused = false;\n    // We can safely imediatly render a timer that has no duration and no children\n    if (this.duration <= minValue && !this._hasChildren) {\n      tick(this, minValue, 0, 0, tickModes.FORCE);\n    } else {\n      if (!this._running) {\n        addChild(engine, this);\n        engine._hasChildren = true;\n        this._running = true;\n      }\n      this.resetTime();\n      // Forces the timer to advance by at least one frame when the next tick occurs\n      this._startTime -= 12;\n      engine.wake();\n    }\n    return this;\n  }\n\n  /** @return {this} */\n  restart() {\n    return this.reset(0).resume();\n  }\n\n  /**\n   * @param  {Number} time\n   * @param  {Boolean|Number} [muteCallbacks]\n   * @param  {Boolean|Number} [internalRender]\n   * @return {this}\n   */\n  seek(time, muteCallbacks = 0, internalRender = 0) {\n    // Recompose the tween siblings in case the timer has been cancelled\n    reviveTimer(this);\n    // If you seek a completed animation, otherwise the next play will starts at 0\n    this.completed = false;\n    const isPaused = this.paused;\n    this.paused = true;\n    // timer, time, muteCallbacks, internalRender, tickMode\n    tick(this, time + this._delay, ~~muteCallbacks, ~~internalRender, tickModes.AUTO);\n    return isPaused ? this : this.resume();\n  }\n\n  /** @return {this} */\n  alternate() {\n    const reversed = this._reversed;\n    const count = this.iterationCount;\n    const duration = this.iterationDuration;\n    // Calculate the maximum iterations possible given the iteration duration\n    const iterations = count === Infinity ? floor(maxValue / duration) : count;\n    this._reversed = +(this._alternate && !(iterations % 2) ? reversed : !reversed);\n    if (count === Infinity) {\n      // Handle infinite loops to loop on themself\n      this.iterationProgress = this._reversed ? 1 - this.iterationProgress : this.iterationProgress;\n    } else {\n      this.seek((duration * iterations) - this._currentTime);\n    }\n    this.resetTime();\n    return this;\n  }\n\n  /** @return {this} */\n  play() {\n    if (this._reversed) this.alternate();\n    return this.resume();\n  }\n\n  /** @return {this} */\n  reverse() {\n    if (!this._reversed) this.alternate();\n    return this.resume();\n  }\n\n  // TODO: Move all the animation / tweens / children related code to Animation / Timeline\n\n  /** @return {this} */\n  cancel() {\n    if (this._hasChildren) {\n      forEachChildren(this, (/** @type {Renderable} */child) => child.cancel(), true);\n    } else {\n      forEachChildren(this, removeTweenSliblings);\n    }\n    this._cancelled = 1;\n    // Pausing the timer removes it from the engine\n    return this.pause();\n  }\n\n  /**\n   * @param  {Number} newDuration\n   * @return {this}\n   */\n  stretch(newDuration) {\n    const currentDuration = this.duration;\n    if (currentDuration === clampZero(newDuration)) return this;\n    const timeScale = newDuration / currentDuration;\n    const isSetter = newDuration <= minValue;\n    this.duration = isSetter ? minValue : clampZero(clampInfinity(round(currentDuration * timeScale, 12)));\n    this.iterationDuration = isSetter ? minValue : clampZero(clampInfinity(round(this.iterationDuration * timeScale, 12)));\n    this._offset *= timeScale;\n    this._delay *= timeScale;\n    this._loopDelay *= timeScale;\n    return this;\n  }\n\n /**\n   * Cancels the timer by seeking it back to 0 and reverting the attached scroller if necessary\n   * @return {this}\n   */\n  revert() {\n    tick(this, 0, 1, 0, tickModes.AUTO);\n    const ap = /** @type {ScrollObserver} */(this._autoplay);\n    if (ap && ap.linked && ap.linked === this) ap.revert();\n    return this.cancel();\n  }\n\n /**\n   * Imediatly completes the timer, cancels it and triggers the onComplete callback\n   * @return {this}\n   */\n  complete() {\n    return this.seek(this.duration).cancel();\n  }\n\n  /**\n   * @param  {Callback<this>} [callback]\n   * @return {Promise}\n   */\n  then(callback = noop) {\n    const then = this.then;\n    const onResolve = () => {\n      // this.then = null prevents infinite recursion if returned by an async function\n      // https://github.com/juliangarnierorg/anime-beta/issues/26\n      this.then = null;\n      callback(this);\n      this.then = then;\n      this._resolve = noop;\n    };\n    return new Promise(r => {\n      this._resolve = () => r(onResolve());\n      // Make sure to resolve imediatly if the timer has already completed\n      if (this.completed) this._resolve();\n      return this;\n    });\n  }\n\n}\n\n\n/**\n * @param {TimerParams} [parameters]\n * @return {Timer}\n */\nconst createTimer = parameters => new Timer(parameters, null, 0).init();\n\n\n\n\n/** @type {EasingFunction} */\nconst none = t => t;\n\n// Cubic Bezier solver adapted from https://github.com/gre/bezier-ease \u00A9 Ga\u00EBtan Renaudeau\n\n/**\n * @param  {Number} aT\n * @param  {Number} aA1\n * @param  {Number} aA2\n * @return {Number}\n */\nconst calcBezier = (aT, aA1, aA2) => (((1 - 3 * aA2 + 3 * aA1) * aT + (3 * aA2 - 6 * aA1)) * aT + (3 * aA1)) * aT;\n\n/**\n * @param  {Number} aX\n * @param  {Number} mX1\n * @param  {Number} mX2\n * @return {Number}\n */\nconst binarySubdivide = (aX, mX1, mX2) => {\n  let aA = 0, aB = 1, currentX, currentT, i = 0;\n  do {\n    currentT = aA + (aB - aA) / 2;\n    currentX = calcBezier(currentT, mX1, mX2) - aX;\n    if (currentX > 0) {\n      aB = currentT;\n    } else {\n      aA = currentT;\n    }\n  } while (abs(currentX) > .0000001 && ++i < 100);\n  return currentT;\n};\n\n/**\n * @param  {Number} [mX1]\n * @param  {Number} [mY1]\n * @param  {Number} [mX2]\n * @param  {Number} [mY2]\n * @return {EasingFunction}\n */\n\nconst cubicBezier = (mX1 = 0.5, mY1 = 0.0, mX2 = 0.5, mY2 = 1.0) => (mX1 === mY1 && mX2 === mY2) ? none :\n  t => t === 0 || t === 1 ? t :\n  calcBezier(binarySubdivide(t, mX1, mX2), mY1, mY2);\n\n/**\n * Steps ease implementation https://developer.mozilla.org/fr/docs/Web/CSS/transition-timing-function\n * Only covers 'end' and 'start' jumpterms\n * @param  {Number} steps\n * @param  {Boolean} [fromStart]\n * @return {EasingFunction}\n */\nconst steps = (steps = 10, fromStart) => {\n  const roundMethod = fromStart ? ceil : floor;\n  return t => roundMethod(clamp(t, 0, 1) * steps) * (1 / steps);\n};\n\n/**\n * Without parameters, the linear function creates a non-eased transition.\n * Parameters, if used, creates a piecewise linear easing by interpolating linearly between the specified points.\n * @param  {...String|Number} [args] - Points\n * @return {EasingFunction}\n */\nconst linear = (...args) => {\n  const argsLength = args.length;\n  if (!argsLength) return none;\n  const totalPoints = argsLength - 1;\n  const firstArg = args[0];\n  const lastArg = args[totalPoints];\n  const xPoints = [0];\n  const yPoints = [parseNumber(firstArg)];\n  for (let i = 1; i < totalPoints; i++) {\n    const arg = args[i];\n    const splitValue = isStr(arg) ?\n    /** @type {String} */(arg).trim().split(' ') :\n    [arg];\n    const value = splitValue[0];\n    const percent = splitValue[1];\n    xPoints.push(!isUnd(percent) ? parseNumber(percent) / 100 : i / totalPoints);\n    yPoints.push(parseNumber(value));\n  }\n  yPoints.push(parseNumber(lastArg));\n  xPoints.push(1);\n  return function easeLinear(t) {\n    for (let i = 1, l = xPoints.length; i < l; i++) {\n      const currentX = xPoints[i];\n      if (t <= currentX) {\n        const prevX = xPoints[i - 1];\n        const prevY = yPoints[i - 1];\n        return prevY + (yPoints[i] - prevY) * (t - prevX) / (currentX - prevX);\n      }\n    }\n    return yPoints[yPoints.length - 1];\n  }\n};\n\n/**\n * Generate random steps\n * @param  {Number} [length] - The number of steps\n * @param  {Number} [randomness] - How strong the randomness is\n * @return {EasingFunction}\n */\nconst irregular = (length = 10, randomness = 1) => {\n  const values = [0];\n  const total = length - 1;\n  for (let i = 1; i < total; i++) {\n    const previousValue = values[i - 1];\n    const spacing = i / total;\n    const segmentEnd = (i + 1) / total;\n    const randomVariation = spacing + (segmentEnd - spacing) * Math.random();\n    // Mix the even spacing and random variation based on the randomness parameter\n    const randomValue = spacing * (1 - randomness) + randomVariation * randomness;\n    values.push(clamp(randomValue, previousValue, 1));\n  }\n  values.push(1);\n  return linear(...values);\n};\n\n// Easing functions adapted from http://www.robertpenner.com/ease \u00A9 Robert Penner\n\n/**\n * @callback PowerEasing\n * @param {Number|String} [power=1.675]\n * @return {EasingFunction}\n */\n\n/**\n * @callback BackEasing\n * @param {Number|String} [overshoot=1.70158]\n * @return {EasingFunction}\n */\n\n/**\n * @callback ElasticEasing\n * @param {Number|String} [amplitude=1]\n * @param {Number|String} [period=.3]\n * @return {EasingFunction}\n */\n\n/**\n * @callback EaseFactory\n * @param {Number|String} [paramA]\n * @param {Number|String} [paramB]\n * @return {EasingFunction|Number}\n */\n\n/** @typedef {PowerEasing|BackEasing|ElasticEasing} EasesFactory */\n\nconst halfPI = PI / 2;\nconst doublePI = PI * 2;\n/** @type {PowerEasing} */\nconst easeInPower = (p = 1.68) => t => pow(t, +p);\n\n/** @type {Record<String, EasesFactory|EasingFunction>} */\nconst easeInFunctions = {\n  [emptyString]: easeInPower,\n  Quad: easeInPower(2),\n  Cubic: easeInPower(3),\n  Quart: easeInPower(4),\n  Quint: easeInPower(5),\n  /** @type {EasingFunction} */\n  Sine: t => 1 - cos(t * halfPI),\n  /** @type {EasingFunction} */\n  Circ: t => 1 - sqrt(1 - t * t),\n  /** @type {EasingFunction} */\n  Expo: t => t ? pow(2, 10 * t - 10) : 0,\n  /** @type {EasingFunction} */\n  Bounce: t => {\n    let pow2, b = 4;\n    while (t < ((pow2 = pow(2, --b)) - 1) / 11);\n    return 1 / pow(4, 3 - b) - 7.5625 * pow((pow2 * 3 - 2) / 22 - t, 2);\n  },\n  /** @type {BackEasing} */\n  Back: (overshoot = 1.70158) => t => (+overshoot + 1) * t * t * t - +overshoot * t * t,\n  /** @type {ElasticEasing} */\n  Elastic: (amplitude = 1, period = .3) => {\n    const a = clamp(+amplitude, 1, 10);\n    const p = clamp(+period, minValue, 2);\n    const s = (p / doublePI) * asin(1 / a);\n    const e = doublePI / p;\n    return t => t === 0 || t === 1 ? t : -a * pow(2, -10 * (1 - t)) * sin(((1 - t) - s) * e);\n  }\n};\n\n/**\n * @callback EaseType\n * @param {EasingFunction} Ease\n * @return {EasingFunction}\n */\n\n/** @type {Record<String, EaseType>} */\nconst easeTypes = {\n  in: easeIn => t => easeIn(t),\n  out: easeIn => t => 1 - easeIn(1 - t),\n  inOut: easeIn => t => t < .5 ? easeIn(t * 2) / 2 : 1 - easeIn(t * -2 + 2) / 2,\n  outIn: easeIn => t => t < .5 ? (1 - easeIn(1 - t * 2)) / 2 : (easeIn(t * 2 - 1) + 1) / 2,\n};\n\n/**\n * @param  {String} string\n * @param  {Record<String, EasesFactory|EasingFunction>} easesFunctions\n * @param  {Object} easesLookups\n * @return {EasingFunction}\n */\nconst parseEaseString = (string, easesFunctions, easesLookups) => {\n  if (easesLookups[string]) return easesLookups[string];\n  if (string.indexOf('(') <= -1) {\n    const hasParams = easeTypes[string] || string.includes('Back') || string.includes('Elastic');\n    const parsedFn = /** @type {EasingFunction} */(hasParams ? /** @type {EasesFactory} */(easesFunctions[string])() : easesFunctions[string]);\n    return parsedFn ? easesLookups[string] = parsedFn : none;\n  } else {\n    const split = string.slice(0, -1).split('(');\n    const parsedFn = /** @type {EasesFactory} */(easesFunctions[split[0]]);\n    return parsedFn ? easesLookups[string] = parsedFn(...split[1].split(',')) : none;\n  }\n};\n\n/**\n * @typedef  {Object} EasesFunctions\n * @property {typeof linear} linear\n * @property {typeof irregular} irregular\n * @property {typeof steps} steps\n * @property {typeof cubicBezier} cubicBezier\n * @property {PowerEasing} in\n * @property {PowerEasing} out\n * @property {PowerEasing} inOut\n * @property {PowerEasing} outIn\n * @property {EasingFunction} inQuad\n * @property {EasingFunction} outQuad\n * @property {EasingFunction} inOutQuad\n * @property {EasingFunction} outInQuad\n * @property {EasingFunction} inCubic\n * @property {EasingFunction} outCubic\n * @property {EasingFunction} inOutCubic\n * @property {EasingFunction} outInCubic\n * @property {EasingFunction} inQuart\n * @property {EasingFunction} outQuart\n * @property {EasingFunction} inOutQuart\n * @property {EasingFunction} outInQuart\n * @property {EasingFunction} inQuint\n * @property {EasingFunction} outQuint\n * @property {EasingFunction} inOutQuint\n * @property {EasingFunction} outInQuint\n * @property {EasingFunction} inSine\n * @property {EasingFunction} outSine\n * @property {EasingFunction} inOutSine\n * @property {EasingFunction} outInSine\n * @property {EasingFunction} inCirc\n * @property {EasingFunction} outCirc\n * @property {EasingFunction} inOutCirc\n * @property {EasingFunction} outInCirc\n * @property {EasingFunction} inExpo\n * @property {EasingFunction} outExpo\n * @property {EasingFunction} inOutExpo\n * @property {EasingFunction} outInExpo\n * @property {EasingFunction} inBounce\n * @property {EasingFunction} outBounce\n * @property {EasingFunction} inOutBounce\n * @property {EasingFunction} outInBounce\n * @property {BackEasing} inBack\n * @property {BackEasing} outBack\n * @property {BackEasing} inOutBack\n * @property {BackEasing} outInBack\n * @property {ElasticEasing} inElastic\n * @property {ElasticEasing} outElastic\n * @property {ElasticEasing} inOutElastic\n * @property {ElasticEasing} outInElastic\n */\n\nconst eases = (/*#__PURE__*/ (() => {\n  const list = { linear, irregular, steps, cubicBezier };\n  for (let type in easeTypes) {\n    for (let name in easeInFunctions) {\n      const easeIn = easeInFunctions[name];\n      const easeType = easeTypes[type];\n      list[type + name] = /** @type {EasesFactory|EasingFunction} */(\n        name === emptyString || name === 'Back' || name === 'Elastic' ?\n        (a, b) => easeType(/** @type {EasesFactory} */(easeIn)(a, b)) :\n        easeType(/** @type {EasingFunction} */(easeIn))\n      );\n    }\n  }\n  return /** @type {EasesFunctions} */(list);\n})());\n\n/** @type {Record<String, EasingFunction>} */\nconst JSEasesLookups = { linear: none };\n\n/**\n * @param  {EasingParam} ease\n * @return {EasingFunction}\n */\nconst parseEasings = ease => isFnc(ease) ? ease :\n  isStr(ease) ? parseEaseString(/** @type {String} */(ease), eases, JSEasesLookups) :\n  none;\n\n\n\n\nconst propertyNamesCache = {};\n\n/**\n * @param  {String} propertyName\n * @param  {Target} target\n * @param  {tweenTypes} tweenType\n * @return {String}\n */\nconst sanitizePropertyName = (propertyName, target, tweenType) => {\n  if (tweenType === tweenTypes.TRANSFORM) {\n    const t = shortTransforms.get(propertyName);\n    return t ? t : propertyName;\n  } else if (\n    tweenType === tweenTypes.CSS ||\n    // Handle special cases where properties like \"strokeDashoffset\" needs to be set as \"stroke-dashoffset\"\n    // but properties like \"baseFrequency\" should stay in lowerCamelCase\n    (tweenType === tweenTypes.ATTRIBUTE && (isSvg(target) && propertyName in /** @type {DOMTarget} */(target).style))\n  ) {\n    const cachedPropertyName = propertyNamesCache[propertyName];\n    if (cachedPropertyName) {\n      return cachedPropertyName;\n    } else {\n      const lowerCaseName = propertyName ? toLowerCase(propertyName) : propertyName;\n      propertyNamesCache[propertyName] = lowerCaseName;\n      return lowerCaseName;\n    }\n  } else {\n    return propertyName;\n  }\n};\n\n\n\n\nconst angleUnitsMap = { 'deg': 1, 'rad': 180 / PI, 'turn': 360 };\nconst convertedValuesCache = {};\n\n/**\n * @param  {DOMTarget} el\n * @param  {TweenDecomposedValue} decomposedValue\n * @param  {String} unit\n * @param  {Boolean} [force]\n * @return {TweenDecomposedValue}\n */\nconst convertValueUnit = (el, decomposedValue, unit, force = false) => {\n  const currentUnit = decomposedValue.u;\n  const currentNumber = decomposedValue.n;\n  if (decomposedValue.t === valueTypes.UNIT && currentUnit === unit) { // TODO: Check if checking against the same unit string is necessary\n    return decomposedValue;\n  }\n  const cachedKey = currentNumber + currentUnit + unit;\n  const cached = convertedValuesCache[cachedKey];\n  if (!isUnd(cached) && !force) {\n    decomposedValue.n = cached;\n  } else {\n    let convertedValue;\n    if (currentUnit in angleUnitsMap) {\n      convertedValue = currentNumber * angleUnitsMap[currentUnit] / angleUnitsMap[unit];\n    } else {\n      const baseline = 100;\n      const tempEl = /** @type {DOMTarget} */(el.cloneNode());\n      const parentNode = el.parentNode;\n      const parentEl = (parentNode && (parentNode !== doc)) ? parentNode : doc.body;\n      parentEl.appendChild(tempEl);\n      const elStyle = tempEl.style;\n      elStyle.width = baseline + currentUnit;\n      const currentUnitWidth = /** @type {HTMLElement} */(tempEl).offsetWidth || baseline;\n      elStyle.width = baseline + unit;\n      const newUnitWidth = /** @type {HTMLElement} */(tempEl).offsetWidth || baseline;\n      const factor = currentUnitWidth / newUnitWidth;\n      parentEl.removeChild(tempEl);\n      convertedValue = factor * currentNumber;\n    }\n    decomposedValue.n = convertedValue;\n    convertedValuesCache[cachedKey] = convertedValue;\n  }\n  decomposedValue.t === valueTypes.UNIT;\n  decomposedValue.u = unit;\n  return decomposedValue;\n};\n\n\n\n\n/**\n * @template {Renderable} T\n * @param {T} renderable\n * @return {T}\n */\nconst cleanInlineStyles = renderable => {\n  // Allow cleanInlineStyles() to be called on timelines\n  if (renderable._hasChildren) {\n    forEachChildren(renderable, cleanInlineStyles, true);\n  } else {\n    const animation = /** @type {JSAnimation} */(renderable);\n    animation.pause();\n    forEachChildren(animation, (/** @type {Tween} */tween) => {\n      const tweenProperty = tween.property;\n      const tweenTarget = tween.target;\n      if (tweenTarget[isDomSymbol]) {\n        const targetStyle = /** @type {DOMTarget} */(tweenTarget).style;\n        const originalInlinedValue = animation._inlineStyles[tweenProperty];\n        if (tween._tweenType === tweenTypes.TRANSFORM) {\n          const cachedTransforms = tweenTarget[transformsSymbol];\n          if (isUnd(originalInlinedValue) || originalInlinedValue === emptyString) {\n            delete cachedTransforms[tweenProperty];\n          } else {\n            cachedTransforms[tweenProperty] = originalInlinedValue;\n          }\n          if (tween._renderTransforms) {\n            if (!Object.keys(cachedTransforms).length) {\n              targetStyle.removeProperty('transform');\n            } else {\n              let str = emptyString;\n              for (let key in cachedTransforms) {\n                str += transformsFragmentStrings[key] + cachedTransforms[key] + ') ';\n              }\n              targetStyle.transform = str;\n            }\n          }\n        } else {\n          if (isUnd(originalInlinedValue) || originalInlinedValue === emptyString) {\n            targetStyle.removeProperty(tweenProperty);\n          } else {\n            targetStyle[tweenProperty] = originalInlinedValue;\n          }\n        }\n        if (animation._tail === tween) {\n          animation.targets.forEach(t => {\n            if (t.getAttribute && t.getAttribute('style') === emptyString) {\n              t.removeAttribute('style');\n            }          });\n        }\n      }\n    });\n  }\n  return renderable;\n};\n\n// Defines decomposed values target objects only once and mutate their properties later to avoid GC\n// TODO: Maybe move the objects creation to values.js and use the decompose function to create the base object\nconst fromTargetObject = createDecomposedValueTargetObject();\nconst toTargetObject = createDecomposedValueTargetObject();\nconst toFunctionStore = { func: null };\nconst keyframesTargetArray = [null];\nconst fastSetValuesArray = [null, null];\n/** @type {TweenKeyValue} */\nconst keyObjectTarget = { to: null };\n\nlet tweenId = 0;\nlet keyframes;\n/** @type {TweenParamsOptions & TweenValues} */\nlet key;\n\n/**\n * @param {DurationKeyframes | PercentageKeyframes} keyframes\n * @param {AnimationParams} parameters\n * @return {AnimationParams}\n */\nconst generateKeyframes = (keyframes, parameters) => {\n  /** @type {AnimationParams} */\n  const properties = {};\n  if (isArr(keyframes)) {\n    const propertyNames = [].concat(.../** @type {DurationKeyframes} */(keyframes).map(key => Object.keys(key))).filter(isKey);\n    for (let i = 0, l = propertyNames.length; i < l; i++) {\n      const propName = propertyNames[i];\n      const propArray = /** @type {DurationKeyframes} */(keyframes).map(key => {\n        /** @type {TweenKeyValue} */\n        const newKey = {};\n        for (let p in key) {\n          const keyValue = /** @type {TweenPropValue} */(key[p]);\n          if (isKey(p)) {\n            if (p === propName) {\n              newKey.to = keyValue;\n            }\n          } else {\n            newKey[p] = keyValue;\n          }\n        }\n        return newKey;\n      });\n      properties[propName] = /** @type {ArraySyntaxValue} */(propArray);\n    }\n\n  } else {\n    const totalDuration = /** @type {Number} */(setValue(parameters.duration, globals.defaults.duration));\n    const keys = Object.keys(keyframes)\n    .map(key => { return {o: parseFloat(key) / 100, p: keyframes[key]} })\n    .sort((a, b) => a.o - b.o);\n    keys.forEach(key => {\n      const offset = key.o;\n      const prop = key.p;\n      for (let name in prop) {\n        if (isKey(name)) {\n          let propArray = /** @type {Array} */(properties[name]);\n          if (!propArray) propArray = properties[name] = [];\n          const duration = offset * totalDuration;\n          let length = propArray.length;\n          let prevKey = propArray[length - 1];\n          const keyObj = { to: prop[name] };\n          let durProgress = 0;\n          for (let i = 0; i < length; i++) {\n            durProgress += propArray[i].duration;\n          }\n          if (length === 1) {\n            keyObj.from = prevKey.to;\n          }\n          if (prop.ease) {\n            keyObj.ease = prop.ease;\n          }\n          keyObj.duration = duration - (length ? durProgress : 0);\n          propArray.push(keyObj);\n        }\n      }\n      return key;\n    });\n\n    for (let name in properties) {\n      const propArray = /** @type {Array} */(properties[name]);\n      let prevEase;\n      // let durProgress = 0\n      for (let i = 0, l = propArray.length; i < l; i++) {\n        const prop = propArray[i];\n        // Emulate WAPPI easing parameter position\n        const currentEase = prop.ease;\n        prop.ease = prevEase ? prevEase : undefined;\n        prevEase = currentEase;\n        // durProgress += prop.duration;\n        // if (i === l - 1 && durProgress !== totalDuration) {\n        //   propArray.push({ from: prop.to, ease: prop.ease, duration: totalDuration - durProgress })\n        // }\n      }\n      if (!propArray[0].duration) {\n        propArray.shift();\n      }\n    }\n\n  }\n\n  return properties;\n};\n\nclass JSAnimation extends Timer {\n  /**\n   * @param {TargetsParam} targets\n   * @param {AnimationParams} parameters\n   * @param {Timeline} [parent]\n   * @param {Number} [parentPosition]\n   * @param {Boolean} [fastSet=false]\n   * @param {Number} [index=0]\n   * @param {Number} [length=0]\n   */\n  constructor(\n    targets,\n    parameters,\n    parent,\n    parentPosition,\n    fastSet = false,\n    index = 0,\n    length = 0\n  ) {\n\n    super(/** @type {TimerParams&AnimationParams} */(parameters), parent, parentPosition);\n\n    const parsedTargets = registerTargets(targets);\n    const targetsLength = parsedTargets.length;\n\n    // If the parameters object contains a \"keyframes\" property, convert all the keyframes values to regular properties\n\n    const kfParams = /** @type {AnimationParams} */(parameters).keyframes;\n    const params = /** @type {AnimationParams} */(kfParams ? mergeObjects(generateKeyframes(/** @type {DurationKeyframes} */(kfParams), parameters), parameters) : parameters);\n\n    const {\n      delay,\n      duration,\n      ease,\n      playbackEase,\n      modifier,\n      composition,\n      onRender,\n    } = params;\n\n    const animDefaults = parent ? parent.defaults : globals.defaults;\n    const animaPlaybackEase = setValue(playbackEase, animDefaults.playbackEase);\n    const animEase = animaPlaybackEase ? parseEasings(animaPlaybackEase) : null;\n    const hasSpring = !isUnd(ease) && !isUnd(/** @type {Spring} */(ease).ease);\n    const tEasing = hasSpring ? /** @type {Spring} */(ease).ease : setValue(ease, animEase ? 'linear' : animDefaults.ease);\n    const tDuration = hasSpring ? /** @type {Spring} */(ease).duration : setValue(duration, animDefaults.duration);\n    const tDelay = setValue(delay, animDefaults.delay);\n    const tModifier = modifier || animDefaults.modifier;\n    // If no composition is defined and the targets length is high (>= 1000) set the composition to 'none' (0) for faster tween creation\n    const tComposition = isUnd(composition) && targetsLength >= K ? compositionTypes.none : !isUnd(composition) ? composition : animDefaults.composition;\n    // TODO: Do not create an empty object until we know the animation will generate inline styles\n    const animInlineStyles = {};\n    // const absoluteOffsetTime = this._offset;\n    const absoluteOffsetTime = this._offset + (parent ? parent._offset : 0);\n\n    let iterationDuration = NaN;\n    let iterationDelay = NaN;\n    let animationAnimationLength = 0;\n    let shouldTriggerRender = 0;\n\n    for (let targetIndex = 0; targetIndex < targetsLength; targetIndex++) {\n\n      const target = parsedTargets[targetIndex];\n      const ti = index || targetIndex;\n      const tl = length || targetsLength;\n\n      let lastTransformGroupIndex = NaN;\n      let lastTransformGroupLength = NaN;\n\n      for (let p in params) {\n\n        if (isKey(p)) {\n\n          const tweenType = getTweenType(target, p);\n\n          const propName = sanitizePropertyName(p, target, tweenType);\n\n          let propValue = params[p];\n\n          const isPropValueArray = isArr(propValue);\n\n          if (fastSet && !isPropValueArray) {\n            fastSetValuesArray[0] = propValue;\n            fastSetValuesArray[1] = propValue;\n            propValue = fastSetValuesArray;\n          }\n\n          // TODO: Allow nested keyframes inside ObjectValue value (prop: { to: [.5, 1, .75, 2, 3] })\n          // Normalize property values to valid keyframe syntax:\n          // [x, y] to [{to: [x, y]}] or {to: x} to [{to: x}] or keep keys syntax [{}, {}, {}...]\n          // const keyframes = isArr(propValue) ? propValue.length === 2 && !isObj(propValue[0]) ? [{ to: propValue }] : propValue : [propValue];\n          if (isPropValueArray) {\n            const arrayLength = /** @type {Array} */(propValue).length;\n            const isNotObjectValue = !isObj(propValue[0]);\n            // Convert [x, y] to [{to: [x, y]}]\n            if (arrayLength === 2 && isNotObjectValue) {\n              keyObjectTarget.to = /** @type {TweenParamValue} */(/** @type {unknown} */(propValue));\n              keyframesTargetArray[0] = keyObjectTarget;\n              keyframes = keyframesTargetArray;\n            // Convert [x, y, z] to [[x, y], z]\n            } else if (arrayLength > 2 && isNotObjectValue) {\n              keyframes = [];\n              /** @type {Array.<Number>} */(propValue).forEach((v, i) => {\n                if (!i) {\n                  fastSetValuesArray[0] = v;\n                } else if (i === 1) {\n                  fastSetValuesArray[1] = v;\n                  keyframes.push(fastSetValuesArray);\n                } else {\n                  keyframes.push(v);\n                }\n              });\n            } else {\n              keyframes = /** @type {Array.<TweenKeyValue>} */(propValue);\n            }\n          } else {\n            keyframesTargetArray[0] = propValue;\n            keyframes = keyframesTargetArray;\n          }\n\n          let siblings = null;\n          let prevTween = null;\n          let firstTweenChangeStartTime = NaN;\n          let lastTweenChangeEndTime = 0;\n          let tweenIndex = 0;\n\n          for (let l = keyframes.length; tweenIndex < l; tweenIndex++) {\n\n            const keyframe = keyframes[tweenIndex];\n\n            if (isObj(keyframe)) {\n              key = keyframe;\n            } else {\n              keyObjectTarget.to = /** @type {TweenParamValue} */(keyframe);\n              key = keyObjectTarget;\n            }\n\n            toFunctionStore.func = null;\n\n            const computedToValue = getFunctionValue(key.to, target, ti, tl, toFunctionStore);\n\n            let tweenToValue;\n            // Allows function based values to return an object syntax value ({to: v})\n            if (isObj(computedToValue) && !isUnd(computedToValue.to)) {\n              key = computedToValue;\n              tweenToValue = computedToValue.to;\n            } else {\n              tweenToValue = computedToValue;\n            }\n            const tweenFromValue = getFunctionValue(key.from, target, ti, tl);\n            const keyEasing = key.ease;\n            const hasSpring = !isUnd(keyEasing) && !isUnd(/** @type {Spring} */(keyEasing).ease);\n            // Easing are treated differently and don't accept function based value to prevent having to pass a function wrapper that returns an other function all the time\n            const tweenEasing = hasSpring ? /** @type {Spring} */(keyEasing).ease : keyEasing || tEasing;\n            // Calculate default individual keyframe duration by dividing the tl of keyframes\n            const tweenDuration = hasSpring ? /** @type {Spring} */(keyEasing).duration : getFunctionValue(setValue(key.duration, (l > 1 ? getFunctionValue(tDuration, target, ti, tl) / l : tDuration)), target, ti, tl);\n            // Default delay value should only be applied to the first tween\n            const tweenDelay = getFunctionValue(setValue(key.delay, (!tweenIndex ? tDelay : 0)), target, ti, tl);\n            const computedComposition = getFunctionValue(setValue(key.composition, tComposition), target, ti, tl);\n            const tweenComposition = isNum(computedComposition) ? computedComposition : compositionTypes[computedComposition];\n            // Modifiers are treated differently and don't accept function based value to prevent having to pass a function wrapper\n            const tweenModifier = key.modifier || tModifier;\n            const hasFromvalue = !isUnd(tweenFromValue);\n            const hasToValue = !isUnd(tweenToValue);\n            const isFromToArray = isArr(tweenToValue);\n            const isFromToValue = isFromToArray || (hasFromvalue && hasToValue);\n            const tweenStartTime = prevTween ? lastTweenChangeEndTime + tweenDelay : tweenDelay;\n            const absoluteStartTime = absoluteOffsetTime + tweenStartTime;\n\n            // Force a onRender callback if the animation contains at least one from value and autoplay is set to false\n            if (!shouldTriggerRender && (hasFromvalue || isFromToArray)) shouldTriggerRender = 1;\n\n            let prevSibling = prevTween;\n\n            if (tweenComposition !== compositionTypes.none) {\n              if (!siblings) siblings = getTweenSiblings(target, propName);\n              let nextSibling = siblings._head;\n              // Iterate trough all the next siblings until we find a sibling with an equal or inferior start time\n              while (nextSibling && !nextSibling._isOverridden && nextSibling._absoluteStartTime <= absoluteStartTime) {\n                prevSibling = nextSibling;\n                nextSibling = nextSibling._nextRep;\n                // Overrides all the next siblings if the next sibling starts at the same time of after as the new tween start time\n                if (nextSibling && nextSibling._absoluteStartTime >= absoluteStartTime) {\n                  while (nextSibling) {\n                    overrideTween(nextSibling);\n                    // This will ends both the current while loop and the upper one once all the next sibllings have been overriden\n                    nextSibling = nextSibling._nextRep;\n                  }\n                }\n              }\n            }\n\n            // Decompose values\n            if (isFromToValue) {\n              decomposeRawValue(isFromToArray ? getFunctionValue(tweenToValue[0], target, ti, tl) : tweenFromValue, fromTargetObject);\n              decomposeRawValue(isFromToArray ? getFunctionValue(tweenToValue[1], target, ti, tl, toFunctionStore) : tweenToValue, toTargetObject);\n              if (fromTargetObject.t === valueTypes.NUMBER) {\n                if (prevSibling) {\n                  if (prevSibling._valueType === valueTypes.UNIT) {\n                    fromTargetObject.t = valueTypes.UNIT;\n                    fromTargetObject.u = prevSibling._unit;\n                  }\n                } else {\n                  decomposeRawValue(\n                    getOriginalAnimatableValue(target, propName, tweenType, animInlineStyles),\n                    decomposedOriginalValue\n                  );\n                  if (decomposedOriginalValue.t === valueTypes.UNIT) {\n                    fromTargetObject.t = valueTypes.UNIT;\n                    fromTargetObject.u = decomposedOriginalValue.u;\n                  }\n                }\n              }\n            } else {\n              if (hasToValue) {\n                decomposeRawValue(tweenToValue, toTargetObject);\n              } else {\n                if (prevTween) {\n                  decomposeTweenValue(prevTween, toTargetObject);\n                } else {\n                  // No need to get and parse the original value if the tween is part of a timeline and has a previous sibling part of the same timeline\n                  decomposeRawValue(parent && prevSibling && prevSibling.parent.parent === parent ? prevSibling._value :\n                  getOriginalAnimatableValue(target, propName, tweenType, animInlineStyles), toTargetObject);\n                }\n              }\n              if (hasFromvalue) {\n                decomposeRawValue(tweenFromValue, fromTargetObject);\n              } else {\n                if (prevTween) {\n                  decomposeTweenValue(prevTween, fromTargetObject);\n                } else {\n                  decomposeRawValue(parent && prevSibling && prevSibling.parent.parent === parent ? prevSibling._value :\n                  // No need to get and parse the original value if the tween is part of a timeline and has a previous sibling part of the same timeline\n                  getOriginalAnimatableValue(target, propName, tweenType, animInlineStyles), fromTargetObject);\n                }\n              }\n            }\n\n            // Apply operators\n            if (fromTargetObject.o) {\n              fromTargetObject.n = getRelativeValue(\n                !prevSibling ? decomposeRawValue(\n                  getOriginalAnimatableValue(target, propName, tweenType, animInlineStyles),\n                  decomposedOriginalValue\n                ).n : prevSibling._toNumber,\n                fromTargetObject.n,\n                fromTargetObject.o\n              );\n            }\n\n            if (toTargetObject.o) {\n              toTargetObject.n = getRelativeValue(fromTargetObject.n, toTargetObject.n, toTargetObject.o);\n            }\n\n            // Values omogenisation in cases of type difference between \"from\" and \"to\"\n            if (fromTargetObject.t !== toTargetObject.t) {\n              if (fromTargetObject.t === valueTypes.COMPLEX || toTargetObject.t === valueTypes.COMPLEX) {\n                const complexValue = fromTargetObject.t === valueTypes.COMPLEX ? fromTargetObject : toTargetObject;\n                const notComplexValue = fromTargetObject.t === valueTypes.COMPLEX ? toTargetObject : fromTargetObject;\n                notComplexValue.t = valueTypes.COMPLEX;\n                notComplexValue.s = cloneArray(complexValue.s);\n                notComplexValue.d = complexValue.d.map(() => notComplexValue.n);\n              } else if (fromTargetObject.t === valueTypes.UNIT || toTargetObject.t === valueTypes.UNIT) {\n                const unitValue = fromTargetObject.t === valueTypes.UNIT ? fromTargetObject : toTargetObject;\n                const notUnitValue = fromTargetObject.t === valueTypes.UNIT ? toTargetObject : fromTargetObject;\n                notUnitValue.t = valueTypes.UNIT;\n                notUnitValue.u = unitValue.u;\n              } else if (fromTargetObject.t === valueTypes.COLOR || toTargetObject.t === valueTypes.COLOR) {\n                const colorValue = fromTargetObject.t === valueTypes.COLOR ? fromTargetObject : toTargetObject;\n                const notColorValue = fromTargetObject.t === valueTypes.COLOR ? toTargetObject : fromTargetObject;\n                notColorValue.t = valueTypes.COLOR;\n                notColorValue.s = colorValue.s;\n                notColorValue.d = [0, 0, 0, 1];\n              }\n            }\n\n            // Unit conversion\n            if (fromTargetObject.u !== toTargetObject.u) {\n              let valueToConvert = toTargetObject.u ? fromTargetObject : toTargetObject;\n              valueToConvert = convertValueUnit(/** @type {DOMTarget} */(target), valueToConvert, toTargetObject.u ? toTargetObject.u : fromTargetObject.u, false);\n              // TODO:\n              // convertValueUnit(target, to.u ? from : to, to.u ? to.u : from.u);\n            }\n\n            // Fill in non existing complex values\n            if (toTargetObject.d && fromTargetObject.d && (toTargetObject.d.length !== fromTargetObject.d.length)) {\n              const longestValue = fromTargetObject.d.length > toTargetObject.d.length ? fromTargetObject : toTargetObject;\n              const shortestValue = longestValue === fromTargetObject ? toTargetObject : fromTargetObject;\n              // TODO: Check if n should be used instead of 0 for default complex values\n              shortestValue.d = longestValue.d.map((_, i) => isUnd(shortestValue.d[i]) ? 0 : shortestValue.d[i]);\n              shortestValue.s = cloneArray(longestValue.s);\n            }\n\n            // Tween factory\n\n            // Rounding is necessary here to minimize floating point errors\n            const tweenUpdateDuration = round(+tweenDuration || minValue, 12);\n\n            /** @type {Tween} */\n            const tween = {\n              parent: this,\n              id: tweenId++,\n              property: propName,\n              target: target,\n              _value: null,\n              _func: toFunctionStore.func,\n              _ease: parseEasings(tweenEasing),\n              _fromNumbers: cloneArray(fromTargetObject.d),\n              _toNumbers: cloneArray(toTargetObject.d),\n              _strings: cloneArray(toTargetObject.s),\n              _fromNumber: fromTargetObject.n,\n              _toNumber: toTargetObject.n,\n              _numbers: cloneArray(fromTargetObject.d), // For additive tween and animatables\n              _number: fromTargetObject.n, // For additive tween and animatables\n              _unit: toTargetObject.u,\n              _modifier: tweenModifier,\n              _currentTime: 0,\n              _startTime: tweenStartTime,\n              _delay: +tweenDelay,\n              _updateDuration: tweenUpdateDuration,\n              _changeDuration: tweenUpdateDuration,\n              _absoluteStartTime: absoluteStartTime,\n              // NOTE: Investigate bit packing to stores ENUM / BOOL\n              _tweenType: tweenType,\n              _valueType: toTargetObject.t,\n              _composition: tweenComposition,\n              _isOverlapped: 0,\n              _isOverridden: 0,\n              _renderTransforms: 0,\n              _prevRep: null, // For replaced tween\n              _nextRep: null, // For replaced tween\n              _prevAdd: null, // For additive tween\n              _nextAdd: null, // For additive tween\n              _prev: null,\n              _next: null,\n            };\n\n            if (tweenComposition !== compositionTypes.none) {\n              composeTween(tween, siblings);\n            }\n\n            if (isNaN(firstTweenChangeStartTime)) {\n              firstTweenChangeStartTime = tween._startTime;\n            }\n            // Rounding is necessary here to minimize floating point errors\n            lastTweenChangeEndTime = round(tweenStartTime + tweenUpdateDuration, 12);\n            prevTween = tween;\n            animationAnimationLength++;\n\n            addChild(this, tween);\n\n          }\n\n          // Update animation timings with the added tweens properties\n\n          if (isNaN(iterationDelay) || firstTweenChangeStartTime < iterationDelay) {\n            iterationDelay = firstTweenChangeStartTime;\n          }\n\n          if (isNaN(iterationDuration) || lastTweenChangeEndTime > iterationDuration) {\n            iterationDuration = lastTweenChangeEndTime;\n          }\n\n          // TODO: Find a way to inline tween._renderTransforms = 1 here\n          if (tweenType === tweenTypes.TRANSFORM) {\n            lastTransformGroupIndex = animationAnimationLength - tweenIndex;\n            lastTransformGroupLength = animationAnimationLength;\n          }\n\n        }\n\n      }\n\n      // Set _renderTransforms to last transform property to correctly render the transforms list\n      if (!isNaN(lastTransformGroupIndex)) {\n        let i = 0;\n        forEachChildren(this, (/** @type {Tween} */tween) => {\n          if (i >= lastTransformGroupIndex && i < lastTransformGroupLength) {\n            tween._renderTransforms = 1;\n            if (tween._composition === compositionTypes.blend) {\n              forEachChildren(additive.animation, (/** @type {Tween} */additiveTween) => {\n                if (additiveTween.id === tween.id) {\n                  additiveTween._renderTransforms = 1;\n                }\n              });\n            }\n          }\n          i++;\n        });\n      }\n\n    }\n\n    if (!targetsLength) {\n      console.warn(`No target found. Make sure the element you're trying to animate is accessible before creating your animation.`);\n    }\n\n    if (iterationDelay) {\n      forEachChildren(this, (/** @type {Tween} */tween) => {\n        // If (startTime - delay) equals 0, this means the tween is at the begining of the animation so we need to trim the delay too\n        if (!(tween._startTime - tween._delay)) {\n          tween._delay -= iterationDelay;\n        }\n        tween._startTime -= iterationDelay;\n      });\n      iterationDuration -= iterationDelay;\n    } else {\n      iterationDelay = 0;\n    }\n\n    // Prevents iterationDuration to be NaN if no valid animatable props have been provided\n    // Prevents _iterationCount to be NaN if no valid animatable props have been provided\n    if (!iterationDuration) {\n      iterationDuration = minValue;\n      this.iterationCount = 0;\n    }\n    /** @type {TargetsArray} */\n    this.targets = parsedTargets;\n    /** @type {Number} */\n    this.duration = iterationDuration === minValue ? minValue : clampInfinity(((iterationDuration + this._loopDelay) * this.iterationCount) - this._loopDelay) || minValue;\n    /** @type {Callback<this>} */\n    this.onRender = onRender || animDefaults.onRender;\n    /** @type {EasingFunction} */\n    this._ease = animEase;\n    /** @type {Number} */\n    this._delay = iterationDelay;\n    // NOTE: I'm keeping delay values separated from offsets in timelines because delays can override previous tweens and it could be confusing to debug a timeline with overridden tweens and no associated visible delays.\n    // this._delay = parent ? 0 : iterationDelay;\n    // this._offset += parent ? iterationDelay : 0;\n    /** @type {Number} */\n    this.iterationDuration = iterationDuration;\n    /** @type {{}} */\n    this._inlineStyles = animInlineStyles;\n\n    if (!this._autoplay && shouldTriggerRender) this.onRender(this);\n  }\n\n  /**\n   * @param  {Number} newDuration\n   * @return {this}\n   */\n  stretch(newDuration) {\n    const currentDuration = this.duration;\n    if (currentDuration === clampZero(newDuration)) return this;\n    const timeScale = newDuration / currentDuration;\n    // NOTE: Find a better way to handle the stretch of an animation after stretch = 0\n    forEachChildren(this, (/** @type {Tween} */tween) => {\n      // Rounding is necessary here to minimize floating point errors\n      tween._updateDuration = clampZero(round(tween._updateDuration * timeScale, 12));\n      tween._changeDuration = clampZero(round(tween._changeDuration * timeScale, 12));\n      tween._currentTime *= timeScale;\n      tween._startTime *= timeScale;\n      tween._absoluteStartTime *= timeScale;\n    });\n    return super.stretch(newDuration);\n  }\n\n  /**\n   * @return {this}\n   */\n  refresh() {\n    forEachChildren(this, (/** @type {Tween} */tween) => {\n      const ogValue = getOriginalAnimatableValue(tween.target, tween.property, tween._tweenType);\n      decomposeRawValue(ogValue, decomposedOriginalValue);\n      tween._fromNumbers = cloneArray(decomposedOriginalValue.d);\n      tween._fromNumber = decomposedOriginalValue.n;\n      if (tween._func) {\n        decomposeRawValue(tween._func(), toTargetObject);\n        tween._toNumbers = cloneArray(toTargetObject.d);\n        tween._strings = cloneArray(toTargetObject.s);\n        tween._toNumber = toTargetObject.n;\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Cancel the animation and revert all the values affected by this animation to their original state\n   * @return {this}\n   */\n  revert() {\n    super.revert();\n    return cleanInlineStyles(this);\n  }\n\n  /**\n   * @param  {Callback<this>} [callback]\n   * @return {Promise}\n   */\n  then(callback) {\n    return super.then(callback);\n  }\n\n}\n\n/**\n * @param {TargetsParam} targets\n * @param {AnimationParams} parameters\n * @return {JSAnimation}\n */\nconst animate = (targets, parameters) => new JSAnimation(targets, parameters, null, 0, false).init();\n\n\n\n\n/**\n * Converts an easing function into a valid CSS linear() timing function string\n * @param {EasingFunction} fn\n * @param {number} [samples=100]\n * @returns {string} CSS linear() timing function\n */\nconst easingToLinear = (fn, samples = 100) => {\n  const points = [];\n  for (let i = 0; i <= samples; i++) points.push(fn(i / samples));\n  return `linear(${points.join(', ')})`;\n};\n\nconst WAAPIEasesLookups = {\n  in: 'ease-in',\n  out: 'ease-out',\n  inOut: 'ease-in-out',\n};\n\nconst WAAPIeases = /*#__PURE__*/(() => {\n  const list = {};\n  for (let type in easeTypes) list[type] = a => easeTypes[type](easeInPower(a));\n  return /** @type {Record<String, EasingFunction>} */(list);\n})();\n\n/**\n * @param  {EasingParam} ease\n * @return {String}\n */\nconst parseWAAPIEasing = (ease) => {\n  let parsedEase = WAAPIEasesLookups[ease];\n  if (parsedEase) return parsedEase;\n  parsedEase = 'linear';\n  if (isStr(ease)) {\n    if (\n      stringStartsWith(ease, 'linear') ||\n      stringStartsWith(ease, 'cubic-') ||\n      stringStartsWith(ease, 'steps') ||\n      stringStartsWith(ease, 'ease')\n    ) {\n      parsedEase = ease;\n    } else if (stringStartsWith(ease, 'cubicB')) {\n      parsedEase = toLowerCase(ease);\n    } else {\n      const parsed = parseEaseString(ease, WAAPIeases, WAAPIEasesLookups);\n      if (isFnc(parsed)) parsedEase = parsed === none ? 'linear' : easingToLinear(parsed);\n    }\n  } else if (isFnc(ease)) {\n    const easing = easingToLinear(ease);\n    if (easing) parsedEase = easing;\n  } else if (/** @type {Spring} */(ease).ease) {\n    parsedEase = easingToLinear(/** @type {Spring} */(ease).ease);\n  }\n  return WAAPIEasesLookups[ease] = parsedEase;\n};\n\n/**\n * @typedef {String|Number|Array<String>|Array<Number>} WAAPITweenValue\n */\n\n/**\n * @callback WAAPIFunctionvalue\n * @param {DOMTarget} target - The animated target\n * @param {Number} index - The target index\n * @param {Number} length - The total number of animated targets\n * @return {WAAPITweenValue}\n */\n\n/**\n * @typedef {WAAPITweenValue|WAAPIFunctionvalue|Array<String|Number|WAAPIFunctionvalue>} WAAPIKeyframeValue\n */\n\n/**\n * @typedef {(animation: WAAPIAnimation) => void} WAAPICallback\n */\n\n/**\n * @typedef {Object} WAAPITweenOptions\n * @property {WAAPIKeyframeValue} [to]\n * @property {WAAPIKeyframeValue} [from]\n * @property {Number|WAAPIFunctionvalue} [duration]\n * @property {Number|WAAPIFunctionvalue} [delay]\n * @property {EasingParam} [ease]\n * @property {CompositeOperation} [composition]\n */\n\n/**\n * @typedef {Object} WAAPIAnimationOptions\n * @property {Number|Boolean} [loop]\n * @property {Boolean} [Reversed]\n * @property {Boolean} [Alternate]\n * @property {Boolean|ScrollObserver} [autoplay]\n * @property {Number} [playbackRate]\n * @property {Number|WAAPIFunctionvalue} [duration]\n * @property {Number|WAAPIFunctionvalue} [delay]\n * @property {EasingParam} [ease]\n * @property {CompositeOperation} [composition]\n * @property {WAAPICallback} [onComplete]\n */\n\n/**\n * @typedef {Record<String, WAAPIKeyframeValue | WAAPIAnimationOptions | Boolean | ScrollObserver | WAAPICallback | EasingParam | WAAPITweenOptions> & WAAPIAnimationOptions} WAAPIAnimationParams\n */\n\nconst transformsShorthands = ['x', 'y', 'z'];\nconst commonDefaultPXProperties = [\n  'perspective',\n  'width',\n  'height',\n  'margin',\n  'padding',\n  'top',\n  'right',\n  'bottom',\n  'left',\n  'borderWidth',\n  'fontSize',\n  'borderRadius',\n  ...transformsShorthands\n];\n\nconst validIndividualTransforms = [...transformsShorthands, ...validTransforms.filter(t => ['X', 'Y', 'Z'].some(axis => t.endsWith(axis)))];\n\n// Setting it to true in case CSS.registerProperty is not supported will automatically skip the registration and fallback to no animation\nlet transformsPropertiesRegistered = isBrowser && (isUnd(CSS) || !Object.hasOwnProperty.call(CSS, 'registerProperty'));\n\nconst registerTransformsProperties = () => {\n  validTransforms.forEach(t => {\n    const isSkew = stringStartsWith(t, 'skew');\n    const isScale = stringStartsWith(t, 'scale');\n    const isRotate = stringStartsWith(t, 'rotate');\n    const isTranslate = stringStartsWith(t, 'translate');\n    const isAngle = isRotate || isSkew;\n    const syntax = isAngle ? '<angle>' : isScale ? \"<number>\" : isTranslate ? \"<length-percentage>\" : \"*\";\n    CSS.registerProperty({\n      name: '--' + t,\n      syntax,\n      inherits: false,\n      initialValue: isTranslate ? '0px' : isAngle ? '0deg' : isScale ? '1' : '0',\n    });\n  });\n  transformsPropertiesRegistered = true;\n};\n\nconst WAAPIAnimationsLookups = {\n  _head: null,\n  _tail: null,\n};\n\n/**\n * @param {DOMTarget} $el\n * @param {String} [property]\n * @param {WAAPIAnimation} [parent]\n */\nconst removeWAAPIAnimation = ($el, property, parent) => {\n  let nextLookup = WAAPIAnimationsLookups._head;\n  while (nextLookup) {\n    const next = nextLookup._next;\n    const matchTarget = nextLookup.$el === $el;\n    const matchProperty = !property || nextLookup.property === property;\n    const matchParent = !parent || nextLookup.parent === parent;\n    if (matchTarget && matchProperty && matchParent) {\n      const anim = nextLookup.animation;\n      try { anim.commitStyles(); } catch {}      anim.cancel();\n      removeChild(WAAPIAnimationsLookups, nextLookup);\n      const lookupParent = nextLookup.parent;\n      if (lookupParent) {\n        lookupParent._completed++;\n        if (lookupParent.animations.length === lookupParent._completed) {\n          lookupParent.completed = true;\n          if (!lookupParent.muteCallbacks) {\n            lookupParent.paused = true;\n            lookupParent.onComplete(lookupParent);\n            lookupParent._resolve(lookupParent);\n          }\n        }\n      }\n    }\n    nextLookup = next;\n  }\n};\n\n/**\n * @param {WAAPIAnimation} parent\n * @param {DOMTarget} $el\n * @param {String} property\n * @param {PropertyIndexedKeyframes} keyframes\n * @param {KeyframeAnimationOptions} params\n * @retun {Animation}\n */\nconst addWAAPIAnimation = (parent, $el, property, keyframes, params) => {\n  const animation = $el.animate(keyframes, params);\n  const animTotalDuration = params.delay + (+params.duration * params.iterations);\n  animation.playbackRate = parent._speed;\n  if (parent.paused) animation.pause();\n  if (parent.duration < animTotalDuration) {\n    parent.duration = animTotalDuration;\n    parent.controlAnimation = animation;\n  }\n  parent.animations.push(animation);\n  removeWAAPIAnimation($el, property);\n  addChild(WAAPIAnimationsLookups, { parent, animation, $el, property, _next: null, _prev: null });\n  const handleRemove = () => { removeWAAPIAnimation($el, property, parent); };\n  animation.onremove = handleRemove;\n  animation.onfinish = handleRemove;\n  return animation;\n};\n\n/**\n * @param  {String} propName\n * @param  {WAAPIKeyframeValue} value\n * @param  {DOMTarget} $el\n * @param  {Number} i\n * @param  {Number} targetsLength\n * @return {String}\n */\nconst normalizeTweenValue = (propName, value, $el, i, targetsLength) => {\n  let v = getFunctionValue(/** @type {any} */(value), $el, i, targetsLength);\n  if (!isNum(v)) return v;\n  if (commonDefaultPXProperties.includes(propName) || stringStartsWith(propName, 'translate')) return `${v}px`;\n  if (stringStartsWith(propName, 'rotate') || stringStartsWith(propName, 'skew')) return `${v}deg`;\n  return `${v}`;\n};\n\n/**\n * @param  {DOMTarget} $el\n * @param  {String} propName\n * @param  {WAAPIKeyframeValue} from\n * @param  {WAAPIKeyframeValue} to\n * @param  {Number} i\n * @param  {Number} targetsLength\n * @return {WAAPITweenValue}\n */\nconst parseIndividualTweenValue = ($el, propName, from, to, i, targetsLength) => {\n  /** @type {WAAPITweenValue} */\n  let tweenValue = '0';\n  const computedTo = !isUnd(to) ? normalizeTweenValue(propName, to, $el, i, targetsLength) : getComputedStyle($el)[propName];\n  if (!isUnd(from)) {\n    const computedFrom = normalizeTweenValue(propName, from, $el, i, targetsLength);\n    tweenValue = [computedFrom, computedTo];\n  } else {\n    tweenValue = isArr(to) ? to.map((/** @type {any} */v) => normalizeTweenValue(propName, v, $el, i, targetsLength)) : computedTo;\n  }\n  return tweenValue;\n};\n\nclass WAAPIAnimation {\n/**\n * @param {DOMTargetsParam} targets\n * @param {WAAPIAnimationParams} params\n */\n  constructor(targets, params) {\n\n    if (globals.scope) globals.scope.revertibles.push(this);\n\n    if (!transformsPropertiesRegistered) registerTransformsProperties();\n\n    const parsedTargets = registerTargets(targets);\n    const targetsLength = parsedTargets.length;\n\n    if (!targetsLength) {\n      console.warn(`No target found. Make sure the element you're trying to animate is accessible before creating your animation.`);\n    }\n\n    const ease = setValue(params.ease, parseWAAPIEasing(globals.defaults.ease));\n    const spring = /** @type {Spring} */(ease).ease && ease;\n    const autoplay = setValue(params.autoplay, globals.defaults.autoplay);\n    const scroll = autoplay && /** @type {ScrollObserver} */(autoplay).link ? autoplay : false;\n    const alternate = params.alternate && /** @type {Boolean} */(params.alternate) === true;\n    const reversed = params.reversed && /** @type {Boolean} */(params.reversed) === true;\n    const loop = setValue(params.loop, globals.defaults.loop);\n    const iterations = /** @type {Number} */((loop === true || loop === Infinity) ? Infinity : isNum(loop) ? loop + 1 : 1);\n    /** @type {PlaybackDirection} */\n    const direction = alternate ? reversed ? 'alternate-reverse' : 'alternate' : reversed ? 'reverse' : 'normal';\n    /** @type {FillMode} */\n    const fill = 'forwards';\n    /** @type {String} */\n    const easing = parseWAAPIEasing(ease);\n    const timeScale = (globals.timeScale === 1 ? 1 : K);\n\n    /** @type {DOMTargetsArray}] */\n    this.targets = parsedTargets;\n    /** @type {Array<globalThis.Animation>}] */\n    this.animations = [];\n    /** @type {globalThis.Animation}] */\n    this.controlAnimation = null;\n    /** @type {Callback<this>} */\n    this.onComplete = params.onComplete || noop;\n    /** @type {Number} */\n    this.duration = 0;\n    /** @type {Boolean} */\n    this.muteCallbacks = false;\n    /** @type {Boolean} */\n    this.completed = false;\n    /** @type {Boolean} */\n    this.paused = !autoplay || scroll !== false;\n    /** @type {Boolean} */\n    this.reversed = reversed;\n    /** @type {Boolean|ScrollObserver} */\n    this.autoplay = autoplay;\n    /** @type {Number} */\n    this._speed = setValue(params.playbackRate, globals.defaults.playbackRate);\n    /** @type {Function} */\n    this._resolve = noop; // Used by .then()\n    /** @type {Number} */\n    this._completed = 0;\n    /** @type {Array<Object>}] */\n    this._inlineStyles = parsedTargets.map($el => $el.getAttribute('style'));\n\n    parsedTargets.forEach(($el, i) => {\n\n      const cachedTransforms = $el[transformsSymbol];\n\n      const hasIndividualTransforms = validIndividualTransforms.some(t => params.hasOwnProperty(t));\n\n      /** @type {Number} */\n      const duration = (spring ? /** @type {Spring} */(spring).duration : getFunctionValue(setValue(params.duration, globals.defaults.duration), $el, i, targetsLength)) * timeScale;\n      /** @type {Number} */\n      const delay = getFunctionValue(setValue(params.delay, globals.defaults.delay), $el, i, targetsLength) * timeScale;\n      /** @type {CompositeOperation} */\n      const composite = /** @type {CompositeOperation} */(setValue(params.composition, 'replace'));\n\n      for (let name in params) {\n        if (!isKey(name)) continue;\n        /** @type {PropertyIndexedKeyframes} */\n        const keyframes = {};\n        /** @type {KeyframeAnimationOptions} */\n        const tweenParams = { iterations, direction, fill, easing, duration, delay, composite };\n        const propertyValue = params[name];\n        const individualTransformProperty = hasIndividualTransforms ? validTransforms.includes(name) ? name : shortTransforms.get(name) : false;\n        let parsedPropertyValue;\n        if (isObj(propertyValue)) {\n          const tweenOptions = /** @type {WAAPITweenOptions} */(propertyValue);\n          const tweenOptionsEase = setValue(tweenOptions.ease, ease);\n          const tweenOptionsSpring = /** @type {Spring} */(tweenOptionsEase).ease && tweenOptionsEase;\n          const to = /** @type {WAAPITweenOptions} */(tweenOptions).to;\n          const from = /** @type {WAAPITweenOptions} */(tweenOptions).from;\n          /** @type {Number} */\n          tweenParams.duration = (tweenOptionsSpring ? /** @type {Spring} */(tweenOptionsSpring).duration : getFunctionValue(setValue(tweenOptions.duration, duration), $el, i, targetsLength)) * timeScale;\n          /** @type {Number} */\n          tweenParams.delay = getFunctionValue(setValue(tweenOptions.delay, delay), $el, i, targetsLength) * timeScale;\n          /** @type {CompositeOperation} */\n          tweenParams.composite = /** @type {CompositeOperation} */(setValue(tweenOptions.composition, composite));\n          /** @type {String} */\n          tweenParams.easing = parseWAAPIEasing(tweenOptionsEase);\n          parsedPropertyValue = parseIndividualTweenValue($el, name, from, to, i, targetsLength);\n          if (individualTransformProperty) {\n            keyframes[`--${individualTransformProperty}`] = parsedPropertyValue;\n            cachedTransforms[individualTransformProperty] = parsedPropertyValue;\n          } else {\n            keyframes[name] = parseIndividualTweenValue($el, name, from, to, i, targetsLength);\n          }\n          addWAAPIAnimation(this, $el, name, keyframes, tweenParams);\n          if (!isUnd(from)) {\n            if (!individualTransformProperty) {\n              $el.style[name] = keyframes[name][0];\n            } else {\n              const key = `--${individualTransformProperty}`;\n              $el.style.setProperty(key, keyframes[key][0]);\n            }\n          }\n        } else {\n          parsedPropertyValue = isArr(propertyValue) ?\n                                propertyValue.map((/** @type {any} */v) => normalizeTweenValue(name, v, $el, i, targetsLength)) :\n                                normalizeTweenValue(name, /** @type {any} */(propertyValue), $el, i, targetsLength);\n          if (individualTransformProperty) {\n            keyframes[`--${individualTransformProperty}`] = parsedPropertyValue;\n            cachedTransforms[individualTransformProperty] = parsedPropertyValue;\n          } else {\n            keyframes[name] = parsedPropertyValue;\n          }\n          addWAAPIAnimation(this, $el, name, keyframes, tweenParams);\n        }\n      }\n      if (hasIndividualTransforms) {\n        let transforms = emptyString;\n        for (let t in cachedTransforms) {\n          transforms += `${transformsFragmentStrings[t]}var(--${t})) `;\n        }\n        $el.style.transform = transforms;\n      }\n    });\n\n    if (scroll) {\n      /** @type {ScrollObserver} */(this.autoplay).link(this);\n    }\n  }\n\n  /**\n   * @callback forEachCallback\n   * @param {globalThis.Animation} animation\n   */\n\n  /**\n   * @param  {forEachCallback|String} callback\n   * @return {this}\n   */\n  forEach(callback) {\n    const cb = isStr(callback) ? a => a[callback]() : callback;\n    this.animations.forEach(cb);\n    return this;\n  }\n\n  get speed() {\n    return this._speed;\n  }\n\n  /** @param {Number} speed */\n  set speed(speed) {\n    this._speed = +speed;\n    this.forEach(anim => anim.playbackRate = speed);\n  }\n\n  get currentTime() {\n    const controlAnimation = this.controlAnimation;\n    const timeScale = globals.timeScale;\n    return this.completed ? this.duration : controlAnimation ? +controlAnimation.currentTime * (timeScale === 1 ? 1 : timeScale) : 0;\n  }\n\n  /** @param {Number} time */\n  set currentTime(time) {\n    const t = time * (globals.timeScale === 1 ? 1 : K);\n    this.forEach(anim => anim.currentTime = t);\n  }\n\n  get progress() {\n    return this.currentTime / this.duration;\n  }\n\n  /** @param {Number} progress */\n  set progress(progress) {\n    this.forEach(anim => anim.currentTime = progress * this.duration || 0);\n  }\n\n  resume() {\n    if (!this.paused) return this;\n    this.paused = false;\n    // TODO: Store the current time, and seek back to the last position\n    return this.forEach('play');\n  }\n\n  pause() {\n    if (this.paused) return this;\n    this.paused = true;\n    return this.forEach('pause');\n  }\n\n  alternate() {\n    this.reversed = !this.reversed;\n    this.forEach('reverse');\n    if (this.paused) this.forEach('pause');\n    return this;\n  }\n\n  play() {\n    if (this.reversed) this.alternate();\n    return this.resume();\n  }\n\n  reverse() {\n    if (!this.reversed) this.alternate();\n    return this.resume();\n  }\n\n /**\n  * @param {Number} time\n  * @param {Boolean} muteCallbacks\n  */\n  seek(time, muteCallbacks = false) {\n    if (muteCallbacks) this.muteCallbacks = true;\n    if (time < this.duration) this.completed = false;\n    this.currentTime = time;\n    this.muteCallbacks = false;\n    if (this.paused) this.pause();\n    return this;\n  }\n\n  restart() {\n    this.completed = false;\n    return this.seek(0, true).resume();\n  }\n\n  commitStyles() {\n    return this.forEach('commitStyles');\n  }\n\n  complete() {\n    return this.seek(this.duration);\n  }\n\n  cancel() {\n    this.forEach('cancel');\n    return this.pause();\n  }\n\n  revert() {\n    this.cancel();\n    this.targets.forEach(($el, i) => $el.setAttribute('style', this._inlineStyles[i]) );\n    return this;\n  }\n\n  /**\n   * @param  {WAAPICallback} [callback]\n   * @return {Promise}\n   */\n  then(callback = noop) {\n    const then = this.then;\n    const onResolve = () => {\n      this.then = null;\n      callback(this);\n      this.then = then;\n      this._resolve = noop;\n    };\n    return new Promise(r => {\n      this._resolve = () => r(onResolve());\n      if (this.completed) this._resolve();\n      return this;\n    });\n  }\n}\n\nconst waapi = {\n/**\n * @param {DOMTargetsParam} targets\n * @param {WAAPIAnimationParams} params\n * @return {WAAPIAnimation}\n */\n  animate: (targets, params) => new WAAPIAnimation(targets, params),\n  convertEase: easingToLinear\n};\n\n\n\n\n/**\n * @param  {Callback<Timer>} [callback]\n * @return {Timer}\n */\nconst sync = (callback = noop) => {\n  return new Timer({ duration: 1 * globals.timeScale, onComplete: callback }, null, 0).resume();\n};\n\n/**\n * @overload\n * @param  {DOMTargetSelector} targetSelector\n * @param  {String}            propName\n * @return {String}\n *\n * @overload\n * @param  {JSTargetsParam} targetSelector\n * @param  {String}         propName\n * @return {Number|String}\n *\n * @overload\n * @param  {DOMTargetsParam} targetSelector\n * @param  {String}          propName\n * @param  {String}          unit\n * @return {String}\n *\n * @overload\n * @param  {TargetsParam} targetSelector\n * @param  {String}       propName\n * @param  {Boolean}      unit\n * @return {Number}\n *\n * @param  {TargetsParam}   targetSelector\n * @param  {String}         propName\n * @param  {String|Boolean} [unit]\n */\nfunction getTargetValue(targetSelector, propName, unit) {\n  const targets = registerTargets(targetSelector);\n  if (!targets.length) return;\n  const [ target ] = targets;\n  const tweenType = getTweenType(target, propName);\n  const normalizePropName = sanitizePropertyName(propName, target, tweenType);\n  let originalValue = getOriginalAnimatableValue(target, normalizePropName);\n  if (isUnd(unit)) {\n    return originalValue;\n  } else {\n    decomposeRawValue(originalValue, decomposedOriginalValue);\n    if (decomposedOriginalValue.t === valueTypes.NUMBER || decomposedOriginalValue.t === valueTypes.UNIT) {\n      if (unit === false) {\n        return decomposedOriginalValue.n;\n      } else {\n        const convertedValue = convertValueUnit(/** @type {DOMTarget} */(target), decomposedOriginalValue, /** @type {String} */(unit), false);\n        return `${round(convertedValue.n, globals.precision)}${convertedValue.u}`;\n      }\n    }\n  }\n}\n\n/**\n * @param  {TargetsParam}    targets\n * @param  {AnimationParams} parameters\n * @return {JSAnimation}\n */\nconst setTargetValues = (targets, parameters) => {\n  if (isUnd(parameters)) return;\n  parameters.duration = minValue;\n  // Do not overrides currently active tweens by default\n  parameters.composition = setValue(parameters.composition, compositionTypes.none);\n  // Skip init() and force rendering by playing the animation\n  return new JSAnimation(targets, parameters, null, 0, true).resume();\n};\n\n/**\n * @param  {TargetsArray} targetsArray\n * @param  {JSAnimation}    animation\n * @param  {String}       [propertyName]\n * @return {Boolean}\n */\nconst removeTargetsFromAnimation = (targetsArray, animation, propertyName) => {\n  let tweensMatchesTargets = false;\n  forEachChildren(animation, (/**@type {Tween} */tween) => {\n    const tweenTarget = tween.target;\n    if (targetsArray.includes(tweenTarget)) {\n      const tweenName = tween.property;\n      const tweenType = tween._tweenType;\n      const normalizePropName = sanitizePropertyName(propertyName, tweenTarget, tweenType);\n      if (!normalizePropName || normalizePropName && normalizePropName === tweenName) {\n        // Make sure to flag the previous CSS transform tween to renderTransform\n        if (tween.parent._tail === tween &&\n            tween._tweenType === tweenTypes.TRANSFORM &&\n            tween._prev &&\n            tween._prev._tweenType === tweenTypes.TRANSFORM\n        ) {\n          tween._prev._renderTransforms = 1;\n        }\n        // Removes the tween from the selected animation\n        removeChild(animation, tween);\n        // Detach the tween from its siblings to make sure blended tweens are correctlly removed\n        removeTweenSliblings(tween);\n        tweensMatchesTargets = true;\n      }\n    }\n  }, true);\n  return tweensMatchesTargets;\n};\n\n/**\n * @param  {TargetsParam} targets\n * @param  {Renderable|WAAPIAnimation} [renderable]\n * @param  {String}                    [propertyName]\n * @return {TargetsArray}\n */\nconst remove = (targets, renderable, propertyName) => {\n  const targetsArray = parseTargets(targets);\n  const parent = /** @type {Renderable|typeof engine} **/(renderable ? renderable : engine);\n  const waapiAnimation = renderable && /** @type {WAAPIAnimation} */(renderable).controlAnimation && /** @type {WAAPIAnimation} */(renderable);\n  for (let i = 0, l = targetsArray.length; i < l; i++) {\n    const $el = /** @type {DOMTarget}  */(targetsArray[i]);\n    removeWAAPIAnimation($el, propertyName, waapiAnimation);\n  }\n  let removeMatches;\n  if (parent._hasChildren) {\n    let iterationDuration = 0;\n    forEachChildren(parent, (/** @type {Renderable} */child) => {\n      if (!child._hasChildren) {\n        removeMatches = removeTargetsFromAnimation(targetsArray, /** @type {JSAnimation} */(child), propertyName);\n        // Remove the child from its parent if no tweens and no children left after the removal\n        if (removeMatches && !child._head) {\n          child.cancel();\n          removeChild(parent, child);\n        } else {\n          // Calculate the new iterationDuration value to handle onComplete with last child in render()\n          const childTLOffset = child._offset + child._delay;\n          const childDur = childTLOffset + child.duration;\n          if (childDur > iterationDuration) {\n            iterationDuration = childDur;\n          }\n        }\n      }\n      // Make sure to also remove engine's children targets\n      // NOTE: Avoid recursion?\n      if (child._head) {\n        remove(targets, child, propertyName);\n      } else {\n        child._hasChildren = false;\n      }\n    }, true);\n    // Update iterationDuration value to handle onComplete with last child in render()\n    if (!isUnd(/** @type {Renderable} */(parent).iterationDuration)) {\n      /** @type {Renderable} */(parent).iterationDuration = iterationDuration;\n    }\n  } else {\n    removeMatches = removeTargetsFromAnimation(\n      targetsArray,\n      /** @type {JSAnimation} */(parent),\n      propertyName\n    );\n  }\n\n  if (removeMatches && !parent._head) {\n    parent._hasChildren = false;\n    // Cancel the parent if there are no tweens and no children left after the removal\n    // We have to check if the .cancel() method exist to handle cases where the parent is the engine itself\n    if (/** @type {Renderable} */(parent).cancel) /** @type {Renderable} */(parent).cancel();\n  }\n\n  return targetsArray;\n};\n\n/**\n * @param  {Number} min\n * @param  {Number} max\n * @param  {Number} [decimalLength]\n * @return {Number}\n */\nconst random = (min, max, decimalLength) => { const m = 10 ** (decimalLength || 0); return floor((Math.random() * (max - min + (1 / m)) + min) * m) / m };\n\n/**\n * @param  {String|Array} items\n * @return {any}\n */\nconst randomPick = items => items[random(0, items.length - 1)];\n\n/**\n * Adapted from https://bost.ocks.org/mike/shuffle/\n * @param  {Array} items\n * @return {Array}\n */\nconst shuffle = items => {\n  let m = items.length, t, i;\n  while (m) { i = random(0, --m); t = items[m]; items[m] = items[i]; items[i] = t; }\n  return items;\n};\n\n/**\n * @param  {Number|String} v\n * @param  {Number} decimalLength\n * @return {String}\n */\nconst roundPad = (v, decimalLength) => (+v).toFixed(decimalLength);\n\n/**\n * @param  {Number} v\n * @param  {Number} totalLength\n * @param  {String} padString\n * @return {String}\n */\nconst padStart = (v, totalLength, padString) => `${v}`.padStart(totalLength, padString);\n\n/**\n * @param  {Number} v\n * @param  {Number} totalLength\n * @param  {String} padString\n * @return {String}\n */\nconst padEnd = (v, totalLength, padString) => `${v}`.padEnd(totalLength, padString);\n\n/**\n * @param  {Number} v\n * @param  {Number} min\n * @param  {Number} max\n * @return {Number}\n */\nconst wrap = (v, min, max) => (((v - min) % (max - min) + (max - min)) % (max - min)) + min;\n\n/**\n * @param  {Number} value\n * @param  {Number} inLow\n * @param  {Number} inHigh\n * @param  {Number} outLow\n * @param  {Number} outHigh\n * @return {Number}\n */\nconst mapRange = (value, inLow, inHigh, outLow, outHigh) => outLow + ((value - inLow) / (inHigh - inLow)) * (outHigh - outLow);\n\n/**\n * @param  {Number} degrees\n * @return {Number}\n */\nconst degToRad = degrees => degrees * PI / 180;\n\n/**\n * @param  {Number} radians\n * @return {Number}\n */\nconst radToDeg = radians => radians * 180 / PI;\n\n/**\n * https://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/\n * @param  {Number} start\n * @param  {Number} end\n * @param  {Number} amount\n * @param  {Renderable|Boolean} [renderable]\n * @return {Number}\n */\nconst lerp = (start, end, amount, renderable) => {\n  let dt = K / globals.defaults.frameRate;\n  if (renderable !== false) {\n    const ticker = /** @type Renderable */\n                   (renderable) ||\n                   (engine._hasChildren && engine);\n    if (ticker && ticker.deltaTime) {\n      dt = ticker.deltaTime;\n    }\n  }\n  const t = 1 - Math.exp(-amount * dt * .1);\n  return !amount ? start : amount === 1 ? end : (1 - t) * start + t * end;\n};\n\n// Chain-able utilities\n\n/**\n * @callback UtilityFunction\n * @param {...*} args\n * @return {Number|String}\n *\n * @param {UtilityFunction} fn\n * @param {Number} [last=0]\n * @return {function(...(Number|String)): function(Number|String): (Number|String)}\n */\nconst curry = (fn, last = 0) => (...args) => last ? v => fn(...args, v) : v => fn(v, ...args);\n\n/**\n * @param {Function} fn\n * @return {function(...(Number|String))}\n */\nconst chain = fn => {\n   return (...args) => {\n    const result = fn(...args);\n    return new Proxy(noop, {\n      apply: (_, __, [v]) => result(v),\n      get: (_, prop) => chain(/**@param {...Number|String} nextArgs */(...nextArgs) => {\n        const nextResult = utils[prop](...nextArgs);\n        return (/**@type {Number|String} */v) => nextResult(result(v));\n      })\n    });\n  }\n};\n\n/**\n * @param {UtilityFunction} fn\n * @param {Number} [right]\n * @return {function(...(Number|String)): UtilityFunction}\n */\nconst makeChainable = (fn, right = 0) => (...args) => (args.length < fn.length ? chain(curry(fn, right)) : fn)(...args);\n\n/**\n * @callback ChainedUtilsResult\n * @param {Number} value\n * @return {Number}\n *\n * @typedef {Object} ChainableUtils\n * @property {ChainedClamp} clamp\n * @property {ChainedRound} round\n * @property {ChainedSnap} snap\n * @property {ChainedWrap} wrap\n * @property {ChainedInterpolate} interpolate\n * @property {ChainedMapRange} mapRange\n * @property {ChainedRoundPad} roundPad\n * @property {ChainedPadStart} padStart\n * @property {ChainedPadEnd} padEnd\n * @property {ChainedDegToRad} degToRad\n * @property {ChainedRadToDeg} radToDeg\n *\n * @typedef {ChainableUtils & ChainedUtilsResult} ChainableUtil\n *\n * @callback ChainedClamp\n * @param {Number} min\n * @param {Number} max\n * @return {ChainableUtil}\n *\n * @callback ChainedRound\n * @param {Number} decimalLength\n * @return {ChainableUtil}\n *\n * @callback ChainedSnap\n * @param {Number} increment\n * @return {ChainableUtil}\n *\n * @callback ChainedWrap\n * @param {Number} min\n * @param {Number} max\n * @return {ChainableUtil}\n *\n * @callback ChainedInterpolate\n * @param {Number} start\n * @param {Number} end\n * @return {ChainableUtil}\n *\n * @callback ChainedMapRange\n * @param {Number} inLow\n * @param {Number} inHigh\n * @param {Number} outLow\n * @param {Number} outHigh\n * @return {ChainableUtil}\n *\n * @callback ChainedRoundPad\n * @param {Number} decimalLength\n * @return {ChainableUtil}\n *\n * @callback ChainedPadStart\n * @param {Number} totalLength\n * @param {String} padString\n * @return {ChainableUtil}\n *\n * @callback ChainedPadEnd\n * @param {Number} totalLength\n * @param {String} padString\n * @return {ChainableUtil}\n *\n * @callback ChainedDegToRad\n * @return {ChainableUtil}\n *\n * @callback ChainedRadToDeg\n * @return {ChainableUtil}\n */\n\nconst utils = {\n  $: registerTargets,\n  get: getTargetValue,\n  set: setTargetValues,\n  remove,\n  cleanInlineStyles,\n  random,\n  randomPick,\n  shuffle,\n  lerp,\n  sync,\n  clamp: /** @type {typeof clamp & ChainedClamp} */(makeChainable(clamp)),\n  round: /** @type {typeof round & ChainedRound} */(makeChainable(round)),\n  snap: /** @type {typeof snap & ChainedSnap} */(makeChainable(snap)),\n  wrap: /** @type {typeof wrap & ChainedWrap} */(makeChainable(wrap)),\n  interpolate: /** @type {typeof interpolate & ChainedInterpolate} */(makeChainable(interpolate, 1)),\n  mapRange: /** @type {typeof mapRange & ChainedMapRange} */(makeChainable(mapRange)),\n  roundPad: /** @type {typeof roundPad & ChainedRoundPad} */(makeChainable(roundPad)),\n  padStart: /** @type {typeof padStart & ChainedPadStart} */(makeChainable(padStart)),\n  padEnd: /** @type {typeof padEnd & ChainedPadEnd} */(makeChainable(padEnd)),\n  degToRad: /** @type {typeof degToRad & ChainedDegToRad} */(makeChainable(degToRad)),\n  radToDeg: /** @type {typeof radToDeg & ChainedRadToDeg} */(makeChainable(radToDeg)),\n};\n\n\n\n\n/**\n * @typedef {Number|String|Function} TimePosition\n */\n\n/**\n * Timeline's children offsets positions parser\n * @param  {Timeline} timeline\n * @param  {String} timePosition\n * @return {Number}\n */\nconst getPrevChildOffset = (timeline, timePosition) => {\n  if (stringStartsWith(timePosition, '<')) {\n    const goToPrevAnimationOffset = timePosition[1] === '<';\n    const prevAnimation = /** @type {Tickable} */(timeline._tail);\n    const prevOffset = prevAnimation ? prevAnimation._offset + prevAnimation._delay : 0;\n    return goToPrevAnimationOffset ? prevOffset : prevOffset + prevAnimation.duration;\n  }\n};\n\n/**\n * @param  {Timeline} timeline\n * @param  {TimePosition} [timePosition]\n * @return {Number}\n */\nconst parseTimelinePosition = (timeline, timePosition) => {\n  let tlDuration = timeline.iterationDuration;\n  if (tlDuration === minValue) tlDuration = 0;\n  if (isUnd(timePosition)) return tlDuration;\n  if (isNum(+timePosition)) return +timePosition;\n  const timePosStr = /** @type {String} */(timePosition);\n  const tlLabels = timeline ? timeline.labels : null;\n  const hasLabels = !isNil(tlLabels);\n  const prevOffset = getPrevChildOffset(timeline, timePosStr);\n  const hasSibling = !isUnd(prevOffset);\n  const matchedRelativeOperator = relativeValuesExecRgx.exec(timePosStr);\n  if (matchedRelativeOperator) {\n    const fullOperator = matchedRelativeOperator[0];\n    const split = timePosStr.split(fullOperator);\n    const labelOffset = hasLabels && split[0] ? tlLabels[split[0]] : tlDuration;\n    const parsedOffset = hasSibling ? prevOffset : hasLabels ? labelOffset : tlDuration;\n    const parsedNumericalOffset = +split[1];\n    return getRelativeValue(parsedOffset, parsedNumericalOffset, fullOperator[0]);\n  } else {\n    return hasSibling ? prevOffset :\n           hasLabels ? !isUnd(tlLabels[timePosStr]) ? tlLabels[timePosStr] :\n           tlDuration : tlDuration;\n  }\n};\n\n/**\n * @param {Timeline} tl\n * @return {Number}\n */\nfunction getTimelineTotalDuration(tl) {\n  return clampInfinity(((tl.iterationDuration + tl._loopDelay) * tl.iterationCount) - tl._loopDelay) || minValue;\n}\n\n/**\n * @overload\n * @param  {TimerParams} childParams\n * @param  {Timeline} tl\n * @param  {Number} timePosition\n * @return {Timeline}\n *\n * @overload\n * @param  {AnimationParams} childParams\n * @param  {Timeline} tl\n * @param  {Number} timePosition\n * @param  {TargetsParam} targets\n * @param  {Number} [index]\n * @param  {Number} [length]\n * @return {Timeline}\n *\n * @param  {TimerParams|AnimationParams} childParams\n * @param  {Timeline} tl\n * @param  {Number} timePosition\n * @param  {TargetsParam} [targets]\n * @param  {Number} [index]\n * @param  {Number} [length]\n */\nfunction addTlChild(childParams, tl, timePosition, targets, index, length) {\n  const isSetter = isNum(childParams.duration) && /** @type {Number} */(childParams.duration) <= minValue;\n  // Offset the tl position with -minValue for 0 duration animations or .set() calls in order to align their end value with the defined position\n  const adjustedPosition = isSetter ? timePosition - minValue : timePosition;\n  tick(tl, adjustedPosition, 1, 1, tickModes.AUTO);\n  const tlChild = targets ?\n    new JSAnimation(targets,/** @type {AnimationParams} */(childParams), tl, adjustedPosition, false, index, length) :\n    new Timer(/** @type {TimerParams} */(childParams), tl, adjustedPosition);\n  tlChild.init(1);\n  // TODO: Might be better to insert at a position relative to startTime?\n  addChild(tl, tlChild);\n  forEachChildren(tl, (/** @type {Renderable} */child) => {\n    const childTLOffset = child._offset + child._delay;\n    const childDur = childTLOffset + child.duration;\n    if (childDur > tl.iterationDuration) tl.iterationDuration = childDur;\n  });\n  tl.duration = getTimelineTotalDuration(tl);\n  return tl;\n}\n\nclass Timeline extends Timer {\n\n  /**\n   * @param {TimelineParams} [parameters]\n   */\n  constructor(parameters = {}) {\n    super(/** @type {TimerParams&TimelineParams} */(parameters), null, 0);\n    /** @type {Number} */\n    this.duration = 0; // TL duration starts at 0 and grows when adding children\n    /** @type {Record<String, Number>} */\n    this.labels = {};\n    const defaultsParams = parameters.defaults;\n    const globalDefaults = globals.defaults;\n    /** @type {DefaultsParams} */\n    this.defaults = defaultsParams ? mergeObjects(defaultsParams, globalDefaults) : globalDefaults;\n    /** @type {Callback<this>} */\n    this.onRender = parameters.onRender || globalDefaults.onRender;\n    const tlPlaybackEase = setValue(parameters.playbackEase, globalDefaults.playbackEase);\n    this._ease = tlPlaybackEase ? parseEasings(tlPlaybackEase) : null;\n    /** @type {Number} */\n    this.iterationDuration = 0;\n  }\n\n  /**\n   * @overload\n   * @param {TargetsParam} a1\n   * @param {AnimationParams} a2\n   * @param {TimePosition} [a3]\n   * @return {this}\n   *\n   * @overload\n   * @param {TimerParams} a1\n   * @param {TimePosition} [a2]\n   * @return {this}\n   *\n   * @param {TargetsParam|TimerParams} a1\n   * @param {AnimationParams|TimePosition} a2\n   * @param {TimePosition} [a3]\n   */\n  add(a1, a2, a3) {\n    const isAnim = isObj(a2);\n    const isTimer = isObj(a1);\n    if (isAnim || isTimer) {\n      this._hasChildren = true;\n      if (isAnim) {\n        const childParams = /** @type {AnimationParams} */(a2);\n        // Check for function for children stagger positions\n        if (isFnc(a3)) {\n          const staggeredPosition = /** @type {Function} */(a3);\n          const parsedTargetsArray = parseTargets(/** @type {TargetsParam} */(a1));\n          // Store initial duration before adding new children that will change the duration\n          const tlDuration = this.duration;\n          // Store initial _iterationDuration before adding new children that will change the duration\n          const tlIterationDuration = this.iterationDuration;\n          // Store the original id in order to add specific indexes to the new animations ids\n          const id = childParams.id;\n          let i = 0;\n          const parsedLength = parsedTargetsArray.length;\n          parsedTargetsArray.forEach((/** @type {Target} */target) => {\n            // Create a new parameter object for each staggered children\n            const staggeredChildParams = { ...childParams };\n            // Reset the duration of the timeline iteration before each stagger to prevent wrong start value calculation\n            this.duration = tlDuration;\n            this.iterationDuration = tlIterationDuration;\n            if (!isUnd(id)) staggeredChildParams.id = id + '-' + i;\n            addTlChild(\n              staggeredChildParams,\n              this,\n              staggeredPosition(target, i, parsedLength, this),\n              target,\n              i,\n              parsedLength\n            );\n            i++;\n          });\n        } else {\n          addTlChild(\n            childParams,\n            this,\n            parseTimelinePosition(this, a3),\n            /** @type {TargetsParam} */(a1),\n          );\n        }\n      } else {\n        // It's a Timer\n        addTlChild(\n          /** @type TimerParams */(a1),\n          this,\n          parseTimelinePosition(this,/** @type TimePosition */(a2)),\n        );\n      }\n      return this.init(1); // 1 = internalRender\n    }\n  }\n\n  /**\n   * @overload\n   * @param {Tickable} [synced]\n   * @param {TimePosition} [position]\n   * @return {this}\n   *\n   * @overload\n   * @param {globalThis.Animation} [synced]\n   * @param {TimePosition} [position]\n   * @return {this}\n   *\n   * @overload\n   * @param {WAAPIAnimation} [synced]\n   * @param {TimePosition} [position]\n   * @return {this}\n   *\n   * @param {Tickable|WAAPIAnimation|globalThis.Animation} [synced]\n   * @param {TimePosition} [position]\n   */\n  sync(synced, position) {\n    if (isUnd(synced) || synced && isUnd(synced.pause)) return this;\n    synced.pause();\n    const duration = +(/** @type {globalThis.Animation} */(synced).effect ? /** @type {globalThis.Animation} */(synced).effect.getTiming().duration : /** @type {Tickable} */(synced).duration);\n    return this.add(synced, { currentTime: [0, duration], duration, ease: 'linear' }, position);\n  }\n\n  /**\n   * @param  {TargetsParam} targets\n   * @param  {AnimationParams} parameters\n   * @param  {TimePosition} [position]\n   * @return {this}\n   */\n  set(targets, parameters, position) {\n    if (isUnd(parameters)) return this;\n    parameters.duration = minValue;\n    parameters.composition = compositionTypes.replace;\n    return this.add(targets, parameters, position);\n  }\n\n  /**\n   * @param {Callback<Timer>} callback\n   * @param {TimePosition} [position]\n   * @return {this}\n   */\n  call(callback, position) {\n    if (isUnd(callback) || callback && !isFnc(callback)) return this;\n    return this.add({ duration: 0, onComplete: () => callback(this) }, position);\n  }\n\n  /**\n   * @param {String} labelName\n   * @param {TimePosition} [position]\n   * @return {this}\n   *\n   */\n  label(labelName, position) {\n    if (isUnd(labelName) || labelName && !isStr(labelName)) return this;\n    this.labels[labelName] = parseTimelinePosition(this,/** @type TimePosition */(position));\n    return this;\n  }\n\n  /**\n   * @param  {TargetsParam} targets\n   * @param  {String} [propertyName]\n   * @return {this}\n   */\n  remove(targets, propertyName) {\n    remove(targets, this, propertyName);\n    return this;\n  }\n\n  /**\n   * @param  {Number} newDuration\n   * @return {this}\n   */\n  stretch(newDuration) {\n    const currentDuration = this.duration;\n    if (currentDuration === clampZero(newDuration)) return this;\n    const timeScale = newDuration / currentDuration;\n    const labels = this.labels;\n    forEachChildren(this, (/** @type {JSAnimation} */child) => {\n      child.stretch(child.duration * timeScale);\n    });\n    for (let labelName in labels) {\n      labels[labelName] *= timeScale;\n    }\n    return super.stretch(newDuration);\n  }\n\n  /**\n   * @return {this}\n   */\n  refresh() {\n    forEachChildren(this, (/** @type {JSAnimation} */child) => {\n      if (child.refresh) child.refresh();\n    });\n    return this;\n  }\n\n  /**\n   * @return {this}\n   */\n  revert() {\n    super.revert();\n    forEachChildren(this, (/** @type {JSAnimation} */child) => child.revert, true);\n    return cleanInlineStyles(this);\n  }\n\n  /**\n   * @param  {Callback<this>} [callback]\n   * @return {Promise}\n   */\n  then(callback) {\n    return super.then(callback);\n  }\n}\n\n/**\n * @param {TimelineParams} [parameters]\n * @return {Timeline}\n */\nconst createTimeline = parameters => new Timeline(parameters).init();\n\n\n\n\nclass Animatable {\n  /**\n   * @param {TargetsParam} targets\n   * @param {AnimatableParams} parameters\n   */\n  constructor(targets, parameters) {\n    if (globals.scope) globals.scope.revertibles.push(this);\n    /** @type {AnimationParams} */\n    const globalParams = {};\n    const properties = {};\n    this.targets = [];\n    this.animations = {};\n    if (isUnd(targets) || isUnd(parameters)) return;\n    for (let propName in parameters) {\n      const paramValue = parameters[propName];\n      if (isKey(propName)) {\n        properties[propName] = paramValue;\n      } else {\n        globalParams[propName] = paramValue;\n      }\n    }\n    for (let propName in properties) {\n      const propValue = properties[propName];\n      const isObjValue = isObj(propValue);\n      /** @type {TweenParamsOptions} */\n      let propParams = {};\n      let to = '+=0';\n      if (isObjValue) {\n        const unit = propValue.unit;\n        if (isStr(unit)) to += unit;\n      } else {\n        propParams.duration = propValue;\n      }\n      propParams[propName] = isObjValue ? mergeObjects({ to }, propValue) : to;\n      const animParams = mergeObjects(globalParams, propParams);\n      animParams.composition = compositionTypes.replace;\n      animParams.autoplay = false;\n      const animation = this.animations[propName] = new JSAnimation(targets, animParams, null, 0, false).init();\n      if (!this.targets.length) this.targets.push(...animation.targets);\n      /** @type {AnimatableProperty} */\n      this[propName] = (to, duration, ease) => {\n        const tween = /** @type {Tween} */(animation._head);\n        if (isUnd(to) && tween) {\n          const numbers = tween._numbers;\n          if (numbers && numbers.length) {\n            return numbers;\n          } else {\n            return tween._modifier(tween._number);\n          }\n        } else {\n          forEachChildren(animation, (/** @type {Tween} */tween) => {\n            if (isArr(to)) {\n              for (let i = 0, l = /** @type {Array} */(to).length; i < l; i++) {\n                if (!isUnd(tween._numbers[i])) {\n                  tween._fromNumbers[i] = /** @type {Number} */(tween._modifier(tween._numbers[i]));\n                  tween._toNumbers[i] = to[i];\n                }\n              }\n            } else {\n              tween._fromNumber = /** @type {Number} */(tween._modifier(tween._number));\n              tween._toNumber = /** @type {Number} */(to);\n            }\n            if (!isUnd(ease)) tween._ease = parseEasings(ease);\n            tween._currentTime = 0;\n          });\n          if (!isUnd(duration)) animation.stretch(duration);\n          animation.reset(1).resume();\n          return this;\n        }\n      };\n    }\n  }\n\n  revert() {\n    for (let propName in this.animations) {\n      this[propName] = noop;\n      this.animations[propName].revert();\n    }\n    this.animations = {};\n    this.targets.length = 0;\n    return this;\n  }\n}\n\n/**\n * @param {TargetsParam} targets\n * @param {AnimatableParams} parameters\n * @return {AnimatableObject}\n */\nconst createAnimatable = (targets, parameters) => /** @type {AnimatableObject} */(new Animatable(targets, parameters));\n\n\n\n\n/*\n * Spring ease solver adapted from https://webkit.org/demos/spring/spring.js\n * Webkit Copyright \u00A9 2016 Apple Inc\n */\n\n/**\n * @typedef {Object} SpringParams\n * @property {Number} [mass=1] - Mass, default 1\n * @property {Number} [stiffness=100] - Stiffness, default 100\n * @property {Number} [damping=10] - Damping, default 10\n * @property {Number} [velocity=0] - Initial velocity, default 0\n */\n\nclass Spring {\n  /**\n   * @param {SpringParams} [parameters]\n   */\n  constructor(parameters = {}) {\n    this.timeStep = .02; // Interval fed to the solver to calculate duration\n    this.restThreshold = .0005; // Values below this threshold are considered resting position\n    this.restDuration = 200; // Duration in ms used to check if the spring is resting after reaching restThreshold\n    this.maxDuration = 60000; // The maximum allowed spring duration in ms (default 1 min)\n    this.maxRestSteps = this.restDuration / this.timeStep / K; // How many steps allowed after reaching restThreshold before stopping the duration calculation\n    this.maxIterations = this.maxDuration / this.timeStep / K; // Calculate the maximum iterations allowed based on maxDuration\n    this.m = clamp(setValue(parameters.mass, 1), 0, K);\n    this.s = clamp(setValue(parameters.stiffness, 100), 1, K);\n    this.d = clamp(setValue(parameters.damping, 10), .1, K);\n    this.v = clamp(setValue(parameters.velocity, 0), -1e3, K);\n    this.w0 = 0;\n    this.zeta = 0;\n    this.wd = 0;\n    this.b = 0;\n    this.solverDuration = 0;\n    this.duration = 0;\n    this.compute();\n    /** @type {EasingFunction} */\n    this.ease = t => t === 0 || t === 1 ? t : this.solve(t * this.solverDuration);\n  }\n\n  /** @type {EasingFunction} */\n  solve(time) {\n    const { zeta, w0, wd, b } = this;\n    let t = time;\n    if (zeta < 1) {\n      t = exp(-t * zeta * w0) * (1 * cos(wd * t) + b * sin(wd * t));\n    } else {\n      t = (1 + b * t) * exp(-t * w0);\n    }\n    return 1 - t;\n  }\n\n  compute() {\n    const { maxRestSteps, maxIterations, restThreshold, timeStep, m, d, s, v } = this;\n    const w0 = this.w0 = clamp(sqrt(s / m), minValue, K);\n    const zeta = this.zeta = d / (2 * sqrt(s * m));\n    const wd = this.wd = zeta < 1 ? w0 * sqrt(1 - zeta * zeta) : 0;\n    this.b = zeta < 1 ? (zeta * w0 + -v) / wd : -v + w0;\n    let solverTime = 0;\n    let restSteps = 0;\n    let iterations = 0;\n    while (restSteps < maxRestSteps && iterations < maxIterations) {\n      if (abs(1 - this.solve(solverTime)) < restThreshold) {\n        restSteps++;\n      } else {\n        restSteps = 0;\n      }\n      this.solverDuration = solverTime;\n      solverTime += timeStep;\n      iterations++;\n    }\n    this.duration = round(this.solverDuration * K, 0) * globals.timeScale;\n  }\n\n  get mass() {\n    return this.m;\n  }\n\n  set mass(v) {\n    this.m = clamp(setValue(v, 1), 0, K);\n    this.compute();\n  }\n\n  get stiffness() {\n    return this.s;\n  }\n\n  set stiffness(v) {\n    this.s = clamp(setValue(v, 100), 1, K);\n    this.compute();\n  }\n\n  get damping() {\n    return this.d;\n  }\n\n  set damping(v) {\n    this.d = clamp(setValue(v, 10), .1, K);\n    this.compute();\n  }\n\n  get velocity() {\n    return this.v;\n  }\n\n  set velocity(v) {\n    this.v = clamp(setValue(v, 0), -1e3, K);\n    this.compute();\n  }\n}\n\n/**\n * @param {SpringParams} [parameters]\n * @returns {Spring}\n */\nconst createSpring = (parameters) => new Spring(parameters);\n\n\n\n\n/**\n * @param {Event} e\n */\nconst preventDefault = e => {\n  if (e.cancelable) e.preventDefault();\n};\n\nclass DOMProxy {\n  /** @param {Object} el */\n  constructor(el) {\n    this.el = el;\n    this.zIndex = 0;\n    this.parentElement = null;\n    this.classList = {\n      add: noop,\n      remove: noop,\n    };\n  }\n\n  get x() { return this.el.x || 0 };\n  set x(v) { this.el.x = v; };\n\n  get y() { return this.el.y || 0 };\n  set y(v) { this.el.y = v; };\n\n  get width() { return this.el.width || 0 };\n  set width(v) { this.el.width = v; };\n\n  get height() { return this.el.height || 0 };\n  set height(v) { this.el.height = v; };\n\n  getBoundingClientRect() {\n    return {\n      top: this.y,\n      right: this.x,\n      bottom: this.y + this.height,\n      left: this.x + this.width,\n    }\n  }\n}\n\nclass Transforms {\n  /**\n   * @param {DOMTarget|DOMProxy} $el\n   */\n  constructor($el) {\n    this.$el = $el;\n    this.inlineTransforms = [];\n    this.point = new DOMPoint();\n    this.inversedMatrix = this.getMatrix().inverse();\n  }\n\n  /**\n   * @param {Number} x\n   * @param {Number} y\n   * @return {DOMPoint}\n   */\n  normalizePoint(x, y) {\n    this.point.x = x;\n    this.point.y = y;\n    return this.point.matrixTransform(this.inversedMatrix);\n  }\n\n  /**\n   * @callback TraverseParentsCallback\n   * @param {DOMTarget} $el\n   * @param {Number} i\n   */\n\n  /**\n   * @param {TraverseParentsCallback} cb\n   */\n  traverseUp(cb) {\n    let $el = /** @type {DOMTarget|Document} */(this.$el.parentElement), i = 0;\n    while ($el && $el !== doc) {\n      cb(/** @type {DOMTarget} */($el), i);\n      $el = /** @type {DOMTarget} */($el.parentElement);\n      i++;\n    }\n  }\n\n  getMatrix() {\n    const matrix = new DOMMatrix();\n    this.traverseUp($el => {\n      const transformValue = getComputedStyle($el).transform;\n      if (transformValue) {\n        const elMatrix = new DOMMatrix(transformValue);\n        matrix.preMultiplySelf(elMatrix);\n      }\n    });\n    return matrix;\n  }\n\n  remove() {\n    this.traverseUp(($el, i) => {\n      this.inlineTransforms[i] = $el.style.transform;\n      $el.style.transform = 'none';\n    });\n  }\n\n  revert() {\n    this.traverseUp(($el, i) => {\n      const ct = this.inlineTransforms[i];\n      if (ct === '') {\n        $el.style.removeProperty('transform');\n      } else {\n        $el.style.transform = ct;\n      }\n    });\n  }\n}\n\n/**\n * @typedef {Object} DraggableCursorParams\n * @property {String} [onHover]\n * @property {String} [onGrab]\n */\n\n/**\n * @template {Array<Number>|DOMTargetSelector|String|Number|Boolean|Function|DraggableCursorParams} T\n * @param {T | ((draggable: Draggable) => T)} value\n * @param {Draggable} draggable\n * @return {T}\n */\nconst parseDraggableFunctionParameter = (value, draggable) => value && isFnc(value) ? /** @type {Function} */(value)(draggable) : value;\n\nlet zIndex = 0;\n\n/**\n * @typedef {Object} DraggableAxisParam\n * @property {String} [mapTo]\n * @property {TweenModifier} [modifier]\n * @property {TweenComposition} [composition]\n * @property {Number|Array<Number>|((draggable: Draggable) => Number|Array<Number>)} [snap]\n */\n\n/**\n * @typedef {Object} DraggableParams\n * @property {DOMTargetSelector} [trigger]\n * @property {DOMTargetSelector|Array<Number>|((draggable: Draggable) => DOMTargetSelector|Array<Number>)} [container]\n * @property {Boolean|DraggableAxisParam} [x]\n * @property {Boolean|DraggableAxisParam} [y]\n * @property {TweenModifier} [modifier]\n * @property {Number|Array<Number>|((draggable: Draggable) => Number|Array<Number>)} [snap]\n * @property {Number|Array<Number>|((draggable: Draggable) => Number|Array<Number>)} [containerPadding]\n * @property {Number|((draggable: Draggable) => Number)} [containerFriction]\n * @property {Number|((draggable: Draggable) => Number)} [releaseContainerFriction]\n * @property {Number|((draggable: Draggable) => Number)} [dragSpeed]\n * @property {Number|((draggable: Draggable) => Number)} [scrollSpeed]\n * @property {Number|((draggable: Draggable) => Number)} [scrollThreshold]\n * @property {Number|((draggable: Draggable) => Number)} [minVelocity]\n * @property {Number|((draggable: Draggable) => Number)} [maxVelocity]\n * @property {Number|((draggable: Draggable) => Number)} [velocityMultiplier]\n * @property {Number} [releaseMass]\n * @property {Number} [releaseStiffness]\n * @property {Number} [releaseDamping]\n * @property {Boolean} [releaseDamping]\n * @property {EasingParam} [releaseEase]\n * @property {Boolean|DraggableCursorParams|((draggable: Draggable) => Boolean|DraggableCursorParams)} [cursor]\n * @property {Callback<Draggable>} [onGrab]\n * @property {Callback<Draggable>} [onDrag]\n * @property {Callback<Draggable>} [onRelease]\n * @property {Callback<Draggable>} [onUpdate]\n * @property {Callback<Draggable>} [onSettle]\n * @property {Callback<Draggable>} [onSnap]\n * @property {Callback<Draggable>} [onResize]\n * @property {Callback<Draggable>} [onAfterResize]\n */\n\nclass Draggable {\n  /**\n   * @param {TargetsParam} target\n   * @param {DraggableParams} [parameters]\n   */\n  constructor(target, parameters = {}) {\n    if (!target) return;\n    if (globals.scope) globals.scope.revertibles.push(this);\n    const paramX = parameters.x;\n    const paramY = parameters.y;\n    const trigger = parameters.trigger;\n    const modifier = parameters.modifier;\n    const ease = parameters.releaseEase;\n    const customEase = ease && parseEasings(ease);\n    const hasSpring = !isUnd(ease) && !isUnd(/** @type {Spring} */(ease).ease);\n    const xProp = /** @type {String} */(isObj(paramX) && !isUnd(/** @type {Object} */(paramX).mapTo) ? /** @type {Object} */(paramX).mapTo : 'translateX');\n    const yProp = /** @type {String} */(isObj(paramY) && !isUnd(/** @type {Object} */(paramY).mapTo) ? /** @type {Object} */(paramY).mapTo : 'translateY');\n    const container = parseDraggableFunctionParameter(parameters.container, this);\n    this.containerArray = isArr(container) ? container : null;\n    this.$container = /** @type {HTMLElement} */(container && !this.containerArray ? parseTargets(/** @type {DOMTarget} */(container))[0] : doc.body);\n    this.useWin = this.$container === doc.body;\n    /** @type {Window | HTMLElement} */\n    this.$scrollContainer = this.useWin ? win : this.$container;\n    this.$target = /** @type {HTMLElement} */(isObj(target) ? new DOMProxy(target) : parseTargets(target)[0]);\n    this.$trigger = /** @type {HTMLElement} */(parseTargets(trigger ? trigger : target)[0]);\n    this.fixed = getTargetValue(this.$target, 'position') === 'fixed';\n    // Refreshable parameters\n    this.isFinePointer = true;\n    /** @type {[Number, Number, Number, Number]} */\n    this.containerPadding = [0, 0, 0, 0];\n    /** @type {Number} */\n    this.containerFriction = 0;\n    /** @type {Number} */\n    this.releaseContainerFriction = 0;\n    /** @type {Number|Array<Number>} */\n    this.snapX = 0;\n    /** @type {Number|Array<Number>} */\n    this.snapY = 0;\n    /** @type {Number} */\n    this.scrollSpeed = 0;\n    /** @type {Number} */\n    this.scrollThreshold = 0;\n    /** @type {Number} */\n    this.dragSpeed = 0;\n    /** @type {Number} */\n    this.maxVelocity = 0;\n    /** @type {Number} */\n    this.minVelocity = 0;\n    /** @type {Number} */\n    this.velocityMultiplier = 0;\n    /** @type {Boolean|DraggableCursorParams} */\n    this.cursor = false;\n    /** @type {Spring} */\n    this.releaseXSpring = hasSpring ? /** @type {Spring} */(ease) : createSpring({\n      mass: setValue(parameters.releaseMass, 1),\n      stiffness: setValue(parameters.releaseStiffness, 80),\n      damping: setValue(parameters.releaseDamping, 20),\n    });\n    /** @type {Spring} */\n    this.releaseYSpring = hasSpring ? /** @type {Spring} */(ease) : createSpring({\n      mass: setValue(parameters.releaseMass, 1),\n      stiffness: setValue(parameters.releaseStiffness, 80),\n      damping: setValue(parameters.releaseDamping, 20),\n    });\n    /** @type {EasingFunction} */\n    this.releaseEase = customEase || eases.outQuint;\n    /** @type {Boolean} */\n    this.hasReleaseSpring = hasSpring;\n    /** @type {Callback<this>} */\n    this.onGrab = parameters.onGrab || noop;\n    /** @type {Callback<this>} */\n    this.onDrag = parameters.onDrag || noop;\n    /** @type {Callback<this>} */\n    this.onRelease = parameters.onRelease || noop;\n    /** @type {Callback<this>} */\n    this.onUpdate = parameters.onUpdate || noop;\n    /** @type {Callback<this>} */\n    this.onSettle = parameters.onSettle || noop;\n    /** @type {Callback<this>} */\n    this.onSnap = parameters.onSnap || noop;\n    /** @type {Callback<this>} */\n    this.onResize = parameters.onResize || noop;\n    /** @type {Callback<this>} */\n    this.onAfterResize = parameters.onAfterResize || noop;\n    /** @type {[Number, Number]} */\n    this.disabled = [0, 0];\n    /** @type {AnimatableParams} */\n    const animatableParams = {};\n    if (modifier) animatableParams.modifier = modifier;\n    if (isUnd(paramX) || paramX === true) {\n      animatableParams[xProp] = 0;\n    } else if (isObj(paramX)) {\n      const paramXObject = /** @type {DraggableAxisParam} */(paramX);\n      const animatableXParams = {};\n      if (paramXObject.modifier) animatableXParams.modifier = paramXObject.modifier;\n      if (paramXObject.composition) animatableXParams.composition = paramXObject.composition;\n      animatableParams[xProp] = animatableXParams;\n    } else if (paramX === false) {\n      animatableParams[xProp] = 0;\n      this.disabled[0] = 1;\n    }\n    if (isUnd(paramY) || paramY === true) {\n      animatableParams[yProp] = 0;\n    } else if (isObj(paramY)) {\n      const paramYObject = /** @type {DraggableAxisParam} */(paramY);\n      const animatableYParams = {};\n      if (paramYObject.modifier) animatableYParams.modifier = paramYObject.modifier;\n      if (paramYObject.composition) animatableYParams.composition = paramYObject.composition;\n      animatableParams[yProp] = animatableYParams;\n    } else if (paramY === false) {\n      animatableParams[yProp] = 0;\n      this.disabled[1] = 1;\n    }\n    /** @type {AnimatableObject} */\n    this.animate = /** @type {AnimatableObject} */(new Animatable(this.$target, animatableParams));\n    // Internal props\n    this.xProp = xProp;\n    this.yProp = yProp;\n    this.destX = 0;\n    this.destY = 0;\n    this.deltaX = 0;\n    this.deltaY = 0;\n    this.scroll = {x: 0, y: 0};\n    /** @type {[Number, Number, Number, Number]} */\n    this.coords = [this.x, this.y, 0, 0]; // x, y, temp x, temp y\n    /** @type {[Number, Number]} */\n    this.snapped = [0, 0]; // x, y\n    /** @type {[Number, Number, Number, Number, Number, Number, Number, Number]} */\n    this.pointer = [0, 0, 0, 0, 0, 0, 0, 0]; // x1, y1, x2, y2, temp x1, temp y1, temp x2, temp y2\n    /** @type {[Number, Number]} */\n    this.scrollView = [0, 0]; // w, h\n    /** @type {[Number, Number, Number, Number]} */\n    this.dragArea = [0, 0, 0, 0]; // x, y, w, h\n    /** @type {[Number, Number, Number, Number]} */\n    this.containerBounds = [-1e12, maxValue, maxValue, -1e12]; // t, r, b, l\n    /** @type {[Number, Number, Number, Number]} */\n    this.scrollBounds = [0, 0, 0, 0]; // t, r, b, l\n    /** @type {[Number, Number, Number, Number]} */\n    this.targetBounds = [0, 0, 0, 0]; // t, r, b, l\n    /** @type {[Number, Number]} */\n    this.window = [0, 0]; // w, h\n    /** @type {[Number, Number, Number]} */\n    this.velocityStack = [0, 0, 0];\n    /** @type {Number} */\n    this.velocityStackIndex = 0;\n    /** @type {Number} */\n    this.velocityTime = now();\n    /** @type {Number} */\n    this.velocity = 0;\n    /** @type {Number} */\n    this.angle = 0;\n    /** @type {JSAnimation} */\n    this.cursorStyles = null;\n    /** @type {JSAnimation} */\n    this.triggerStyles = null;\n    /** @type {JSAnimation} */\n    this.bodyStyles = null;\n    /** @type {JSAnimation} */\n    this.targetStyles = null;\n    /** @type {JSAnimation} */\n    this.touchActionStyles = null;\n    this.transforms = new Transforms(this.$target);\n    this.overshootCoords = { x: 0, y: 0 };\n    this.overshootXTicker = new Timer({ autoplay: false }, null, 0).init();\n    this.overshootYTicker = new Timer({ autoplay: false }, null, 0).init();\n    this.updateTicker = new Timer({ autoplay: false }, null, 0).init();\n    this.overshootXTicker.onUpdate = () => {\n      if (this.disabled[0]) return;\n      this.updated = true;\n      this.manual = true;\n      this.animate[this.xProp](this.overshootCoords.x, 0);\n    };\n    this.overshootXTicker.onComplete = () => {\n      if (this.disabled[0]) return;\n      this.manual = false;\n      this.animate[this.xProp](this.overshootCoords.x, 0);\n    };\n    this.overshootYTicker.onUpdate = () => {\n      if (this.disabled[1]) return;\n      this.updated = true;\n      this.manual = true;\n      this.animate[this.yProp](this.overshootCoords.y, 0);\n    };\n    this.overshootYTicker.onComplete = () => {\n      if (this.disabled[1]) return;\n      this.manual = false;\n      this.animate[this.yProp](this.overshootCoords.y, 0);\n    };\n    this.updateTicker.onUpdate = () => this.update();\n    this.contained = !isUnd(container);\n    this.manual = false;\n    this.grabbed = false;\n    this.dragged = false;\n    this.updated = false;\n    this.released = false;\n    this.canScroll = false;\n    this.enabled = false;\n    this.initialized = false;\n    this.activeProp = this.disabled[0] ? yProp : xProp;\n    this.animate.animations[this.activeProp].onRender = () => {\n      const hasUpdated = this.updated;\n      const hasMoved = this.grabbed && hasUpdated;\n      const hasReleased = !hasMoved && this.released;\n      const x = this.x;\n      const y = this.y;\n      const dx = x - this.coords[2];\n      const dy = y - this.coords[3];\n      this.deltaX = dx;\n      this.deltaY = dy;\n      this.coords[2] = x;\n      this.coords[3] = y;\n      if (hasUpdated) {\n        this.onUpdate(this);\n      }\n      if (!hasReleased) {\n        this.updated = false;\n      } else {\n        this.computeVelocity(dx, dy);\n        this.angle = atan2(dy, dx);\n      }\n    };\n    this.animate.animations[this.activeProp].onComplete = () => {\n      if ((!this.grabbed && this.released)) {\n        // Set eleased to false before calling onSettle to avoid recursion\n        this.released = false;\n      }\n      if (!this.manual) {\n        this.deltaX = 0;\n        this.deltaY = 0;\n        this.velocity = 0;\n        this.velocityStack[0] = 0;\n        this.velocityStack[1] = 0;\n        this.velocityStack[2] = 0;\n        this.velocityStackIndex = 0;\n        this.onSettle(this);\n      }\n    };\n    this.resizeTicker = new Timer({\n      autoplay: false,\n      duration: 150 * globals.timeScale,\n      onComplete: () => {\n        this.onResize(this);\n        this.refresh();\n        this.onAfterResize(this);\n      },\n    }).init();\n    this.parameters = parameters;\n    this.resizeObserver = new ResizeObserver(() => {\n      if (this.initialized) {\n        this.resizeTicker.restart();\n      } else {\n        this.initialized = true;\n      }\n    });\n    this.enable();\n    this.refresh();\n    this.resizeObserver.observe(this.$container);\n    if (!isObj(target)) this.resizeObserver.observe(this.$target);\n  }\n\n  /**\n   * @param  {Number} dx\n   * @param  {Number} dy\n   * @return {Number}\n   */\n  computeVelocity(dx, dy) {\n    const prevTime = this.velocityTime;\n    const curTime = now();\n    const elapsed = curTime - prevTime;\n    if (elapsed < 17) return this.velocity;\n    this.velocityTime = curTime;\n    const velocityStack = this.velocityStack;\n    const vMul = this.velocityMultiplier;\n    const minV = this.minVelocity;\n    const maxV = this.maxVelocity;\n    const vi = this.velocityStackIndex;\n    velocityStack[vi] = round(clamp((sqrt(dx * dx + dy * dy) / elapsed) * vMul, minV, maxV), 5);\n    const velocity = max(velocityStack[0], velocityStack[1], velocityStack[2]);\n    this.velocity = velocity;\n    this.velocityStackIndex = (vi + 1) % 3;\n    return velocity;\n  }\n\n  /**\n   * @param {Number}  x\n   * @param {Boolean} [muteUpdateCallback]\n   * @return {this}\n   */\n  setX(x, muteUpdateCallback = false) {\n    if (this.disabled[0]) return;\n    const v = round(x, 5);\n    this.overshootXTicker.pause();\n    this.manual = true;\n    this.updated = !muteUpdateCallback;\n    this.destX = v;\n    this.snapped[0] = snap(v, this.snapX);\n    this.animate[this.xProp](v, 0);\n    this.manual = false;\n    return this;\n  }\n\n  /**\n   * @param {Number}  y\n   * @param {Boolean} [muteUpdateCallback]\n   * @return {this}\n   */\n  setY(y, muteUpdateCallback = false) {\n    if (this.disabled[1]) return;\n    const v = round(y, 5);\n    this.overshootYTicker.pause();\n    this.manual = true;\n    this.updated = !muteUpdateCallback;\n    this.destY = v;\n    this.snapped[1] = snap(v, this.snapY);\n    this.animate[this.yProp](v, 0);\n    this.manual = false;\n    return this;\n  }\n\n  get x() {\n    return round(/** @type {Number} */(this.animate[this.xProp]()), globals.precision);\n  }\n\n  set x(x) {\n    this.setX(x, false);\n  }\n\n  get y() {\n    return round(/** @type {Number} */(this.animate[this.yProp]()), globals.precision);\n  }\n\n  set y(y) {\n    this.setY(y, false);\n  }\n\n  get progressX() {\n    return mapRange(this.x, this.containerBounds[3], this.containerBounds[1], 0, 1);\n  }\n\n  set progressX(x) {\n    this.setX(mapRange(x, 0, 1, this.containerBounds[3], this.containerBounds[1]), false);\n  }\n\n  get progressY() {\n    return mapRange(this.y, this.containerBounds[0], this.containerBounds[2], 0, 1);\n  }\n\n  set progressY(y) {\n    this.setY(mapRange(y, 0, 1, this.containerBounds[0], this.containerBounds[2]), false);\n  }\n\n  updateScrollCoords() {\n    const sx = round(this.useWin ? win.scrollX : this.$container.scrollLeft, 0);\n    const sy = round(this.useWin ? win.scrollY : this.$container.scrollTop, 0);\n    const [ cpt, cpr, cpb, cpl ] = this.containerPadding;\n    const threshold = this.scrollThreshold;\n    this.scroll.x = sx;\n    this.scroll.y = sy;\n    this.scrollBounds[0] = sy - this.targetBounds[0] + cpt - threshold;\n    this.scrollBounds[1] = sx - this.targetBounds[1] - cpr + threshold;\n    this.scrollBounds[2] = sy - this.targetBounds[2] - cpb + threshold;\n    this.scrollBounds[3] = sx - this.targetBounds[3] + cpl - threshold;\n  }\n\n  updateBoundingValues() {\n    const $container = this.$container;\n    const cx = this.x;\n    const cy = this.y;\n    const cx2 = this.coords[2];\n    const cy2 =  this.coords[3];\n    // Prevents interfering with the scroll area in cases the target is outside of the container\n    // Make sure the temp coords are also adjuset to prevents wrong delta calculation on updates\n    this.coords[2] = 0;\n    this.coords[3] = 0;\n    this.setX(0, true);\n    this.setY(0, true);\n    this.transforms.remove();\n    const iw = this.window[0] = win.innerWidth;\n    const ih = this.window[1] = win.innerHeight;\n    const uw = this.useWin;\n    const sw = $container.scrollWidth;\n    const sh = $container.scrollHeight;\n    const fx = this.fixed;\n    const transformContainerRect = $container.getBoundingClientRect();\n    const [ cpt, cpr, cpb, cpl ] = this.containerPadding;\n    this.dragArea[0] = uw ? 0 : transformContainerRect.left;\n    this.dragArea[1] = uw ? 0 : transformContainerRect.top;\n    this.scrollView[0] = uw ? clamp(sw, iw, sw) : sw;\n    this.scrollView[1] = uw ? clamp(sh, ih, sh) : sh;\n    this.updateScrollCoords();\n    const { width, height, left, top, right, bottom } = $container.getBoundingClientRect();\n    this.dragArea[2] = round(uw ? clamp(width, iw, iw) : width, 0);\n    this.dragArea[3] = round(uw ? clamp(height, ih, ih) : height, 0);\n    const containerOverflow = getTargetValue($container, 'overflow');\n    const visibleOverflow = containerOverflow === 'visible';\n    const hiddenOverflow = containerOverflow === 'hidden';\n    this.canScroll = fx ? false :\n      this.contained &&\n      (($container === doc.body && visibleOverflow) || (!hiddenOverflow && !visibleOverflow)) &&\n      (sw > this.dragArea[2] + cpl - cpr || sh > this.dragArea[3] + cpt - cpb) &&\n      (!this.containerArray || (this.containerArray && !isArr(this.containerArray)));\n    if (this.contained) {\n      const sx = this.scroll.x;\n      const sy = this.scroll.y;\n      const canScroll = this.canScroll;\n      const targetRect = this.$target.getBoundingClientRect();\n      const hiddenLeft = canScroll ? uw ? 0 : $container.scrollLeft : 0;\n      const hiddenTop = canScroll ? uw ? 0 : $container.scrollTop : 0;\n      const hiddenRight = canScroll ? this.scrollView[0] - hiddenLeft - width : 0;\n      const hiddenBottom = canScroll ? this.scrollView[1] - hiddenTop - height : 0;\n      this.targetBounds[0] = round((targetRect.top + sy) - (uw ? 0 : top), 0);\n      this.targetBounds[1] = round((targetRect.right + sx) - (uw ? iw : right), 0);\n      this.targetBounds[2] = round((targetRect.bottom + sy) - (uw ? ih : bottom), 0);\n      this.targetBounds[3] = round((targetRect.left + sx) - (uw ? 0 : left), 0);\n      if (this.containerArray) {\n        this.containerBounds[0] = this.containerArray[0] + cpt;\n        this.containerBounds[1] = this.containerArray[1] - cpr;\n        this.containerBounds[2] = this.containerArray[2] - cpb;\n        this.containerBounds[3] = this.containerArray[3] + cpl;\n      } else {\n        this.containerBounds[0] = -round(targetRect.top - (fx ? clamp(top, 0, ih) : top) + hiddenTop - cpt, 0);\n        this.containerBounds[1] = -round(targetRect.right - (fx ? clamp(right, 0, iw) : right) - hiddenRight + cpr, 0);\n        this.containerBounds[2] = -round(targetRect.bottom - (fx ? clamp(bottom, 0, ih) : bottom) - hiddenBottom + cpb, 0);\n        this.containerBounds[3] = -round(targetRect.left - (fx ? clamp(left, 0, iw) : left) + hiddenLeft - cpl, 0);\n      }\n    }\n    this.transforms.revert();\n    // Restore coordinates\n    this.coords[2] = cx2;\n    this.coords[3] = cy2;\n    this.setX(cx, true);\n    this.setY(cy, true);\n  }\n\n  /**\n   * Returns 0 if not OB, 1 if x is OB, 2 if y is OB, 3 if both x and y are OB\n   *\n   * @param  {Array} bounds\n   * @param  {Number} x\n   * @param  {Number} y\n   * @return {Number}\n   */\n  isOutOfBounds(bounds, x, y) {\n    if (!this.contained) return 0;\n    const [ bt, br, bb, bl ] = bounds;\n    const [ dx, dy ] = this.disabled;\n    const obx = !dx && x < bl || !dx && x > br;\n    const oby = !dy && y < bt || !dy && y > bb;\n    return obx && !oby ? 1 : !obx && oby ? 2 : obx && oby ? 3 : 0;\n  }\n\n  refresh() {\n    const params = this.parameters;\n    const paramX = params.x;\n    const paramY = params.y;\n    const container = parseDraggableFunctionParameter(params.container, this);\n    const cp = parseDraggableFunctionParameter(params.containerPadding, this) || 0;\n    const containerPadding = /** @type {[Number, Number, Number, Number]} */(isArr(cp) ? cp : [cp, cp, cp, cp]);\n    const cx = this.x;\n    const cy = this.y;\n    const parsedCursorStyles = parseDraggableFunctionParameter(params.cursor, this);\n    const cursorStyles = { onHover: 'grab', onGrab: 'grabbing' };\n    if (parsedCursorStyles) {\n      const { onHover, onGrab } = /** @type {DraggableCursorParams} */(parsedCursorStyles);\n      if (onHover) cursorStyles.onHover = onHover;\n      if (onGrab) cursorStyles.onGrab = onGrab;\n    }\n    this.containerArray = isArr(container) ? container : null;\n    this.$container = /** @type {HTMLElement} */(container && !this.containerArray ? parseTargets(/** @type {DOMTarget} */(container))[0] : doc.body);\n    this.useWin = this.$container === doc.body;\n    /** @type {Window | HTMLElement} */\n    this.$scrollContainer = this.useWin ? win : this.$container;\n    this.isFinePointer = matchMedia('(pointer:fine)').matches;\n    this.containerPadding = setValue(containerPadding, [0, 0, 0, 0]);\n    this.containerFriction = clamp(setValue(parseDraggableFunctionParameter(params.containerFriction, this), .8), 0, 1);\n    this.releaseContainerFriction = clamp(setValue(parseDraggableFunctionParameter(params.releaseContainerFriction, this), this.containerFriction), 0, 1);\n    this.snapX = parseDraggableFunctionParameter(isObj(paramX) && !isUnd(paramX.snap) ? paramX.snap : params.snap, this);\n    this.snapY = parseDraggableFunctionParameter(isObj(paramY) && !isUnd(paramY.snap) ? paramY.snap : params.snap, this);\n    this.scrollSpeed = setValue(parseDraggableFunctionParameter(params.scrollSpeed, this), 1.5);\n    this.scrollThreshold = setValue(parseDraggableFunctionParameter(params.scrollThreshold, this), 20);\n    this.dragSpeed = setValue(parseDraggableFunctionParameter(params.dragSpeed, this), 1);\n    this.minVelocity = setValue(parseDraggableFunctionParameter(params.minVelocity, this), 0);\n    this.maxVelocity = setValue(parseDraggableFunctionParameter(params.maxVelocity, this), 50);\n    this.velocityMultiplier = setValue(parseDraggableFunctionParameter(params.velocityMultiplier, this), 1);\n    this.cursor = parsedCursorStyles === false ? false : cursorStyles;\n    this.updateBoundingValues();\n\n    // const ob = this.isOutOfBounds(this.containerBounds, this.x, this.y);\n    // if (ob === 1 || ob === 3) this.progressX = px;\n    // if (ob === 2 || ob === 3) this.progressY = py;\n\n    // if (this.initialized && this.contained) {\n    //   if (this.progressX !== px) this.progressX = px;\n    //   if (this.progressY !== py) this.progressY = py;\n    // }\n\n    const [ bt, br, bb, bl ] = this.containerBounds;\n    this.setX(clamp(cx, bl, br), true);\n    this.setY(clamp(cy, bt, bb), true);\n  }\n\n  update() {\n    this.updateScrollCoords();\n    if (this.canScroll) {\n      const [ cpt, cpr, cpb, cpl ] = this.containerPadding;\n      const [ sw, sh ] = this.scrollView;\n      const daw = this.dragArea[2];\n      const dah = this.dragArea[3];\n      const csx = this.scroll.x;\n      const csy = this.scroll.y;\n      const nsw = this.$container.scrollWidth;\n      const nsh = this.$container.scrollHeight;\n      const csw = this.useWin ? clamp(nsw, this.window[0], nsw) : nsw;\n      const csh = this.useWin ? clamp(nsh, this.window[1], nsh) : nsh;\n      const swd = sw - csw;\n      const shd = sh - csh;\n      // Handle cases where the scrollarea dimensions changes during drag\n      if (this.dragged && swd > 0) {\n        this.coords[0] -= swd;\n        this.scrollView[0] = csw;\n      }\n      if (this.dragged && shd > 0) {\n        this.coords[1] -= shd;\n        this.scrollView[1] = csh;\n      }\n      // Handle autoscroll when target is at the edges of the scroll bounds\n      const s = this.scrollSpeed * 10;\n      const threshold = this.scrollThreshold;\n      const [ x, y ] = this.coords;\n      const [ st, sr, sb, sl ] = this.scrollBounds;\n      const t = round(clamp((y - st + cpt) / threshold, -1, 0) * s, 0);\n      const r = round(clamp((x - sr - cpr) / threshold, 0, 1) * s, 0);\n      const b = round(clamp((y - sb - cpb) / threshold, 0, 1) * s, 0);\n      const l = round(clamp((x - sl + cpl) / threshold, -1, 0) * s, 0);\n      if (t || b || l || r) {\n        const [nx, ny] = this.disabled;\n        let scrollX = csx;\n        let scrollY = csy;\n        if (!nx) {\n          scrollX = round(clamp(csx + (l || r), 0, sw - daw), 0);\n          this.coords[0] -= csx - scrollX;\n        }\n        if (!ny) {\n          scrollY = round(clamp(csy + (t || b), 0, sh - dah), 0);\n          this.coords[1] -= csy - scrollY;\n        }\n        // Note: Safari mobile requires to use different scroll methods depending if using the window or not\n        if (this.useWin) {\n          this.$scrollContainer.scrollBy(-(csx - scrollX), -(csy - scrollY));\n        } else {\n          this.$scrollContainer.scrollTo(scrollX, scrollY);\n        }\n      }\n    }\n    const [ ct, cr, cb, cl ] = this.containerBounds;\n    const [ px1, py1, px2, py2, px3, py3 ] = this.pointer;\n    this.coords[0] += (px1 - px3) * this.dragSpeed;\n    this.coords[1] += (py1 - py3) * this.dragSpeed;\n    this.pointer[4] = px1;\n    this.pointer[5] = py1;\n    const [ cx, cy ] = this.coords;\n    const [ sx, sy ] = this.snapped;\n    const cf = (1 - this.containerFriction) * this.dragSpeed;\n    this.setX(cx > cr ? cr + (cx - cr) * cf : cx < cl ? cl + (cx - cl) * cf : cx, false);\n    this.setY(cy > cb ? cb + (cy - cb) * cf : cy < ct ? ct + (cy - ct) * cf : cy, false);\n    this.computeVelocity(px1 - px3, py1 - py3);\n    this.angle = atan2(py1 - py2, px1 - px2);\n    const [ nsx, nsy ] = this.snapped;\n    if (nsx !== sx && this.snapX || nsy !== sy && this.snapY) {\n      this.onSnap(this);\n    }\n  }\n\n  stop() {\n    this.updateTicker.pause();\n    this.overshootXTicker.pause();\n    this.overshootYTicker.pause();\n    // Pauses the in bounds onRelease animations\n    for (let prop in this.animate.animations) this.animate.animations[prop].pause();\n    remove(this, null, 'x');\n    remove(this, null, 'y');\n    remove(this, null, 'progressX');\n    remove(this, null, 'progressY');\n    remove(this.scroll); // Removes any active animations on the container scroll\n    remove(this.overshootCoords); // Removes active overshoot animations\n    return this;\n  }\n\n  /**\n   * @param {Number} [duration]\n   * @param {Number} [gap]\n   * @param {EasingParam} [ease]\n   * @return {this}\n   */\n  scrollInView(duration, gap = 0, ease = eases.inOutQuad) {\n    this.updateScrollCoords();\n    const x = this.destX;\n    const y = this.destY;\n    const scroll = this.scroll;\n    const scrollBounds = this.scrollBounds;\n    const canScroll = this.canScroll;\n    if (!this.containerArray && this.isOutOfBounds(scrollBounds, x, y)) {\n      const [ st, sr, sb, sl ] = scrollBounds;\n      const t = round(clamp(y - st, -1e12, 0), 0);\n      const r = round(clamp(x - sr, 0, maxValue), 0);\n      const b = round(clamp(y - sb, 0, maxValue), 0);\n      const l = round(clamp(x - sl, -1e12, 0), 0);\n      new JSAnimation(scroll, {\n        x: round(scroll.x + (l ? l - gap : r ? r + gap : 0), 0),\n        y: round(scroll.y + (t ? t - gap : b ? b + gap : 0), 0),\n        duration: isUnd(duration) ? 350 * globals.timeScale : duration,\n        ease,\n        onUpdate: () => {\n          this.canScroll = false;\n          this.$scrollContainer.scrollTo(scroll.x, scroll.y);\n        }\n      }).init().then(() => {\n        this.canScroll = canScroll;\n      });\n    }\n    return this;\n  }\n\n  handleHover() {\n    if (this.isFinePointer && this.cursor && !this.cursorStyles) {\n      this.cursorStyles = setTargetValues(this.$trigger, {\n        cursor: /** @type {DraggableCursorParams} */(this.cursor).onHover\n      });\n    }\n  }\n\n  /**\n   * @param  {Number} [duration]\n   * @param  {Number} [gap]\n   * @param  {EasingParam} [ease]\n   * @return {this}\n   */\n  animateInView(duration, gap = 0, ease = eases.inOutQuad) {\n    this.stop();\n    this.updateBoundingValues();\n    const x = this.x;\n    const y = this.y;\n    const [ cpt, cpr, cpb, cpl ] = this.containerPadding;\n    const bt = this.scroll.y - this.targetBounds[0] + cpt + gap;\n    const br = this.scroll.x - this.targetBounds[1] - cpr - gap;\n    const bb = this.scroll.y - this.targetBounds[2] - cpb - gap;\n    const bl = this.scroll.x - this.targetBounds[3] + cpl + gap;\n    const ob = this.isOutOfBounds([bt, br, bb, bl], x, y);\n    if (ob) {\n      const [ disabledX, disabledY ] = this.disabled;\n      const destX = clamp(snap(x, this.snapX), bl, br);\n      const destY = clamp(snap(y, this.snapY), bt, bb);\n      const dur = isUnd(duration) ? 350 * globals.timeScale : duration;\n      if (!disabledX && (ob === 1 || ob === 3)) this.animate[this.xProp](destX, dur, ease);\n      if (!disabledY && (ob === 2 || ob === 3)) this.animate[this.yProp](destY, dur, ease);\n    }\n    return this;\n  }\n\n  /**\n   * @param {MouseEvent|TouchEvent} e\n   */\n  handleDown(e) {\n    const $eTarget = /** @type {HTMLElement} */(e.target);\n    if (this.grabbed || /** @type {HTMLInputElement}  */($eTarget).type === 'range') return;\n\n    e.stopPropagation();\n\n    this.grabbed = true;\n    this.released = false;\n    this.stop();\n    this.updateBoundingValues();\n    const touches = /** @type {TouchEvent} */(e).changedTouches;\n    const eventX = touches ? touches[0].clientX : /** @type {MouseEvent} */(e).clientX;\n    const eventY = touches ? touches[0].clientY : /** @type {MouseEvent} */(e).clientY;\n    const { x, y } = this.transforms.normalizePoint(eventX, eventY);\n    const [ ct, cr, cb, cl ] = this.containerBounds;\n    const cf = (1 - this.containerFriction) * this.dragSpeed;\n    const cx = this.x;\n    const cy = this.y;\n    this.coords[0] = this.coords[2] = !cf ? cx : cx > cr ? cr + (cx - cr) / cf : cx < cl ? cl + (cx - cl) / cf : cx;\n    this.coords[1] = this.coords[3] = !cf ? cy : cy > cb ? cb + (cy - cb) / cf : cy < ct ? ct + (cy - ct) / cf : cy;\n    this.pointer[0] = x;\n    this.pointer[1] = y;\n    this.pointer[2] = x;\n    this.pointer[3] = y;\n    this.pointer[4] = x;\n    this.pointer[5] = y;\n    this.pointer[6] = x;\n    this.pointer[7] = y;\n    this.deltaX = 0;\n    this.deltaY = 0;\n    this.velocity = 0;\n    this.velocityStack[0] = 0;\n    this.velocityStack[1] = 0;\n    this.velocityStack[2] = 0;\n    this.velocityStackIndex = 0;\n    this.angle = 0;\n    if (this.targetStyles) {\n      this.targetStyles.revert();\n      this.targetStyles = null;\n    }\n    const z = /** @type {Number} */(getTargetValue(this.$target, 'zIndex', false));\n    zIndex = (z > zIndex ? z : zIndex) + 1;\n    this.targetStyles = setTargetValues(this.$target, { zIndex });\n    if (this.triggerStyles) {\n      this.triggerStyles.revert();\n      this.triggerStyles = null;\n    }\n    if (this.cursorStyles) {\n      this.cursorStyles.revert();\n      this.cursorStyles = null;\n    }\n    if (this.isFinePointer && this.cursor) {\n      this.bodyStyles = setTargetValues(doc.body, {\n        cursor: /** @type {DraggableCursorParams} */(this.cursor).onGrab\n      });\n    }\n    this.scrollInView(100, 0, eases.out(3));\n    this.onGrab(this);\n\n    doc.addEventListener('touchmove', this);\n    doc.addEventListener('touchend', this);\n    doc.addEventListener('touchcancel', this);\n    doc.addEventListener('mousemove', this);\n    doc.addEventListener('mouseup', this);\n    doc.addEventListener('selectstart', this);\n  }\n\n  /**\n   * @param {MouseEvent|TouchEvent} e\n   */\n  handleMove(e) {\n    if (!this.grabbed) return;\n    const touches = /** @type {TouchEvent} */(e).changedTouches;\n    const eventX = touches ? touches[0].clientX : /** @type {MouseEvent} */(e).clientX;\n    const eventY = touches ? touches[0].clientY : /** @type {MouseEvent} */(e).clientY;\n    const { x, y } = this.transforms.normalizePoint(eventX, eventY);\n    const movedX = x - this.pointer[6];\n    const movedY = y - this.pointer[7];\n\n    let $parent = /** @type {HTMLElement} */(e.target);\n    let isAtTop = false;\n    let isAtBottom = false;\n    let canTouchScroll = false;\n\n    while (touches && $parent && $parent !== this.$trigger) {\n      const overflowY = getTargetValue($parent, 'overflow-y');\n      if (overflowY !== 'hidden' && overflowY !== 'visible') {\n        const { scrollTop, scrollHeight, clientHeight } = $parent;\n        if (scrollHeight > clientHeight) {\n          canTouchScroll = true;\n          isAtTop = scrollTop <= 3;\n          isAtBottom = scrollTop >= (scrollHeight - clientHeight) - 3;\n          break;\n        }\n      }\n      $parent = /** @type {HTMLElement} */($parent.parentNode);\n    }\n\n    if (canTouchScroll && ((!isAtTop && !isAtBottom) || (isAtTop && movedY < 0) || (isAtBottom && movedY > 0))) {\n\n      this.pointer[0] = x;\n      this.pointer[1] = y;\n      this.pointer[2] = x;\n      this.pointer[3] = y;\n      this.pointer[4] = x;\n      this.pointer[5] = y;\n      this.pointer[6] = x;\n      this.pointer[7] = y;\n\n    } else {\n\n      preventDefault(e);\n\n      // Needed to prevents click on handleUp\n      if (!this.triggerStyles) this.triggerStyles = setTargetValues(this.$trigger, { pointerEvents: 'none' });\n      // Needed to prevent page scroll while dragging on touch devvice\n      this.$trigger.addEventListener('touchstart', preventDefault, { passive: false });\n      this.$trigger.addEventListener('touchmove', preventDefault, { passive: false });\n      this.$trigger.addEventListener('touchend', preventDefault);\n\n\n      if ((!this.disabled[0] && abs(movedX) > 3) || (!this.disabled[1] && abs(movedY) > 3)) {\n\n        this.updateTicker.resume();\n        this.pointer[2] = this.pointer[0];\n        this.pointer[3] = this.pointer[1];\n        this.pointer[0] = x;\n        this.pointer[1] = y;\n        this.dragged = true;\n        this.released = false;\n        this.onDrag(this);\n      }\n    }\n  }\n\n  handleUp() {\n\n    if (!this.grabbed) return;\n\n    this.updateTicker.pause();\n\n    if (this.triggerStyles) {\n      this.triggerStyles.revert();\n      this.triggerStyles = null;\n    }\n\n    if (this.bodyStyles) {\n      this.bodyStyles.revert();\n      this.bodyStyles = null;\n    }\n\n    const [ disabledX, disabledY ] = this.disabled;\n    const [ px1, py1, px2, py2, px3, py3 ] = this.pointer;\n    const [ ct, cr, cb, cl ] = this.containerBounds;\n    const [ sx, sy ] = this.snapped;\n    const springX = this.releaseXSpring;\n    const springY = this.releaseYSpring;\n    const releaseEase = this.releaseEase;\n    const hasReleaseSpring = this.hasReleaseSpring;\n    const overshootCoords = this.overshootCoords;\n    const cx = this.x;\n    const cy = this.y;\n    const pv = this.computeVelocity(px1 - px3, py1 - py3);\n    const pa = this.angle = atan2(py1 - py2, px1 - px2);\n    const ds = pv * 150;\n    const cf = (1 - this.releaseContainerFriction) * this.dragSpeed;\n    const nx = cx + (cos(pa) * ds);\n    const ny = cy + (sin(pa) * ds);\n    const bx = nx > cr ? cr + (nx - cr) * cf : nx < cl ? cl + (nx - cl) * cf : nx;\n    const by = ny > cb ? cb + (ny - cb) * cf : ny < ct ? ct + (ny - ct) * cf : ny;\n    const dx = this.destX = clamp(round(snap(bx, this.snapX), 5), cl, cr);\n    const dy = this.destY = clamp(round(snap(by, this.snapY), 5), ct, cb);\n    const ob = this.isOutOfBounds(this.containerBounds, nx, ny);\n\n    let durationX = 0;\n    let durationY = 0;\n    let easeX = releaseEase;\n    let easeY = releaseEase;\n    let longestReleaseDuration = 0;\n\n    overshootCoords.x = cx;\n    overshootCoords.y = cy;\n\n    if (!disabledX) {\n      const directionX = dx === cr ? cx > cr ? -1 : 1 : cx < cl ? -1 : 1;\n      const distanceX = round(cx - dx, 0);\n      springX.velocity = disabledY && hasReleaseSpring ? distanceX ? (ds * directionX) / abs(distanceX) : 0 : pv;\n      const { ease, duration, restDuration } = springX;\n      durationX = cx === dx ? 0 : hasReleaseSpring ? duration : duration - (restDuration * globals.timeScale);\n      if (hasReleaseSpring) easeX = ease;\n      if (durationX > longestReleaseDuration) longestReleaseDuration = durationX;\n    }\n\n    if (!disabledY) {\n      const directionY = dy === cb ? cy > cb ? -1 : 1 : cy < ct ? -1 : 1;\n      const distanceY = round(cy - dy, 0);\n      springY.velocity = disabledX && hasReleaseSpring ? distanceY ? (ds * directionY) / abs(distanceY) : 0 : pv;\n      const { ease, duration, restDuration } = springY;\n      durationY = cy === dy ? 0 : hasReleaseSpring ? duration : duration - (restDuration * globals.timeScale);\n      if (hasReleaseSpring) easeY = ease;\n      if (durationY > longestReleaseDuration) longestReleaseDuration = durationY;\n    }\n\n    if (!hasReleaseSpring && ob && cf && (durationX || durationY)) {\n\n        const composition = compositionTypes.blend;\n\n        new JSAnimation(overshootCoords, {\n          x: { to: bx, duration: durationX * .65 },\n          y: { to: by, duration: durationY * .65 },\n          ease: releaseEase,\n          composition,\n        }).init();\n\n        new JSAnimation(overshootCoords, {\n          x: { to: dx, duration: durationX },\n          y: { to: dy, duration: durationY },\n          ease: releaseEase,\n          composition,\n        }).init();\n\n        this.overshootXTicker.stretch(durationX).restart();\n        this.overshootYTicker.stretch(durationY).restart();\n\n    } else {\n\n      if (!disabledX) this.animate[this.xProp](dx, durationX, easeX);\n      if (!disabledY) this.animate[this.yProp](dy, durationY, easeY);\n\n    }\n\n    this.scrollInView(longestReleaseDuration, this.scrollThreshold, releaseEase);\n\n    let hasSnapped = false;\n\n    if (dx !== sx) {\n      this.snapped[0] = dx;\n      if (this.snapX) hasSnapped = true;\n    }\n\n    if (dy !== sy && this.snapY) {\n      this.snapped[1] = dy;\n      if (this.snapY) hasSnapped = true;\n    }\n\n    if (hasSnapped) this.onSnap(this);\n\n    this.grabbed = false;\n    this.dragged = false;\n    this.updated = true;\n    this.released = true;\n\n    // It's important to trigger the callback after the release animations to be able to cancel them\n    this.onRelease(this);\n\n    this.$trigger.removeEventListener('touchstart', preventDefault);\n    this.$trigger.removeEventListener('touchmove', preventDefault);\n    this.$trigger.removeEventListener('touchend', preventDefault);\n\n    doc.removeEventListener('touchmove', this);\n    doc.removeEventListener('touchend', this);\n    doc.removeEventListener('touchcancel', this);\n    doc.removeEventListener('mousemove', this);\n    doc.removeEventListener('mouseup', this);\n    doc.removeEventListener('selectstart', this);\n  }\n\n  reset() {\n    this.stop();\n    this.resizeTicker.pause();\n    this.grabbed = false;\n    this.dragged = false;\n    this.updated = false;\n    this.released = false;\n    this.canScroll = false;\n    this.setX(0, true);\n    this.setY(0, true);\n    this.coords[0] = 0;\n    this.coords[1] = 0;\n    this.pointer[0] = 0;\n    this.pointer[1] = 0;\n    this.pointer[2] = 0;\n    this.pointer[3] = 0;\n    this.pointer[4] = 0;\n    this.pointer[5] = 0;\n    this.pointer[6] = 0;\n    this.pointer[7] = 0;\n    this.velocity = 0;\n    this.velocityStack[0] = 0;\n    this.velocityStack[1] = 0;\n    this.velocityStack[2] = 0;\n    this.velocityStackIndex = 0;\n    this.angle = 0;\n    return this;\n  }\n\n  enable() {\n    if (!this.enabled) {\n      this.enabled = true;\n      this.$target.classList.remove('is-disabled');\n      this.touchActionStyles = setTargetValues(this.$trigger, {\n        touchAction: this.disabled[0] ? 'pan-x' : this.disabled[1] ? 'pan-y' : 'none'\n      });\n      this.$trigger.addEventListener('touchstart', this, { passive: true });\n      this.$trigger.addEventListener('mousedown', this, { passive: true });\n      this.$trigger.addEventListener('mouseenter', this);\n    }\n    return this;\n  }\n\n  disable() {\n    this.enabled = false;\n    this.grabbed = false;\n    this.dragged = false;\n    this.updated = false;\n    this.released = false;\n    this.canScroll = false;\n    this.touchActionStyles.revert();\n    if (this.cursorStyles) {\n      this.cursorStyles.revert();\n      this.cursorStyles = null;\n    }\n    if (this.triggerStyles) {\n      this.triggerStyles.revert();\n      this.triggerStyles = null;\n    }\n    if (this.bodyStyles) {\n      this.bodyStyles.revert();\n      this.bodyStyles = null;\n    }\n    if (this.targetStyles) {\n      this.targetStyles.revert();\n      this.targetStyles = null;\n    }\n    this.stop();\n    this.$target.classList.add('is-disabled');\n    this.$trigger.removeEventListener('touchstart', this);\n    this.$trigger.removeEventListener('mousedown', this);\n    this.$trigger.removeEventListener('mouseenter', this);\n    doc.removeEventListener('touchmove', this);\n    doc.removeEventListener('touchend', this);\n    doc.removeEventListener('touchcancel', this);\n    doc.removeEventListener('mousemove', this);\n    doc.removeEventListener('mouseup', this);\n    doc.removeEventListener('selectstart', this);\n    return this;\n  }\n\n  revert() {\n    this.reset();\n    this.disable();\n    this.$target.classList.remove('is-disabled');\n    this.updateTicker.revert();\n    this.overshootXTicker.revert();\n    this.overshootYTicker.revert();\n    this.resizeTicker.revert();\n    return this;\n  }\n\n  /**\n   * @param {Event} e\n   */\n  handleEvent(e) {\n    switch (e.type) {\n      case 'mousedown':\n        this.handleDown(/** @type {MouseEvent} */(e));\n        break;\n      case 'touchstart':\n        this.handleDown(/** @type {TouchEvent} */(e));\n        break;\n      case 'mousemove':\n        this.handleMove(/** @type {MouseEvent} */(e));\n        break;\n      case 'touchmove':\n        this.handleMove(/** @type {TouchEvent} */(e));\n        break;\n      case 'mouseup':\n        this.handleUp();\n        break;\n      case 'touchend':\n        this.handleUp();\n        break;\n      case 'touchcancel':\n        this.handleUp();\n        break;\n      case 'mouseenter':\n        this.handleHover();\n        break;\n      case 'selectstart':\n        preventDefault(e);\n        break;\n    }\n  }\n}\n\n/**\n * @param {TargetsParam} target\n * @param {DraggableParams} [parameters]\n * @return {Draggable}\n */\nconst createDraggable = (target, parameters) => new Draggable(target, parameters);\n\n\n\n\n/**\n * @typedef {Object} ReactRef\n * @property {HTMLElement|SVGElement} [current]\n */\n\n/**\n * @typedef {Object} AngularRef\n * @property {HTMLElement|SVGElement} [nativeElement]\n */\n\n/**\n * @typedef {Object} ScopeParams\n * @property {DOMTargetSelector|ReactRef|AngularRef} [root]\n * @property {DefaultsParams} [defaults]\n * @property {Record<String, String>} [mediaQueries]\n */\n\n/**\n * @callback ScopeCleanup\n * @param {Scope} [scope]\n */\n\n/**\n * @callback ScopeConstructor\n * @param {Scope} [scope]\n * @return {ScopeCleanup|void}\n */\n\n/**\n * @callback ScopeMethod\n * @param {...*} args\n * @return {ScopeCleanup|void}\n */\n\nclass Scope {\n  /** @param {ScopeParams} [parameters] */\n  constructor(parameters = {}) {\n    if (globals.scope) globals.scope.revertibles.push(this);\n    const rootParam = parameters.root;\n    /** @type {Document|DOMTarget} */\n    let root = doc;\n    if (rootParam) {\n      root = /** @type {ReactRef} */(rootParam).current ||\n             /** @type {AngularRef} */(rootParam).nativeElement ||\n             parseTargets(/** @type {DOMTargetSelector} */(rootParam))[0] ||\n             doc;\n    }\n    const scopeDefaults = parameters.defaults;\n    const globalDefault = globals.defaults;\n    const mediaQueries = parameters.mediaQueries;\n    /** @type {DefaultsParams} */\n    this.defaults = scopeDefaults ? mergeObjects(scopeDefaults, globalDefault) : globalDefault;\n    /** @type {Document|DOMTarget} */\n    this.root = root;\n    /** @type {Array<ScopeConstructor>} */\n    this.constructors = [];\n    /** @type {Array<Function>} */\n    this.revertConstructors = [];\n    /** @type {Array<Revertible>} */\n    this.revertibles = [];\n    /** @type {Record<String, Function>} */\n    this.methods = {};\n    /** @type {Record<String, Boolean>} */\n    this.matches = {};\n    /** @type {Record<String, MediaQueryList>} */\n    this.mediaQueryLists = {};\n    /** @type {Record<String, any>} */\n    this.data = {};\n    if (mediaQueries) {\n      for (let mq in mediaQueries) {\n        const _mq = win.matchMedia(mediaQueries[mq]);\n        this.mediaQueryLists[mq] = _mq;\n        _mq.addEventListener('change', this);\n      }\n    }\n  }\n\n  /**\n   * @callback ScoppedCallback\n   * @param {this} scope\n   * @return {any}\n   *\n   * @param {ScoppedCallback} cb\n   * @return {this}\n   */\n  execute(cb) {\n    let activeScope = globals.scope;\n    let activeRoot = globals.root;\n    let activeDefaults = globals.defaults;\n    globals.scope = this;\n    globals.root = this.root;\n    globals.defaults = this.defaults;\n    const mqs = this.mediaQueryLists;\n    for (let mq in mqs) this.matches[mq] = mqs[mq].matches;\n    const returned = cb(this);\n    globals.scope = activeScope;\n    globals.root = activeRoot;\n    globals.defaults = activeDefaults;\n    return returned;\n  }\n\n  /**\n   * @return {this}\n   */\n  refresh() {\n    this.execute(() => {\n      let i = this.revertibles.length;\n      let y = this.revertConstructors.length;\n      while (i--) this.revertibles[i].revert();\n      while (y--) this.revertConstructors[y](this);\n      this.revertibles.length = 0;\n      this.revertConstructors.length = 0;\n      this.constructors.forEach( constructor => {\n        const revertConstructor = constructor(this);\n        if (revertConstructor) {\n          this.revertConstructors.push(revertConstructor);\n        }\n      });\n    });\n    return this;\n  }\n\n  /**\n   * @callback contructorCallback\n   * @param {this} self\n   *\n   * @overload\n   * @param {String} a1\n   * @param {ScopeMethod} a2\n   * @return {this}\n   *\n   * @overload\n   * @param {contructorCallback} a1\n   * @return {this}\n   *\n   * @param {String|contructorCallback} a1\n   * @param {ScopeMethod} [a2]\n   */\n  add(a1, a2) {\n    if (isFnc(a1)) {\n      const constructor = /** @type {contructorCallback} */(a1);\n      this.constructors.push(constructor);\n      this.execute(() => {\n        const revertConstructor = constructor(this);\n        if (revertConstructor) {\n          this.revertConstructors.push(revertConstructor);\n        }\n      });\n    } else {\n      this.methods[/** @type {String} */(a1)] = (/** @type {any} */...args) => this.execute(() => a2(...args));\n    }\n    return this;\n  }\n\n  /**\n   * @param {Event} e\n   */\n  handleEvent(e) {\n    switch (e.type) {\n      case 'change':\n        this.refresh();\n        break;\n    }\n  }\n\n  revert() {\n    const revertibles = this.revertibles;\n    const revertConstructors = this.revertConstructors;\n    const mqs = this.mediaQueryLists;\n    let i = revertibles.length;\n    let y = revertConstructors.length;\n    while (i--) revertibles[i].revert();\n    while (y--) revertConstructors[y](this);\n    for (let mq in mqs) mqs[mq].removeEventListener('change', this);\n    revertibles.length = 0;\n    revertConstructors.length = 0;\n    this.constructors.length = 0;\n    this.matches = {};\n    this.methods = {};\n    this.mediaQueryLists = {};\n    this.data = {};\n  }\n}\n\n/**\n * @param {ScopeParams} [params]\n * @return {Scope}\n */\nconst createScope = params => new Scope(params);\n\n/**\n * @typedef {String|Number} ScrollThresholdValue\n */\n\n/**\n * @return {Number}\n */\nconst getMaxViewHeight = () => {\n  const $el = document.createElement('div');\n  doc.body.appendChild($el);\n  $el.style.height = '100lvh';\n  const height = $el.offsetHeight;\n  doc.body.removeChild($el);\n  return height;\n};\n\n/**\n * @template {ScrollThresholdValue|String|Number|Boolean|Function|Object} T\n * @param {T | ((observer: ScrollObserver) => T)} value\n * @param {ScrollObserver} scroller\n * @return {T}\n */\nconst parseScrollObserverFunctionParameter = (value, scroller) => value && isFnc(value) ? /** @type {Function} */(value)(scroller) : value;\n\nconst scrollContainers = new Map();\n\nclass ScrollContainer {\n  /**\n   * @param {HTMLElement} $el\n   */\n  constructor($el) {\n    /** @type {HTMLElement} */\n    this.element = $el;\n    /** @type {Boolean} */\n    this.useWin = this.element === doc.body;\n    /** @type {Number} */\n    this.winWidth = 0;\n    /** @type {Number} */\n    this.winHeight = 0;\n    /** @type {Number} */\n    this.width = 0;\n    /** @type {Number} */\n    this.height = 0;\n    /** @type {Number} */\n    this.left = 0;\n    /** @type {Number} */\n    this.top = 0;\n    /** @type {Number} */\n    this.zIndex = 0;\n    /** @type {Number} */\n    this.scrollX = 0;\n    /** @type {Number} */\n    this.scrollY = 0;\n    /** @type {Number} */\n    this.prevScrollX = 0;\n    /** @type {Number} */\n    this.prevScrollY = 0;\n    /** @type {Number} */\n    this.scrollWidth = 0;\n    /** @type {Number} */\n    this.scrollHeight = 0;\n    /** @type {Number} */\n    this.velocity = 0;\n    /** @type {Boolean} */\n    this.backwardX = false;\n    /** @type {Boolean} */\n    this.backwardY = false;\n    /** @type {Timer} */\n    this.scrollTicker = new Timer({\n      autoplay: false,\n      onBegin: () => this.dataTimer.resume(),\n      onUpdate: () => {\n        const backwards = this.backwardX || this.backwardY;\n        forEachChildren(this, (/** @type {ScrollObserver} */child) => child.handleScroll(), backwards);\n      },\n      onComplete: () => this.dataTimer.pause()\n    }).init();\n    /** @type {Timer} */\n    this.dataTimer = new Timer({\n      autoplay: false,\n      frameRate: 30,\n      onUpdate: self => {\n        const dt = self.deltaTime;\n        const px = this.prevScrollX;\n        const py = this.prevScrollY;\n        const nx = this.scrollX;\n        const ny = this.scrollY;\n        const dx = px - nx;\n        const dy = py - ny;\n        this.prevScrollX = nx;\n        this.prevScrollY = ny;\n        if (dx) this.backwardX = px > nx;\n        if (dy) this.backwardY = py > ny;\n        this.velocity = round(dt > 0 ? Math.sqrt(dx * dx + dy * dy) / dt : 0, 5);\n      }\n    }).init();\n    /** @type {Timer} */\n    this.resizeTicker = new Timer({\n      autoplay: false,\n      duration: 250 * globals.timeScale,\n      onComplete: () => {\n        this.updateWindowBounds();\n        this.refreshScrollObservers();\n        this.handleScroll();\n      }\n    }).init();\n    /** @type {Timer} */\n    this.wakeTicker = new Timer({\n      autoplay: false,\n      duration: 500 * globals.timeScale,\n      onBegin: () => {\n        this.scrollTicker.resume();\n      },\n      onComplete: () => {\n        this.scrollTicker.pause();\n      }\n    }).init();\n    /** @type {ScrollObserver} */\n    this._head = null;\n    /** @type {ScrollObserver} */\n    this._tail = null;\n    this.updateScrollCoords();\n    this.updateWindowBounds();\n    this.updateBounds();\n    this.refreshScrollObservers();\n    this.handleScroll();\n    this.resizeObserver = new ResizeObserver(() => this.resizeTicker.restart());\n    this.resizeObserver.observe(this.element);\n    (this.useWin ? win : this.element).addEventListener('scroll', this, false);\n  }\n\n  updateScrollCoords() {\n    const useWin = this.useWin;\n    const $el = this.element;\n    this.scrollX = round(useWin ? win.scrollX : $el.scrollLeft, 0);\n    this.scrollY = round(useWin ? win.scrollY : $el.scrollTop, 0);\n  }\n\n  updateWindowBounds() {\n    this.winWidth = win.innerWidth;\n    this.winHeight = getMaxViewHeight();\n  }\n\n  updateBounds() {\n    const style = getComputedStyle(this.element);\n    const $el = this.element;\n    this.scrollWidth = $el.scrollWidth + parseFloat(style.marginLeft) + parseFloat(style.marginRight);\n    this.scrollHeight = $el.scrollHeight + parseFloat(style.marginTop) + parseFloat(style.marginBottom);\n    this.updateWindowBounds();\n    let width, height;\n    if (this.useWin) {\n      width = this.winWidth;\n      height = this.winHeight;\n    } else {\n      const elRect = $el.getBoundingClientRect();\n      width = elRect.width;\n      height = elRect.height;\n      this.top = elRect.top;\n      this.left = elRect.left;\n    }\n    this.width = width;\n    this.height = height;\n  }\n\n  refreshScrollObservers() {\n    forEachChildren(this, (/** @type {ScrollObserver} */child) => {\n      if (child._debug) {\n        child.removeDebug();\n      }\n    });\n    this.updateBounds();\n    forEachChildren(this, (/** @type {ScrollObserver} */child) => {\n      child.refresh();\n      if (child._debug) {\n        child.debug();\n      }\n    });\n  }\n\n  refresh() {\n    this.updateWindowBounds();\n    this.updateBounds();\n    this.refreshScrollObservers();\n    this.handleScroll();\n  }\n\n  handleScroll() {\n    this.updateScrollCoords();\n    this.wakeTicker.restart();\n  }\n\n  /**\n   * @param {Event} e\n   */\n  handleEvent(e) {\n    switch (e.type) {\n      case 'scroll':\n        this.handleScroll();\n        break;\n    }\n  }\n\n  revert() {\n    this.scrollTicker.cancel();\n    this.dataTimer.cancel();\n    this.resizeTicker.cancel();\n    this.wakeTicker.cancel();\n    this.resizeObserver.unobserve(this.element);\n    (this.useWin ? win : this.element).removeEventListener('scroll', this);\n    scrollContainers.delete(this.element);\n  }\n}\n\n/**\n * @param {TargetsParam} target\n * @return {ScrollContainer}\n */\nconst registerAndGetScrollContainer = target => {\n  const $el = /** @type {HTMLElement} */(target ? parseTargets(target)[0] || doc.body : doc.body);\n  let scrollContainer = scrollContainers.get($el);\n  if (!scrollContainer) {\n    scrollContainer = new ScrollContainer($el);\n    scrollContainers.set($el, scrollContainer);\n  }\n  return scrollContainer;\n};\n\n/**\n * @param {HTMLElement} $el\n * @param {Number|string} v\n * @param {Number} size\n * @param {Number} [under]\n * @param {Number} [over]\n * @return {Number}\n */\nconst convertValueToPx = ($el, v, size, under, over) => {\n  const clampMin = v === 'min';\n  const clampMax = v === 'max';\n  const value = v === 'top' || v === 'left' || v === 'start' || clampMin ? 0 :\n                v === 'bottom' || v === 'right' || v === 'end' || clampMax ? '100%' :\n                v === 'center' ? '50%' :\n                v;\n  const { n, u } = decomposeRawValue(value, decomposedOriginalValue);\n  let px = n;\n  if (u === '%') {\n    px = (n / 100) * size;\n  } else if (u) {\n    px = convertValueUnit($el, decomposedOriginalValue, 'px', true).n;\n  }\n  if (clampMax && under < 0) px += under;\n  if (clampMin && over > 0) px += over;\n  return px;\n};\n\n/**\n * @param {HTMLElement} $el\n * @param {ScrollThresholdValue} v\n * @param {Number} size\n * @param {Number} [under]\n * @param {Number} [over]\n * @return {Number}\n */\nconst parseBoundValue = ($el, v, size, under, over) => {\n  /** @type {Number} */\n  let value;\n  if (isStr(v)) {\n    const matchedOperator = relativeValuesExecRgx.exec(/** @type {String} */(v));\n    if (matchedOperator) {\n      const splitter = matchedOperator[0];\n      const operator = splitter[0];\n      const splitted = /** @type {String} */(v).split(splitter);\n      const clampMin = splitted[0] === 'min';\n      const clampMax = splitted[0] === 'max';\n      const valueAPx = convertValueToPx($el, splitted[0], size, under, over);\n      const valueBPx = convertValueToPx($el, splitted[1], size, under, over);\n      if (clampMin) {\n        const min = getRelativeValue(convertValueToPx($el, 'min', size), valueBPx, operator);\n        value = min < valueAPx ? valueAPx : min;\n      } else if (clampMax) {\n        const max = getRelativeValue(convertValueToPx($el, 'max', size), valueBPx, operator);\n        value = max > valueAPx ? valueAPx : max;\n      } else {\n        value = getRelativeValue(valueAPx, valueBPx, operator);\n      }\n    } else {\n      value = convertValueToPx($el, v, size, under, over);\n    }\n  } else {\n    value = /** @type {Number} */(v);\n  }\n  return round(value, 0);\n};\n\n/**\n * @param {JSAnimation} linked\n * @return {HTMLElement}\n */\nconst getAnimationDomTarget = linked => {\n  let $linkedTarget;\n  const linkedTargets = linked.targets;\n  for (let i = 0, l = linkedTargets.length; i < l; i++) {\n    const target = linkedTargets[i];\n    if (target[isDomSymbol]) {\n      $linkedTarget = /** @type {HTMLElement} */(target);\n      break;\n    }\n  }\n  return $linkedTarget;\n};\n\nlet scrollerIndex = 0;\n\nconst debugColors = ['#FF4B4B','#FF971B','#FFC730','#F9F640','#7AFF5A','#18FF74','#17E09B','#3CFFEC','#05DBE9','#33B3F1','#638CF9','#C563FE','#FF4FCF','#F93F8A'];\n\n/**\n * @typedef {Object} ScrollThresholdParam\n * @property {ScrollThresholdValue} [target]\n * @property {ScrollThresholdValue} [container]\n */\n\n/**\n * @callback ScrollObserverAxisCallback\n * @param {ScrollObserver} self\n * @return {'x'|'y'}\n */\n\n/**\n * @callback ScrollThresholdCallback\n * @param {ScrollObserver} self\n * @return {ScrollThresholdValue|ScrollThresholdParam}\n */\n\n/**\n * @typedef {Object} ScrollObserverParams\n * @property {Number|String} [id]\n * @property {Boolean|Number|String|EasingParam} [sync]\n * @property {TargetsParam} [container]\n * @property {TargetsParam} [target]\n * @property {'x'|'y'|ScrollObserverAxisCallback|((observer: ScrollObserver) => 'x'|'y'|ScrollObserverAxisCallback)} [axis]\n * @property {ScrollThresholdValue|ScrollThresholdParam|ScrollThresholdCallback|((observer: ScrollObserver) => ScrollThresholdValue|ScrollThresholdParam|ScrollThresholdCallback)} [enter]\n * @property {ScrollThresholdValue|ScrollThresholdParam|ScrollThresholdCallback|((observer: ScrollObserver) => ScrollThresholdValue|ScrollThresholdParam|ScrollThresholdCallback)} [leave]\n * @property {Boolean|((observer: ScrollObserver) => Boolean)} [repeat]\n * @property {Boolean} [debug]\n * @property {Callback<ScrollObserver>} [onEnter]\n * @property {Callback<ScrollObserver>} [onLeave]\n * @property {Callback<ScrollObserver>} [onEnterForward]\n * @property {Callback<ScrollObserver>} [onLeaveForward]\n * @property {Callback<ScrollObserver>} [onEnterBackward]\n * @property {Callback<ScrollObserver>} [onLeaveBackward]\n * @property {Callback<ScrollObserver>} [onUpdate]\n * @property {Callback<ScrollObserver>} [onSyncComplete]\n */\n\nclass ScrollObserver {\n  /**\n   * @param {ScrollObserverParams} parameters\n   */\n  constructor(parameters = {}) {\n    if (globals.scope) globals.scope.revertibles.push(this);\n    const syncMode = setValue(parameters.sync, 'play pause');\n    const ease = syncMode ? parseEasings(/** @type {EasingParam} */(syncMode)) : null;\n    const isLinear = syncMode && (syncMode === 'linear' || syncMode === none);\n    const isEase = syncMode && !(ease === none && !isLinear);\n    const isSmooth = syncMode && (isNum(syncMode) || syncMode === true || isLinear);\n    const isMethods = syncMode && (isStr(syncMode) && !isEase && !isSmooth);\n    const syncMethods = isMethods ? /** @type {String} */(syncMode).split(' ').map(\n      (/** @type {String} */m) => () => {\n        const linked = this.linked;\n        return linked && linked[m] ? linked[m]() : null;\n      }\n    ) : null;\n    const biDirSync = isMethods && syncMethods.length > 2;\n    /** @type {Number} */\n    this.index = scrollerIndex++;\n    /** @type {String|Number} */\n    this.id = !isUnd(parameters.id) ? parameters.id : this.index;\n    /** @type {ScrollContainer} */\n    this.container = registerAndGetScrollContainer(parameters.container);\n    /** @type {HTMLElement} */\n    this.target = null;\n    /** @type {Tickable|WAAPIAnimation} */\n    this.linked = null;\n    /** @type {Boolean} */\n    this.repeat = null;\n    /** @type {Boolean} */\n    this.horizontal = null;\n    /** @type {ScrollThresholdParam|ScrollThresholdValue|ScrollThresholdCallback} */\n    this.enter = null;\n    /** @type {ScrollThresholdParam|ScrollThresholdValue|ScrollThresholdCallback} */\n    this.leave = null;\n    /** @type {Boolean} */\n    this.sync = isEase || isSmooth || !!syncMethods;\n    /** @type {EasingFunction} */\n    this.syncEase = isEase ? ease : null;\n    /** @type {Number} */\n    this.syncSmooth = isSmooth ? syncMode === true || isLinear ? 1 : /** @type {Number} */(syncMode) : null;\n    /** @type {Callback<ScrollObserver>} */\n    this.onSyncEnter = syncMethods && !biDirSync && syncMethods[0] ? syncMethods[0] : noop;\n    /** @type {Callback<ScrollObserver>} */\n    this.onSyncLeave = syncMethods && !biDirSync && syncMethods[1] ? syncMethods[1] : noop;\n    /** @type {Callback<ScrollObserver>} */\n    this.onSyncEnterForward = syncMethods && biDirSync && syncMethods[0] ? syncMethods[0] : noop;\n    /** @type {Callback<ScrollObserver>} */\n    this.onSyncLeaveForward = syncMethods && biDirSync && syncMethods[1] ? syncMethods[1] : noop;\n    /** @type {Callback<ScrollObserver>} */\n    this.onSyncEnterBackward = syncMethods && biDirSync && syncMethods[2] ? syncMethods[2] : noop;\n    /** @type {Callback<ScrollObserver>} */\n    this.onSyncLeaveBackward = syncMethods && biDirSync && syncMethods[3] ? syncMethods[3] : noop;\n    /** @type {Callback<ScrollObserver>} */\n    this.onEnter = parameters.onEnter || noop;\n    /** @type {Callback<ScrollObserver>} */\n    this.onLeave = parameters.onLeave || noop;\n    /** @type {Callback<ScrollObserver>} */\n    this.onEnterForward = parameters.onEnterForward || noop;\n    /** @type {Callback<ScrollObserver>} */\n    this.onLeaveForward = parameters.onLeaveForward || noop;\n    /** @type {Callback<ScrollObserver>} */\n    this.onEnterBackward = parameters.onEnterBackward || noop;\n    /** @type {Callback<ScrollObserver>} */\n    this.onLeaveBackward = parameters.onLeaveBackward || noop;\n    /** @type {Callback<ScrollObserver>} */\n    this.onUpdate = parameters.onUpdate || noop;\n    /** @type {Callback<ScrollObserver>} */\n    this.onSyncComplete = parameters.onSyncComplete || noop;\n    /** @type {Boolean} */\n    this.reverted = false;\n    /** @type {Boolean} */\n    this.completed = false;\n    /** @type {Boolean} */\n    this.began = false;\n    /** @type {Boolean} */\n    this.isInView = false;\n    /** @type {Boolean} */\n    this.forceEnter = false;\n    /** @type {Boolean} */\n    this.hasEntered = false;\n    /** @type {Array.<Number>} */\n    this.offsets = [];\n    /** @type {Number} */\n    this.offset = 0;\n    /** @type {Number} */\n    this.offsetStart = 0;\n    /** @type {Number} */\n    this.offsetEnd = 0;\n    /** @type {Number} */\n    this.distance = 0;\n    /** @type {Number} */\n    this.prevProgress = 0;\n    /** @type {Array} */\n    this.thresholds = ['start', 'end', 'end', 'start'];\n    /** @type {[Number, Number, Number, Number]} */\n    this.coords = [0, 0, 0, 0];\n    /** @type {JSAnimation} */\n    this.debugStyles = null;\n    /** @type {HTMLElement} */\n    this.$debug = null;\n    /** @type {ScrollObserverParams} */\n    this._params = parameters;\n    /** @type {Boolean} */\n    this._debug = setValue(parameters.debug, false);\n    /** @type {ScrollObserver} */\n    this._next = null;\n    /** @type {ScrollObserver} */\n    this._prev = null;\n    addChild(this.container, this);\n    // Wait for the next frame to add to the container in order to handle calls to link()\n    sync(() => {\n      if (this.reverted) return;\n      if (!this.target) {\n        const target = /** @type {HTMLElement} */(parseTargets(parameters.target)[0]);\n        this.target = target || doc.body;\n        this.refresh();\n      }\n      if (this._debug) this.debug();\n    });\n  }\n\n  /**\n   * @param {Tickable|WAAPIAnimation} linked\n   */\n  link(linked) {\n    if (linked) {\n      // Make sure to pause the linked object in case it's added later\n      linked.pause();\n      this.linked = linked;\n      // Try to use a target of the linked object if no target parameters specified\n      if (!this._params.target) {\n        /** @type {HTMLElement} */\n        let $linkedTarget;\n        if (!isUnd(/** @type {JSAnimation} */(linked).targets)) {\n          $linkedTarget = getAnimationDomTarget(/** @type {JSAnimation} */(linked));\n        } else {\n          forEachChildren(/** @type {Timeline} */(linked), (/** @type {JSAnimation} */child) => {\n            if (child.targets && !$linkedTarget) {\n              $linkedTarget = getAnimationDomTarget(/** @type {JSAnimation} */(child));\n            }\n          });\n        }\n        // Fallback to body if no target found\n        this.target = $linkedTarget || doc.body;\n        this.refresh();\n      }\n    }\n    return this;\n  }\n\n  get velocity() {\n    return this.container.velocity;\n  }\n\n  get backward() {\n    return this.horizontal ? this.container.backwardX : this.container.backwardY;\n  }\n\n  get scroll() {\n    return this.horizontal ? this.container.scrollX : this.container.scrollY;\n  }\n\n  get progress() {\n    const p = (this.scroll - this.offsetStart) / this.distance;\n    return p === Infinity || isNaN(p) ? 0 : round(clamp(p, 0, 1), 6);\n  }\n\n  refresh() {\n    this.reverted = false;\n    const params = this._params;\n    this.repeat = setValue(parseScrollObserverFunctionParameter(params.repeat, this), true);\n    this.horizontal = setValue(parseScrollObserverFunctionParameter(params.axis, this), 'y') === 'x';\n    this.enter = setValue(parseScrollObserverFunctionParameter(params.enter, this), 'end start');\n    this.leave = setValue(parseScrollObserverFunctionParameter(params.leave, this), 'start end');\n    this.updateBounds();\n    this.handleScroll();\n    return this;\n  }\n\n  removeDebug() {\n    if (this.$debug) {\n      this.$debug.parentNode.removeChild(this.$debug);\n      this.$debug = null;\n    }\n    if (this.debugStyles) {\n      this.debugStyles.revert();\n      this.$debug = null;\n    }\n    return this;\n  }\n\n  debug() {\n    this.removeDebug();\n    const container = this.container;\n    const isHori = this.horizontal;\n    const $existingDebug = container.element.querySelector(':scope > .animejs-onscroll-debug');\n    const $debug = doc.createElement('div');\n    const $thresholds = doc.createElement('div');\n    const $triggers = doc.createElement('div');\n    const color = debugColors[this.index % debugColors.length];\n    const useWin = container.useWin;\n    const containerWidth = useWin ? container.winWidth : container.width;\n    const containerHeight = useWin ? container.winHeight : container.height;\n    const scrollWidth = container.scrollWidth;\n    const scrollHeight = container.scrollHeight;\n    const size = this.container.width > 360 ? 320 : 260;\n    const offLeft = isHori ? 0 : 10;\n    const offTop = isHori ? 10 : 0;\n    const half = isHori ? 24 : size / 2;\n    const labelHeight = isHori ? half : 15;\n    const labelWidth = isHori ? 60 : half;\n    const labelSize = isHori ? labelWidth : labelHeight;\n    const repeat = isHori ? 'repeat-x' : 'repeat-y';\n    /**\n     * @param {Number} v\n     * @return {String}\n     */\n    const gradientOffset = v => isHori ? '0px '+(v)+'px' : (v)+'px'+' 2px';\n    /**\n     * @param {String} c\n     * @return {String}\n     */\n    const lineCSS = (c) => `linear-gradient(${isHori ? 90 : 0}deg, ${c} 2px, transparent 1px)`;\n    /**\n     * @param {String} p\n     * @param {Number} l\n     * @param {Number} t\n     * @param {Number} w\n     * @param {Number} h\n     * @return {String}\n     */\n    const baseCSS = (p, l, t, w, h) => `position:${p};left:${l}px;top:${t}px;width:${w}px;height:${h}px;`;\n    $debug.style.cssText = `${baseCSS('absolute', offLeft, offTop, isHori ? scrollWidth : size, isHori ? size : scrollHeight)}\n      pointer-events: none;\n      z-index: ${this.container.zIndex++};\n      display: flex;\n      flex-direction: ${isHori ? 'column' : 'row'};\n      filter: drop-shadow(0px 1px 0px rgba(0,0,0,.75));\n    `;\n    $thresholds.style.cssText = `${baseCSS('sticky', 0, 0, isHori ? containerWidth : half, isHori ? half : containerHeight)}`;\n    if (!$existingDebug) {\n      $thresholds.style.cssText += `background:\n        ${lineCSS('#FFFF')}${gradientOffset(half-10)} / ${isHori ? '100px 100px' : '100px 100px'} ${repeat},\n        ${lineCSS('#FFF8')}${gradientOffset(half-10)} / ${isHori ? '10px 10px' : '10px 10px'} ${repeat};\n      `;\n    }\n    $triggers.style.cssText = `${baseCSS('relative', 0, 0, isHori ? scrollWidth : half, isHori ? half : scrollHeight)}`;\n    if (!$existingDebug) {\n      $triggers.style.cssText += `background:\n        ${lineCSS('#FFFF')}${gradientOffset(0)} / ${isHori ? '100px 10px' : '10px 100px'} ${repeat},\n        ${lineCSS('#FFF8')}${gradientOffset(0)} / ${isHori ? '10px 0px' : '0px 10px'} ${repeat};\n      `;\n    }\n    const labels = [' enter: ', ' leave: '];\n    this.coords.forEach((v, i) => {\n      const isView = i > 1;\n      const value = (isView ? 0 : this.offset) + v;\n      const isTail = i % 2;\n      const isFirst = value < labelSize;\n      const isOver = value > (isView ? isHori ? containerWidth : containerHeight : isHori ? scrollWidth : scrollHeight) - labelSize;\n      const isFlip = (isView ? isTail && !isFirst : !isTail && !isFirst) || isOver;\n      const $label = doc.createElement('div');\n      const $text = doc.createElement('div');\n      const dirProp = isHori ? isFlip ? 'right' : 'left' : isFlip ? 'bottom' : 'top';\n      const flipOffset = isFlip ? (isHori ? labelWidth : labelHeight) + (!isView ? isHori ? -1 : -2 : isHori ? -1 : isOver ? 0 : -2) : !isView ? isHori ? 1 : 0 : isHori ? 1 : 0;\n      // $text.innerHTML = `${!isView ? '' : labels[isTail] + ' '}${this.id}: ${this.thresholds[i]} ${isView ? '' : labels[isTail]}`;\n      $text.innerHTML = `${this.id}${labels[isTail]}${this.thresholds[i]}`;\n      $label.style.cssText = `${baseCSS('absolute', 0, 0, labelWidth, labelHeight)}\n        display: flex;\n        flex-direction: ${isHori ? 'column' : 'row'};\n        justify-content: flex-${isView ? 'start' : 'end'};\n        align-items: flex-${isFlip ? 'end' : 'start'};\n        border-${dirProp}: 2px ${isTail ? 'solid' : 'solid'} ${color};\n      `;\n      $text.style.cssText = `\n        overflow: hidden;\n        max-width: ${(size / 2) - 10}px;\n        height: ${labelHeight};\n        margin-${isHori ? isFlip ? 'right' : 'left' : isFlip ? 'bottom' : 'top'}: -2px;\n        padding: 1px;\n        font-family: ui-monospace, monospace;\n        font-size: 10px;\n        letter-spacing: -.025em;\n        line-height: 9px;\n        font-weight: 600;\n        text-align: ${isHori && isFlip || !isHori && !isView ? 'right' : 'left'};\n        white-space: pre;\n        text-overflow: ellipsis;\n        color: ${isTail ? color : 'rgba(0,0,0,.75)'};\n        background-color: ${isTail ? 'rgba(0,0,0,.65)' : color};\n        border: 2px solid ${isTail ? color : 'transparent'};\n        border-${isHori ? isFlip ? 'top-left' : 'top-right' : isFlip ? 'top-left' : 'bottom-left'}-radius: 5px;\n        border-${isHori ? isFlip ? 'bottom-left' : 'bottom-right' : isFlip ? 'top-right' : 'bottom-right'}-radius: 5px;\n      `;\n      $label.appendChild($text);\n      let position = value - flipOffset + (isHori ? 1 : 0);\n      $label.style[isHori ? 'left' : 'top'] = `${position}px`;\n      // $label.style[isHori ? 'left' : 'top'] = value - flipOffset + (!isFlip && isFirst && !isView ? 1 : isFlip ? 0 : -2) + 'px';\n      (isView ? $thresholds : $triggers).appendChild($label);\n    });\n\n    $debug.appendChild($thresholds);\n    $debug.appendChild($triggers);\n    container.element.appendChild($debug);\n\n    if (!$existingDebug) $debug.classList.add('animejs-onscroll-debug');\n    this.$debug = $debug;\n    const containerPosition = getTargetValue(container.element, 'position');\n    if (containerPosition === 'static') {\n      this.debugStyles = setTargetValues(container.element, { position: 'relative '});\n    }\n\n  }\n\n  updateBounds() {\n    if (this._debug) {\n      this.removeDebug();\n    }\n    let stickys;\n    const $target = this.target;\n    const container = this.container;\n    const isHori = this.horizontal;\n    const linked = this.linked;\n    let linkedTime;\n    let $el = $target;\n    let offsetX = 0;\n    let offsetY = 0;\n    /** @type {Element} */\n    let $offsetParent = $el;\n    if (linked) {\n      linkedTime = linked.currentTime;\n      linked.seek(0, true);\n    }\n    const isContainerStatic = getTargetValue(container.element, 'position') === 'static' ? setTargetValues(container.element, { position: 'relative '}) : false;\n    while ($el && $el !== container.element && $el !== doc.body) {\n      const isSticky = getTargetValue($el, 'position') === 'sticky' ?\n                       setTargetValues($el, { position: 'static' }) :\n                       false;\n      if ($el === $offsetParent) {\n        offsetX += $el.offsetLeft || 0;\n        offsetY += $el.offsetTop || 0;\n        $offsetParent = $el.offsetParent;\n      }\n      $el = /** @type {HTMLElement} */($el.parentElement);\n      if (isSticky) {\n        if (!stickys) stickys = [];\n        stickys.push(isSticky);\n      }\n    }\n    if (isContainerStatic) isContainerStatic.revert();\n    const offset = isHori ? offsetX : offsetY;\n    const targetSize = isHori ? $target.offsetWidth : $target.offsetHeight;\n    const containerSize = isHori ? container.width : container.height;\n    const scrollSize = isHori ? container.scrollWidth : container.scrollHeight;\n    const maxScroll = scrollSize - containerSize;\n    const enter = this.enter;\n    const leave = this.leave;\n\n    /** @type {ScrollThresholdValue} */\n    let enterTarget = 'start';\n    /** @type {ScrollThresholdValue} */\n    let leaveTarget = 'end';\n    /** @type {ScrollThresholdValue} */\n    let enterContainer = 'end';\n    /** @type {ScrollThresholdValue} */\n    let leaveContainer = 'start';\n\n    if (isStr(enter)) {\n      const splitted = /** @type {String} */(enter).split(' ');\n      enterContainer = splitted[0];\n      enterTarget = splitted.length > 1 ? splitted[1] : enterTarget;\n    } else if (isObj(enter)) {\n      const e = /** @type {ScrollThresholdParam} */(enter);\n      if (!isUnd(e.container)) enterContainer = e.container;\n      if (!isUnd(e.target)) enterTarget = e.target;\n    } else if (isNum(enter)) {\n      enterContainer = /** @type {Number} */(enter);\n    }\n\n    if (isStr(leave)) {\n      const splitted = /** @type {String} */(leave).split(' ');\n      leaveContainer = splitted[0];\n      leaveTarget = splitted.length > 1 ? splitted[1] : leaveTarget;\n    } else if (isObj(leave)) {\n      const t = /** @type {ScrollThresholdParam} */(leave);\n      if (!isUnd(t.container)) leaveContainer = t.container;\n      if (!isUnd(t.target)) leaveTarget = t.target;\n    } else if (isNum(leave)) {\n      leaveContainer = /** @type {Number} */(leave);\n    }\n\n    const parsedEnterTarget = parseBoundValue($target, enterTarget, targetSize);\n    const parsedLeaveTarget = parseBoundValue($target, leaveTarget, targetSize);\n    const under = (parsedEnterTarget + offset) - containerSize;\n    const over = (parsedLeaveTarget + offset) - maxScroll;\n    const parsedEnterContainer = parseBoundValue($target, enterContainer, containerSize, under, over);\n    const parsedLeaveContainer = parseBoundValue($target, leaveContainer, containerSize, under, over);\n    const offsetStart = parsedEnterTarget + offset - parsedEnterContainer;\n    const offsetEnd = parsedLeaveTarget + offset - parsedLeaveContainer;\n    const scrollDelta = offsetEnd - offsetStart;\n    this.offsets[0] = offsetX;\n    this.offsets[1] = offsetY;\n    this.offset = offset;\n    this.offsetStart = offsetStart;\n    this.offsetEnd = offsetEnd;\n    this.distance = scrollDelta <= 0 ? 0 : scrollDelta;\n    this.thresholds = [enterTarget, leaveTarget, enterContainer, leaveContainer];\n    this.coords = [parsedEnterTarget, parsedLeaveTarget, parsedEnterContainer, parsedLeaveContainer];\n    if (stickys) {\n      stickys.forEach(sticky => sticky.revert());\n    }\n    if (linked) {\n      linked.seek(linkedTime, true);\n    }\n    if (this._debug) {\n      this.debug();\n    }\n  }\n\n  handleScroll() {\n    const linked = this.linked;\n    const sync = this.sync;\n    const syncEase = this.syncEase;\n    const syncSmooth = this.syncSmooth;\n    const shouldSeek = linked && (syncEase || syncSmooth);\n    const isHori = this.horizontal;\n    const container = this.container;\n    const scroll = this.scroll;\n    const isBefore = scroll <= this.offsetStart;\n    const isAfter = scroll >= this.offsetEnd;\n    const isInView = !isBefore && !isAfter;\n    const isOnTheEdge = scroll === this.offsetStart || scroll === this.offsetEnd;\n    const forceEnter = !this.hasEntered && isOnTheEdge;\n    const $debug = this._debug && this.$debug;\n    let hasUpdated = false;\n    let syncCompleted = false;\n    let p = this.progress;\n\n    if (isBefore && this.began) {\n      this.began = false;\n    }\n\n    if (p > 0 && !this.began) {\n      this.began = true;\n    }\n\n    if (shouldSeek) {\n      const lp = linked.progress;\n      if (syncSmooth && isNum(syncSmooth)) {\n        if (/** @type {Number} */(syncSmooth) < 1) {\n          const step = 0.0001;\n          const snap = lp < p && p === 1 ? step : lp > p && !p ? -1e-4 : 0;\n          p = round(lerp(lp, p, interpolate(.01, .2, /** @type {Number} */(syncSmooth)), false) + snap, 6);\n        }\n      } else if (syncEase) {\n        p = syncEase(p);\n      }\n      hasUpdated = p !== this.prevProgress;\n      syncCompleted = lp === 1;\n      if (hasUpdated && !syncCompleted && (syncSmooth && lp)) {\n        container.wakeTicker.restart();\n      }\n    }\n\n    if ($debug) {\n      const sticky = isHori ? container.scrollY : container.scrollX;\n      $debug.style[isHori ? 'top' : 'left'] = sticky + 10 + 'px';\n    }\n\n    // Trigger enter callbacks if already in view or when entering the view\n    if ((isInView && !this.isInView) || (forceEnter && !this.forceEnter && !this.hasEntered)) {\n      if (isInView) this.isInView = true;\n      if (!this.forceEnter || !this.hasEntered) {\n        if ($debug && isInView) $debug.style.zIndex = `${this.container.zIndex++}`;\n        this.onSyncEnter(this);\n        this.onEnter(this);\n        if (this.backward) {\n          this.onSyncEnterBackward(this);\n          this.onEnterBackward(this);\n        } else {\n          this.onSyncEnterForward(this);\n          this.onEnterForward(this);\n        }\n        this.hasEntered = true;\n        if (forceEnter) this.forceEnter = true;\n      } else if (isInView) {\n        this.forceEnter = false;\n      }\n    }\n\n    if (isInView || !isInView && this.isInView) {\n      hasUpdated = true;\n    }\n\n    if (hasUpdated) {\n      if (shouldSeek) linked.seek(linked.duration * p);\n      this.onUpdate(this);\n    }\n\n    if (!isInView && this.isInView) {\n      this.isInView = false;\n      this.onSyncLeave(this);\n      this.onLeave(this);\n      if (this.backward) {\n        this.onSyncLeaveBackward(this);\n        this.onLeaveBackward(this);\n      } else {\n        this.onSyncLeaveForward(this);\n        this.onLeaveForward(this);\n      }\n      if (sync && !syncSmooth) {\n        syncCompleted = true;\n      }\n    }\n\n    if (p >= 1 && this.began && !this.completed && (sync && syncCompleted || !sync)) {\n      if (sync) {\n        this.onSyncComplete(this);\n      }\n      this.completed = true;\n      if ((!this.repeat && !linked) || (!this.repeat && linked && linked.completed)) {\n        this.revert();\n      }\n    }\n\n    if (p < 1 && this.completed) {\n      this.completed = false;\n    }\n\n    this.prevProgress = p;\n  }\n\n  revert() {\n    if (this.reverted) return;\n    const container = this.container;\n    removeChild(container, this);\n    if (!container._head) {\n      container.revert();\n    }\n    if (this._debug) {\n      this.removeDebug();\n    }\n    this.reverted = true;\n    return this;\n  }\n\n}\n\n/**\n * @param {ScrollObserverParams} [parameters={}]\n * @return {ScrollObserver}\n */\nconst onScroll = (parameters = {}) => new ScrollObserver(parameters);\n\n\n\n\n/**\n * @typedef  {Object} StaggerParameters\n * @property {Number|String} [start]\n * @property {Number|'first'|'center'|'last'} [from]\n * @property {Boolean} [reversed]\n * @property {Array.<Number>} [grid]\n * @property {('x'|'y')} [axis]\n * @property {EasingParam} [ease]\n * @property {TweenModifier} [modifier]\n */\n\n/**\n * @callback StaggerFunction\n * @param {Target} [target]\n * @param {Number} [index]\n * @param {Number} [length]\n * @param {Timeline} [tl]\n * @return {Number|String}\n */\n\n/**\n * @param  {Number|String|[Number|String,Number|String]} val\n * @param  {StaggerParameters} params\n * @return {StaggerFunction}\n */\nconst stagger = (val, params = {}) => {\n  let values = [];\n  let maxValue = 0;\n  const from = params.from;\n  const reversed = params.reversed;\n  const ease = params.ease;\n  const hasEasing = !isUnd(ease);\n  const hasSpring = hasEasing && !isUnd(/** @type {Spring} */(ease).ease);\n  const staggerEase = hasSpring ? /** @type {Spring} */(ease).ease : hasEasing ? parseEasings(ease) : null;\n  const grid = params.grid;\n  const axis = params.axis;\n  const fromFirst = isUnd(from) || from === 0 || from === 'first';\n  const fromCenter = from === 'center';\n  const fromLast = from === 'last';\n  const isRange = isArr(val);\n  const val1 = isRange ? parseNumber(val[0]) : parseNumber(val);\n  const val2 = isRange ? parseNumber(val[1]) : 0;\n  const unitMatch = unitsExecRgx.exec((isRange ? val[1] : val) + emptyString);\n  const start = params.start || 0 + (isRange ? val1 : 0);\n  let fromIndex = fromFirst ? 0 : isNum(from) ? from : 0;\n  return (_, i, t, tl) => {\n    if (fromCenter) fromIndex = (t - 1) / 2;\n    if (fromLast) fromIndex = t - 1;\n    if (!values.length) {\n      for (let index = 0; index < t; index++) {\n        if (!grid) {\n          values.push(abs(fromIndex - index));\n        } else {\n          const fromX = !fromCenter ? fromIndex % grid[0] : (grid[0] - 1) / 2;\n          const fromY = !fromCenter ? floor(fromIndex / grid[0]) : (grid[1] - 1) / 2;\n          const toX = index % grid[0];\n          const toY = floor(index / grid[0]);\n          const distanceX = fromX - toX;\n          const distanceY = fromY - toY;\n          let value = sqrt(distanceX * distanceX + distanceY * distanceY);\n          if (axis === 'x') value = -distanceX;\n          if (axis === 'y') value = -distanceY;\n          values.push(value);\n        }\n        maxValue = max(...values);\n      }\n      if (staggerEase) values = values.map(val => staggerEase(val / maxValue) * maxValue);\n      if (reversed) values = values.map(val => axis ? (val < 0) ? val * -1 : -val : abs(maxValue - val));\n    }\n    const spacing = isRange ? (val2 - val1) / maxValue : val1;\n    const offset = tl ? parseTimelinePosition(tl, isUnd(params.start) ? tl.iterationDuration : start) : /** @type {Number} */(start);\n    /** @type {String|Number} */\n    let output = offset + ((spacing * round(values[i], 2)) || 0);\n    if (params.modifier) output = params.modifier(output);\n    if (unitMatch) output = `${output}${unitMatch[2]}`;\n    return output;\n  }\n};\n\nexport { Animatable, Draggable, JSAnimation, Scope, ScrollObserver, Spring, Timeline, Timer, WAAPIAnimation, animate, createAnimatable, createDraggable, createScope, createSpring, createTimeline, createTimer, eases, engine, onScroll, scrollContainers, stagger, svg, utils, waapi };\n", "import { animate, createTimeline   } from 'animejs'\r\n\r\nwindow.addEventListener('resize', function () { \r\n    \"use strict\";\r\n    window.location.reload(); \r\n});\r\n\r\n\r\n\r\nlet isMobile = (window.innerWidth < 1000)\r\nif(isMobile){\r\n    document.getElementById(\"mobile-nav\").classList.remove(\"hidden\")\r\n    document.getElementById(\"desktop\").classList.add(\"hidden\")\r\n}\r\n\r\nfunction getChildElementByClass(parentElement, className){\r\n\r\n    for (let child of parentElement.children){\r\n        if(child.classList.contains(className)){\r\n            return child;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\ndocument.getElementById(\"companies-selection\").addEventListener(\"change\", (e)=>{\r\n    let cards = document.getElementsByClassName(\"project-card\")\r\n    for(let i = 0; i < cards.length; i++){\r\n        cards[i].classList.remove(\"hidden\")\r\n    }\r\n    if(e.currentTarget.value === \"\"){\r\n        return;\r\n    } \r\n    for(let i = 0; i < cards.length; i++){\r\n\r\n        console.log(cards[i].id)\r\n        if(cards[i].id !== e.currentTarget.value){\r\n            cards[i].classList.add(\"hidden\")\r\n        }\r\n    }\r\n})\r\n\r\n// let expandButtons = Array.from(document.getElementsByClassName(\"material-symbols-outlined\"))\r\n// expandButtons.forEach((i) =>{\r\n    \r\n//     i.addEventListener(\"click\", (e)=>{\r\n//         let card = e.currentTarget.parentElement.parentElement\r\n//         if(card.classList.contains(\"expand\")){\r\n           \r\n//             card.classList.remove(\"expand\")\r\n//             e.currentTarget.innerText = \"expand_content\"\r\n\r\n//             let img = getChildElementByClass(card, \"project-image\");\r\n//             let vid = getChildElementByClass(card, \"video-player\");\r\n\r\n//             if (img) img.classList.remove(\"hidden\");\r\n//             if (vid) vid.classList.add(\"hidden\");\r\n//         } else {\r\n//             let img = getChildElementByClass(card, \"project-image\");\r\n//             let vid = getChildElementByClass(card, \"video-player\");\r\n\r\n//             if (img) img.classList.add(\"hidden\");\r\n//             if (vid){\r\n//                 vid.classList.remove(\"hidden\");\r\n//             } else {\r\n//                 img.classList.remove(\"hidden\")\r\n//             }\r\n//             card.classList.add(\"expand\");\r\n//             e.currentTarget.innerText = \"collapse_content\";\r\n//         }\r\n//     })\r\n// })\r\n\r\n\r\nlet nav = document.getElementsByClassName(\"mob-nav-burger\")\r\nnav[0].addEventListener(\"click\", (e)=>{\r\n    let nav = document.getElementById(\"navlist\")\r\n    nav.classList.toggle(\"expand-nav-burger\")\r\n    nav.classList.toggle(\"collapse-nav-burger\")\r\n})\r\n\r\nlet outside = false;\r\nlet ul = document.getElementById(\"work-list\")\r\nlet ulBound = ul.getBoundingClientRect()\r\nlet work = document.getElementById(\"work\") \r\nlet workBound = work.getBoundingClientRect()\r\nconsole.log(workBound)\r\n\r\n// const timelineCompanyHeadline = createTimeline({defaults: {duration: 250}})\r\n\r\nwindow.addEventListener('scroll', () => {\r\n    // console.log(ul.getBoundingClientRect())\r\n    let translateXPos = (ulBound.width / 2) + (ulBound.x / 2)\r\n    let height = window.innerHeight;\r\n    const triggerPoint = isMobile ? height * 2.5 : height * 2; \r\n    const endPoint = workBound.bottom * .825\r\n    if(!isMobile){\r\n\r\n\r\n        if (window.scrollY > triggerPoint) {\r\n            animate(\"#company-headline\", {\r\n                translateX: -translateXPos,\r\n                translateY: 300,\r\n                rotate: '-90deg',\r\n                duration: 250,\r\n                easing: 'easeOutExpo'\r\n            });\r\n            \r\n        } else if (window.scrollY < triggerPoint) {\r\n            animate(\"#company-headline\", {\r\n                translateX: 0,\r\n                translateY: 0,\r\n                rotate: '0deg',\r\n                duration: 250,\r\n                easing: 'easeOutExpo'\r\n            });\r\n            \r\n        }  \r\n    \r\n        if(window.scrollY > endPoint){\r\n    \r\n            outside = true;\r\n            animate(\"#company-headline\", {\r\n                translateX: -1000,\r\n                opacity: -1,\r\n                // translateY: 0,\r\n                // rotate: '0deg',\r\n                duration: 150,\r\n                easing: 'easeOutExpo'\r\n            });\r\n        } else if(window.scrollY < endPoint && outside){\r\n            outside = false;\r\n            animate(\"#company-headline\", {\r\n                translateX: 0,\r\n                opacity: 1,\r\n                // translateY: 0,\r\n                // rotate: '0deg',\r\n                duration: 250,\r\n                easing: 'easeOutExpo'\r\n            });\r\n        }\r\n    }\r\n  });\r\n\r\n\r\n\r\n\r\n"],
  "mappings": "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",
  "names": ["nodeList", "key", "lookups", "engine", "steps", "keyframes", "hasSpring", "nav"]
}

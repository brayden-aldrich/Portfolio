{
  "version": 3,
  "sources": ["../static/js/photocube.js"],
  "sourcesContent": ["// import * as THREE from 'three';\r\n// import { OrbitControls } from 'three/addons/controls/OrbitControls.js';\r\n// let canvas = document.getElementById(\"photocube\")\r\n// const scene = new THREE.Scene();\r\n// const camera = new THREE.PerspectiveCamera( 75, canvas.width / canvas.height, 0.1, 1000 );\r\n\r\n// camera.position.z = 5;\r\n// const renderer = new THREE.WebGLRenderer({canvas: canvas, alpha: true});\r\n// renderer.setSize( window.innerWidth, window.innerHeight );\r\n// const raycaster = new THREE.Raycaster();\r\n// const mouse = new THREE.Vector2();\r\n\r\n// let light = new THREE.PointLight(0xffffff);\r\n// light.position.set(0, 1.25, 3)\r\n// scene.add(light)\r\n\r\n// let ambient = new THREE.AmbientLight(0xffffff);\r\n// ambient.position.set(0, 1, 1)\r\n// scene.add(ambient)\r\n// const geometry = new THREE.BoxGeometry( 2.5, 3, 2.5 );\r\n\r\n// const loader = new THREE.TextureLoader()\r\n\r\n// const cubeMaterials = [\r\n//     new THREE.MeshBasicMaterial({ map: loader.load('/static/img/gleaners.jpeg'), side: THREE.DoubleSide }), //right side\r\n//     new THREE.MeshBasicMaterial({ map: loader.load('/static/img/teeball.jpg'), side: THREE.DoubleSide}), //left side\r\n//     new THREE.MeshBasicMaterial({ map: loader.load('/static/img/openmic.jpeg'), side: THREE.DoubleSide}), //top side\r\n//     new THREE.MeshBasicMaterial({ map: loader.load('/static/img/skydive.png'), side: THREE.DoubleSide}), //bottom side\r\n//     new THREE.MeshBasicMaterial({ map: loader.load('/static/img/headshot.jpg'), side: THREE.DoubleSide}), //front side\r\n//     new THREE.MeshBasicMaterial({ map: loader.load('/static/img/yellerstone.jpg'), side: THREE.DoubleSide}), //back side\r\n// ];\r\n\r\n// const cube = new THREE.Mesh( geometry, cubeMaterials );\r\n\r\n// cube.position.x = 3.0;\r\n\r\n// scene.add( cube );\r\n\r\n\r\n// const controls = new OrbitControls( camera, renderer.domElement );\r\n\r\n// controls.target.set( 3, 0, 0 ); // rotates at the position of cube\r\n// controls.enableZoom = false;\r\n// controls.enablePan = false;\r\n// controls.update();\r\n\r\n\r\n\r\n// function animate() {\r\n\r\n// \trenderer.render( scene, camera );\r\n    \r\n// }\r\n// renderer.setAnimationLoop( animate );\r\n\r\n// const isEqualXYZ = (a, b) => {\r\n//     return(\r\n//         a.x === b.x &&\r\n//         a.y === b.y &&\r\n//         a.z === b.z\r\n//     )\r\n// }\r\n\r\n// /**\r\n//  *  headshot.jpg front normal: {x: 0, y: 0, z: -1}\r\n//  *  teeball.js left normal: {x: 1, y: 0, z: 0}\r\n//  *  yellerstone back normal: {x: 0, y: 0, z: 1}\r\n//  *  gleaners right normal: {x: -1, y: 0, z: 0}\r\n//  *  openmic top normal: {x: 0, y: -1, z: 0}\r\n//  *  skydive bottom normal: {x: 0, y: 1, z: 0}\r\n//  */\r\n// let imgObj = [\r\n//     {\r\n//         name: \"Me.\",\r\n//         normal: {x: 0, y: 0, z: -1}\r\n//     }, \r\n//     {\r\n//         name: \"I wasn't a fan of teeball.\",\r\n//         normal: {x: 1, y: 0, z: 0}\r\n//     }, \r\n//     {\r\n//         name: \"Me hiking in Yellowstone.\",\r\n//         normal: {x: 0, y: 0, z: 1}\r\n//     }, \r\n//     {\r\n//         name: \"Every year at Yazaki we volunteered at Gleaners to help set up their food drive.\",\r\n//         normal: {x: -1, y: 0, z: 0}\r\n//     }, \r\n//     {\r\n//         name: \"Entertaining the masses as the MC at an open mic. They weren't very entertained.\",\r\n//         normal: {x: 0, y: -1, z: 0}\r\n//     }, \r\n//     {\r\n//         name: \"Me skydiving. My goal is to get a license in the future.\",\r\n//         normal: {x: 0, y: 1, z: 0}\r\n//     }\r\n// ]\r\n\r\n\r\n// let description = document.getElementById(\"right-about-p\")\r\n// window.addEventListener('mousemove', (event) => {\r\n//     mouse.x = ( event.clientX / window.innerWidth ) * 2 - 1;\r\n//     mouse.y = - ( event.clientY / window.innerHeight ) * 2 + 1;\r\n    \r\n//     raycaster.setFromCamera(mouse, camera);\r\n//     const intersects = raycaster.intersectObjects(scene.children, true);\r\n//     for (let i = 0; i < intersects.length; i++) {        \r\n//         for (let j = 0; j < imgObj.length; j++) {\r\n//             if (isEqualXYZ(intersects[i].face.normal, imgObj[j].normal)) {\r\n//                 description.innerHTML = imgObj[j].name\r\n//             }\r\n//         }\r\n//     }\r\n    \r\n// })"],
  "mappings": ";;;;;;;AAAA;AAAA;AAAA;AAAA;",
  "names": []
}
